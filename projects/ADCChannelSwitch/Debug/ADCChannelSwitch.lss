
ADCChannelSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f6  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000622  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e9  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initPorts>:
#include <avr/interrupt.h>
#include <util/delay.h>

void initPorts()
{
	DDRA &= ~(1 << PA0);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1 << PA0);
  72:	8b b3       	in	r24, 0x1b	; 27
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	8b bb       	out	0x1b, r24	; 27
	
	DDRC |= 0xFF;
  78:	84 b3       	in	r24, 0x14	; 20
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	84 bb       	out	0x14, r24	; 20
  7e:	08 95       	ret

00000080 <initADC>:
}

void initADC()
{
	ADCSRA |= (1 << ADSC); // start conversation
  80:	86 b1       	in	r24, 0x06	; 6
  82:	80 64       	ori	r24, 0x40	; 64
  84:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN); // enable ADC
  86:	86 b1       	in	r24, 0x06	; 6
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADATE); // trigger source on
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2); // prescaler 128
  92:	86 b1       	in	r24, 0x06	; 6
  94:	87 60       	ori	r24, 0x07	; 7
  96:	86 b9       	out	0x06, r24	; 6
	
	ADMUX |= (1 << REFS0); // ref voltage to AVCC
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	87 b9       	out	0x07, r24	; 7
  9e:	08 95       	ret

000000a0 <readADC>:
}

int readADC(uint8_t channel)
{
	ADMUX |= (ADMUX & 0xF0)|(channel & 0x0F); // select ADC channel
  a0:	27 b1       	in	r18, 0x07	; 7
  a2:	97 b1       	in	r25, 0x07	; 7
  a4:	20 7f       	andi	r18, 0xF0	; 240
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	82 2b       	or	r24, r18
  aa:	98 2b       	or	r25, r24
  ac:	97 b9       	out	0x07, r25	; 7
	
	while(!(ADCSRA & (1 << ADIF))); // conversation complete (wait)
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <readADC+0xe>
	
	return ADC; // full resolution 10 bit
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	95 b1       	in	r25, 0x05	; 5
}
  b6:	08 95       	ret

000000b8 <main>:

int main(void)
{
	cli(); // lock
  b8:	f8 94       	cli
	initADC();
  ba:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
	initPorts();
  be:	0e 94 36 00 	call	0x6c	; 0x6c <initPorts>
	sei(); // release
  c2:	78 94       	sei
	
	while(1)
	{
		for(uint8_t channel = 0; channel <= 2; ++channel)
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	0e c0       	rjmp	.+28     	; 0xe4 <main+0x2c>
		{
			int result = readADC(channel); // read ADC, switch channels
  c8:	8c 2f       	mov	r24, r28
  ca:	0e 94 50 00 	call	0xa0	; 0xa0 <readADC>
			PORTC = result; // show results on LED's
  ce:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	8e e9       	ldi	r24, 0x9E	; 158
  d4:	94 e2       	ldi	r25, 0x24	; 36
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x28>
  e0:	00 00       	nop
	initPorts();
	sei(); // release
	
	while(1)
	{
		for(uint8_t channel = 0; channel <= 2; ++channel)
  e2:	cf 5f       	subi	r28, 0xFF	; 255
  e4:	c3 30       	cpi	r28, 0x03	; 3
  e6:	80 f3       	brcs	.-32     	; 0xc8 <main+0x10>
  e8:	ed cf       	rjmp	.-38     	; 0xc4 <main+0xc>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>

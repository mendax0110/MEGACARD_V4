
VoltageStab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001a2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000062e  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057e  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000214  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e1  00000000  00000000  00001463  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 94 00 	call	0x128	; 0x128 <main>
  8a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_14>:
volatile uint16_t voltage = 0; // Global variable to store the voltage
volatile uint16_t reference_voltage = 5000; // Desired voltage in millivolts

// Interrupt service routine for ADC conversion complete
ISR(ADC_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
	voltage = ADC * 5000 / 1023; // Convert the ADC value to millivolts
  b0:	44 b1       	in	r20, 0x04	; 4
  b2:	55 b1       	in	r21, 0x05	; 5
  b4:	28 e8       	ldi	r18, 0x88	; 136
  b6:	33 e1       	ldi	r19, 0x13	; 19
  b8:	42 9f       	mul	r20, r18
  ba:	c0 01       	movw	r24, r0
  bc:	43 9f       	mul	r20, r19
  be:	90 0d       	add	r25, r0
  c0:	52 9f       	mul	r21, r18
  c2:	90 0d       	add	r25, r0
  c4:	11 24       	eor	r1, r1
  c6:	6f ef       	ldi	r22, 0xFF	; 255
  c8:	73 e0       	ldi	r23, 0x03	; 3
  ca:	0e 94 ac 00 	call	0x158	; 0x158 <__udivmodhi4>
  ce:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
  d2:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
	uint16_t error = reference_voltage - voltage; // Calculate the error
  d6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  e6:	28 1b       	sub	r18, r24
  e8:	39 0b       	sbc	r19, r25
	int16_t correction = error / 10; // Calculate the correction
  ea:	ad ec       	ldi	r26, 0xCD	; 205
  ec:	bc ec       	ldi	r27, 0xCC	; 204
  ee:	0e 94 c0 00 	call	0x180	; 0x180 <__umulhisi3>
  f2:	96 95       	lsr	r25
  f4:	87 95       	ror	r24
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	96 95       	lsr	r25
  fc:	87 95       	ror	r24
	OCR1A = OCR1A + correction; // Apply the correction
  fe:	2a b5       	in	r18, 0x2a	; 42
 100:	3b b5       	in	r19, 0x2b	; 43
 102:	82 0f       	add	r24, r18
 104:	93 1f       	adc	r25, r19
 106:	9b bd       	out	0x2b, r25	; 43
 108:	8a bd       	out	0x2a, r24	; 42
}
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <main>:

int main(void)
{
	// set up ADC for single ended input on PC0
	ADMUX = (1 << REFS0); // AVcc as reference
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Enable ADC, interrupt, prescaler 128
 12c:	8f e8       	ldi	r24, 0x8F	; 143
 12e:	86 b9       	out	0x06, r24	; 6

	// set up Timer/Counter1 for Fast PWM mdoe with OCR1A as top
	DDRB |= (1 << PB1);     // set OC1A as output
 130:	87 b3       	in	r24, 0x17	; 23
 132:	82 60       	ori	r24, 0x02	; 2
 134:	87 bb       	out	0x17, r24	; 23
	TCCR1A = (1 << COM1A1) | (1 << WGM11); // Clear OC1A on compare match, set OC1A at TOP, fast PWM mode
 136:	82 e8       	ldi	r24, 0x82	; 130
 138:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10); // Fast PWM mode, prescaler 1
 13a:	89 e1       	ldi	r24, 0x19	; 25
 13c:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 9999; // Set TOP to 9999
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	97 e2       	ldi	r25, 0x27	; 39
 142:	97 bd       	out	0x27, r25	; 39
 144:	86 bd       	out	0x26, r24	; 38
	OCR1A = 4999; // Set initial duty cycle to 50%
 146:	87 e8       	ldi	r24, 0x87	; 135
 148:	93 e1       	ldi	r25, 0x13	; 19
 14a:	9b bd       	out	0x2b, r25	; 43
 14c:	8a bd       	out	0x2a, r24	; 42

	sei(); // Enable global interrupts
 14e:	78 94       	sei

	ADCSRA |= (1 << ADSC); // Start ADC conversion
 150:	86 b1       	in	r24, 0x06	; 6
 152:	80 64       	ori	r24, 0x40	; 64
 154:	86 b9       	out	0x06, r24	; 6
 156:	ff cf       	rjmp	.-2      	; 0x156 <main+0x2e>

00000158 <__udivmodhi4>:
 158:	aa 1b       	sub	r26, r26
 15a:	bb 1b       	sub	r27, r27
 15c:	51 e1       	ldi	r21, 0x11	; 17
 15e:	07 c0       	rjmp	.+14     	; 0x16e <__udivmodhi4_ep>

00000160 <__udivmodhi4_loop>:
 160:	aa 1f       	adc	r26, r26
 162:	bb 1f       	adc	r27, r27
 164:	a6 17       	cp	r26, r22
 166:	b7 07       	cpc	r27, r23
 168:	10 f0       	brcs	.+4      	; 0x16e <__udivmodhi4_ep>
 16a:	a6 1b       	sub	r26, r22
 16c:	b7 0b       	sbc	r27, r23

0000016e <__udivmodhi4_ep>:
 16e:	88 1f       	adc	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	5a 95       	dec	r21
 174:	a9 f7       	brne	.-22     	; 0x160 <__udivmodhi4_loop>
 176:	80 95       	com	r24
 178:	90 95       	com	r25
 17a:	bc 01       	movw	r22, r24
 17c:	cd 01       	movw	r24, r26
 17e:	08 95       	ret

00000180 <__umulhisi3>:
 180:	a2 9f       	mul	r26, r18
 182:	b0 01       	movw	r22, r0
 184:	b3 9f       	mul	r27, r19
 186:	c0 01       	movw	r24, r0
 188:	a3 9f       	mul	r26, r19
 18a:	70 0d       	add	r23, r0
 18c:	81 1d       	adc	r24, r1
 18e:	11 24       	eor	r1, r1
 190:	91 1d       	adc	r25, r1
 192:	b2 9f       	mul	r27, r18
 194:	70 0d       	add	r23, r0
 196:	81 1d       	adc	r24, r1
 198:	11 24       	eor	r1, r1
 19a:	91 1d       	adc	r25, r1
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>

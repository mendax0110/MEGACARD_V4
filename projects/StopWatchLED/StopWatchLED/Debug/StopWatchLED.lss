
StopWatchLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000803  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000613  00000000  00000000  00000abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000356  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  000018d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  74:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
volatile uint8_t s0_Pressed = 0;  
volatile uint8_t s1_Pressed = 0; 
volatile uint8_t stopwatch_running = 0;  

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
    if (stopwatch_running)
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	88 23       	and	r24, r24
  8e:	29 f0       	breq	.+10     	; 0x9a <__vector_19+0x1e>
    {
        seconds++;
  90:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <seconds>
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <seconds>
    }
}
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <init_Timer0>:

void init_Timer0()
{
    TCCR0 |= (1 << WGM01) | (1 << CS02) | (1 << CS00);
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	8d 60       	ori	r24, 0x0D	; 13
  aa:	83 bf       	out	0x33, r24	; 51
    
    OCR0 = 150;
  ac:	86 e9       	ldi	r24, 0x96	; 150
  ae:	8c bf       	out	0x3c, r24	; 60
    
    TIMSK |= (1 << OCIE0);
  b0:	89 b7       	in	r24, 0x39	; 57
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	89 bf       	out	0x39, r24	; 57
  b6:	08 95       	ret

000000b8 <update_leds>:
}

void update_leds()
{
    PORTC = (1 << (seconds % 8));   // Sekunden auf den LEDs PC0-PC7 anzeigen
  b8:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <seconds>
  bc:	27 70       	andi	r18, 0x07	; 7
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <update_leds+0x10>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <update_leds+0xc>
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	08 95       	ret

000000d0 <init_Ports>:
}

void init_Ports()
{
    DDRC = 0xFF;    // LEDs PC0-PC7 als Ausgabe festlegen
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 bb       	out	0x14, r24	; 20
    
    DDRA &= ~(1 << PA0) & ~(1 << PA1);  // Tasten PA0 und PA1 als Eingabe festlegen
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	8c 7f       	andi	r24, 0xFC	; 252
  d8:	8a bb       	out	0x1a, r24	; 26
    
    PORTA |= (1 << PA0) | (1 << PA1);   // Pull-Up-Widerstände für Tasten aktivieren
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	08 95       	ret

000000e2 <start_stopwatch>:
}

void start_stopwatch()
{
    stopwatch_running = 1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e8:	08 95       	ret

000000ea <stop_stopwatch>:
}

void stop_stopwatch()
{
    stopwatch_running = 0;
  ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	08 95       	ret

000000f0 <reset_stopwatch>:
}

void reset_stopwatch()
{
    stopwatch_running = 0;
  f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    seconds = 0;
  f4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <seconds>
  f8:	08 95       	ret

000000fa <main>:
}

int main(void)
{
    cli();  
  fa:	f8 94       	cli
    init_Ports();   
  fc:	0e 94 68 00 	call	0xd0	; 0xd0 <init_Ports>
    init_Timer0(); 
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <init_Timer0>
    sei();  
 104:	78 94       	sei
	
    while (1)
    {
        update_leds();  
 106:	0e 94 5c 00 	call	0xb8	; 0xb8 <update_leds>
        
        if (!(PINA & (1 << PA0)))
 10a:	c8 99       	sbic	0x19, 0	; 25
 10c:	1d c0       	rjmp	.+58     	; 0x148 <main+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f eb       	ldi	r18, 0xBF	; 191
 110:	84 ed       	ldi	r24, 0xD4	; 212
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x1a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x24>
 11e:	00 00       	nop
        {
            _delay_ms(50);  
            if (!(PINA & (1 << PA0)))  
 120:	c8 99       	sbic	0x19, 0	; 25
 122:	12 c0       	rjmp	.+36     	; 0x148 <main+0x4e>
            {
                if (stopwatch_running)
 124:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 128:	88 23       	and	r24, r24
 12a:	19 f0       	breq	.+6      	; 0x132 <main+0x38>
                {
                    stop_stopwatch();  
 12c:	0e 94 75 00 	call	0xea	; 0xea <stop_stopwatch>
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0x3c>
                }
                else
                {
                    start_stopwatch();  
 132:	0e 94 71 00 	call	0xe2	; 0xe2 <start_stopwatch>
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	82 e5       	ldi	r24, 0x52	; 82
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x42>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x4c>
 146:	00 00       	nop
                }
                _delay_ms(200);  
            }
        }
        
        if (!(PINA & (1 << PA1)))
 148:	c9 99       	sbic	0x19, 1	; 25
 14a:	dd cf       	rjmp	.-70     	; 0x106 <main+0xc>
 14c:	2f eb       	ldi	r18, 0xBF	; 191
 14e:	84 ed       	ldi	r24, 0xD4	; 212
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x58>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x62>
 15c:	00 00       	nop
        {
            _delay_ms(50); 
            if (!(PINA & (1 << PA1)))  
 15e:	c9 99       	sbic	0x19, 1	; 25
 160:	d2 cf       	rjmp	.-92     	; 0x106 <main+0xc>
            {
                reset_stopwatch();  
 162:	0e 94 78 00 	call	0xf0	; 0xf0 <reset_stopwatch>
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	82 e5       	ldi	r24, 0x52	; 82
 16a:	97 e0       	ldi	r25, 0x07	; 7
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x72>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x7c>
 176:	00 00       	nop
 178:	c6 cf       	rjmp	.-116    	; 0x106 <main+0xc>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>

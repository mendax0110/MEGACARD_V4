
Patterns.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  0000015c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b5  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ff  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028d  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000396  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  000015aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	{1, 0, 0, 1, 0, 1, 0, 1}, // pattern 5
};

int main(void)
{
	DDRC = 0xFF;	// set PORTC as output
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;	// clear PORTC
  86:	15 ba       	out	0x15, r1	; 21
	DDRA = 0x00;	// set PORTA as input
  88:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	// enable pull-up resistors on PORTA
  8a:	8b bb       	out	0x1b, r24	; 27
	
	int current_pattern = 0;	// index of the current pattern
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	70 e0       	ldi	r23, 0x00	; 0
	
	while(1)
	{
		// check if button 1 is pressed
		if(!(PINA & 0x01))
  90:	c8 99       	sbic	0x19, 0	; 25
  92:	07 c0       	rjmp	.+14     	; 0xa2 <main+0x20>
		{
			// move to the previous pattern
			current_pattern = (current_pattern - 1 + NUM_PATTERNS) % NUM_PATTERNS;
  94:	cb 01       	movw	r24, r22
  96:	04 96       	adiw	r24, 0x04	; 4
  98:	65 e0       	ldi	r22, 0x05	; 5
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	0e 94 84 00 	call	0x108	; 0x108 <__divmodhi4>
  a0:	bc 01       	movw	r22, r24
		}
		
		// check if button 2 is pressed
		if(!(PINA & 0x02))
  a2:	c9 99       	sbic	0x19, 1	; 25
  a4:	07 c0       	rjmp	.+14     	; 0xb4 <main+0x32>
		{
			// move to the next pattern
			current_pattern = (current_pattern + 1) % NUM_PATTERNS;
  a6:	cb 01       	movw	r24, r22
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	65 e0       	ldi	r22, 0x05	; 5
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	0e 94 84 00 	call	0x108	; 0x108 <__divmodhi4>
  b2:	bc 01       	movw	r22, r24
		}
		
		// convert the pattern to an unsigned char
		unsigned char pattern = 0;
		
		for(int i = 0; i < 8; i++)
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
			// move to the next pattern
			current_pattern = (current_pattern + 1) % NUM_PATTERNS;
		}
		
		// convert the pattern to an unsigned char
		unsigned char pattern = 0;
  b8:	90 e0       	ldi	r25, 0x00	; 0
		
		for(int i = 0; i < 8; i++)
  ba:	18 c0       	rjmp	.+48     	; 0xec <main+0x6a>
		{
			pattern |= (patterns[current_pattern][i] << i);
  bc:	fb 01       	movw	r30, r22
  be:	ee 0f       	add	r30, r30
  c0:	ff 1f       	adc	r31, r31
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e2 0f       	add	r30, r18
  cc:	f3 1f       	adc	r31, r19
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	e0 5a       	subi	r30, 0xA0	; 160
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	40 81       	ld	r20, Z
  d8:	51 81       	ldd	r21, Z+1	; 0x01
  da:	02 2e       	mov	r0, r18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x60>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <main+0x5c>
  e6:	94 2b       	or	r25, r20
		}
		
		// convert the pattern to an unsigned char
		unsigned char pattern = 0;
		
		for(int i = 0; i < 8; i++)
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	28 30       	cpi	r18, 0x08	; 8
  ee:	31 05       	cpc	r19, r1
  f0:	2c f3       	brlt	.-54     	; 0xbc <main+0x3a>
		{
			pattern |= (patterns[current_pattern][i] << i);
		}
		
		// display the current pattern
		PORTC = pattern;
  f2:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f e7       	ldi	r18, 0x7F	; 127
  f6:	8f e4       	ldi	r24, 0x4F	; 79
  f8:	92 e1       	ldi	r25, 0x12	; 18
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x78>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x82>
 104:	00 00       	nop
 106:	c4 cf       	rjmp	.-120    	; 0x90 <main+0xe>

00000108 <__divmodhi4>:
 108:	97 fb       	bst	r25, 7
 10a:	07 2e       	mov	r0, r23
 10c:	16 f4       	brtc	.+4      	; 0x112 <__divmodhi4+0xa>
 10e:	00 94       	com	r0
 110:	07 d0       	rcall	.+14     	; 0x120 <__divmodhi4_neg1>
 112:	77 fd       	sbrc	r23, 7
 114:	09 d0       	rcall	.+18     	; 0x128 <__divmodhi4_neg2>
 116:	0e 94 98 00 	call	0x130	; 0x130 <__udivmodhi4>
 11a:	07 fc       	sbrc	r0, 7
 11c:	05 d0       	rcall	.+10     	; 0x128 <__divmodhi4_neg2>
 11e:	3e f4       	brtc	.+14     	; 0x12e <__divmodhi4_exit>

00000120 <__divmodhi4_neg1>:
 120:	90 95       	com	r25
 122:	81 95       	neg	r24
 124:	9f 4f       	sbci	r25, 0xFF	; 255
 126:	08 95       	ret

00000128 <__divmodhi4_neg2>:
 128:	70 95       	com	r23
 12a:	61 95       	neg	r22
 12c:	7f 4f       	sbci	r23, 0xFF	; 255

0000012e <__divmodhi4_exit>:
 12e:	08 95       	ret

00000130 <__udivmodhi4>:
 130:	aa 1b       	sub	r26, r26
 132:	bb 1b       	sub	r27, r27
 134:	51 e1       	ldi	r21, 0x11	; 17
 136:	07 c0       	rjmp	.+14     	; 0x146 <__udivmodhi4_ep>

00000138 <__udivmodhi4_loop>:
 138:	aa 1f       	adc	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	a6 17       	cp	r26, r22
 13e:	b7 07       	cpc	r27, r23
 140:	10 f0       	brcs	.+4      	; 0x146 <__udivmodhi4_ep>
 142:	a6 1b       	sub	r26, r22
 144:	b7 0b       	sbc	r27, r23

00000146 <__udivmodhi4_ep>:
 146:	88 1f       	adc	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	5a 95       	dec	r21
 14c:	a9 f7       	brne	.-22     	; 0x138 <__udivmodhi4_loop>
 14e:	80 95       	com	r24
 150:	90 95       	com	r25
 152:	bc 01       	movw	r22, r24
 154:	cd 01       	movw	r24, r26
 156:	08 95       	ret

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>


HealthCheckAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077f  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b3  00000000  00000000  00000f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000072  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001685  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
{
	/*Wait for data to be received*/
	while(!(UCSRA & (1<<RXC)));
	/*Get and return received data from buffer*/
	return UDR;
}
  6c:	90 bd       	out	0x20, r25	; 32
  6e:	89 b9       	out	0x09, r24	; 9
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
  74:	8e e0       	ldi	r24, 0x0E	; 14
  76:	80 bd       	out	0x20, r24	; 32
  78:	08 95       	ret

0000007a <USART_Transmit>:
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_Transmit>
  7e:	8c b9       	out	0x0c, r24	; 12
  80:	08 95       	ret

00000082 <perform_routine_check>:
{
	/*Initialize result to 0 (indicating success)*/
	int result = 0;
	
	/*Check the value of the ADC Data Register to make sure the ADC is working properly*/
	if(ADC == 0)
  82:	84 b1       	in	r24, 0x04	; 4
  84:	95 b1       	in	r25, 0x05	; 5
  86:	89 2b       	or	r24, r25
  88:	19 f0       	breq	.+6      	; 0x90 <perform_routine_check+0xe>
}

int perform_routine_check()
{
	/*Initialize result to 0 (indicating success)*/
	int result = 0;
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <perform_routine_check+0x12>
	
	/*Check the value of the ADC Data Register to make sure the ADC is working properly*/
	if(ADC == 0)
	{
		result = 1;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	/*Check the vlaue of the Timer Counter Register to make sure the time is working properly*/
	if(TCNT0 == 0)
  94:	22 b7       	in	r18, 0x32	; 50
  96:	21 11       	cpse	r18, r1
  98:	02 c0       	rjmp	.+4      	; 0x9e <perform_routine_check+0x1c>
	{
		result = 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	/*Return the result of the check*/
	return result;
}
  9e:	08 95       	ret

000000a0 <main>:

int main(void)
{
	/*Initialize the USART*/
	USART_Init(MYUBRR);
  a0:	8c e0       	ldi	r24, 0x0C	; 12
  a2:	93 e0       	ldi	r25, 0x03	; 3
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	
	/*Perform routine check*/
	int check_result = perform_routine_check();
  a8:	0e 94 41 00 	call	0x82	; 0x82 <perform_routine_check>
	
	/*Output the result of the check via serial command line*/
	if(check_result == 0)
  ac:	89 2b       	or	r24, r25
  ae:	b1 f4       	brne	.+44     	; 0xdc <main+0x3c>
	{
		USART_Transmit('H');
  b0:	88 e4       	ldi	r24, 0x48	; 72
  b2:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		USART_Transmit('e');
  b6:	85 e6       	ldi	r24, 0x65	; 101
  b8:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		USART_Transmit('a');
  bc:	81 e6       	ldi	r24, 0x61	; 97
  be:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		USART_Transmit('l');
  c2:	8c e6       	ldi	r24, 0x6C	; 108
  c4:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		USART_Transmit('t');
  c8:	84 e7       	ldi	r24, 0x74	; 116
  ca:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		USART_Transmit('h');
  ce:	88 e6       	ldi	r24, 0x68	; 104
  d0:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		USART_Transmit('y');
  d4:	89 e7       	ldi	r24, 0x79	; 121
  d6:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
  da:	0f c0       	rjmp	.+30     	; 0xfa <main+0x5a>
	}
	else
	{
		 USART_Transmit('E');
  dc:	85 e4       	ldi	r24, 0x45	; 69
  de:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		 USART_Transmit('r');
  e2:	82 e7       	ldi	r24, 0x72	; 114
  e4:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		 USART_Transmit('r');
  e8:	82 e7       	ldi	r24, 0x72	; 114
  ea:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		 USART_Transmit('o');
  ee:	8f e6       	ldi	r24, 0x6F	; 111
  f0:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
		 USART_Transmit('r');
  f4:	82 e7       	ldi	r24, 0x72	; 114
  f6:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Transmit>
	}
	
	return 0;
}
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>

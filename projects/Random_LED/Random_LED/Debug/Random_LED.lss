
Random_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b1  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000604  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00000e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f8  00000000  00000000  000014f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
}

int main(void)
{
  // Set the LED pin as an output
  LED_DDR |= (1 << LED_PIN);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	87 bb       	out	0x17, r24	; 23

  // Initialize the game variables
  int position = 0;
  int direction = 1;
  72:	41 e0       	ldi	r20, 0x01	; 1
  74:	50 e0       	ldi	r21, 0x00	; 0
{
  // Set the LED pin as an output
  LED_DDR |= (1 << LED_PIN);

  // Initialize the game variables
  int position = 0;
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
  int direction = 1;
  int speed = 50;
  int game_over = 0;

  // Game loop
  while (!game_over)
  7a:	25 c0       	rjmp	.+74     	; 0xc6 <main+0x5a>
  {
    // Move the LED in the current direction
    position += direction;

    // Check if the LED has reached the end of the screen
    if (position == 0 || position == 7)
  7c:	27 30       	cpi	r18, 0x07	; 7
  7e:	31 05       	cpc	r19, r1
  80:	19 f4       	brne	.+6      	; 0x88 <main+0x1c>
    {
      // Change the direction of the LED
      direction *= -1;
  82:	51 95       	neg	r21
  84:	41 95       	neg	r20
  86:	51 09       	sbc	r21, r1
    }

    // Clear the LED port
    LED_PORT = 0;
  88:	18 ba       	out	0x18, r1	; 24

    // Set the LED at the current position
    for (int i = 0; i < 8; i++)
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0f c0       	rjmp	.+30     	; 0xae <main+0x42>
    {
      if (i == position)
  90:	82 17       	cp	r24, r18
  92:	93 07       	cpc	r25, r19
  94:	59 f4       	brne	.+22     	; 0xac <main+0x40>
      {
        // Set the bit for the current position
        LED_PORT |= (1 << i);
  96:	e8 b3       	in	r30, 0x18	; 24
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	08 2e       	mov	r0, r24
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x38>
  a0:	66 0f       	add	r22, r22
  a2:	77 1f       	adc	r23, r23
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x34>
  a8:	6e 2b       	or	r22, r30
  aa:	68 bb       	out	0x18, r22	; 24

    // Clear the LED port
    LED_PORT = 0;

    // Set the LED at the current position
    for (int i = 0; i < 8; i++)
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	91 05       	cpc	r25, r1
  b2:	74 f3       	brlt	.-36     	; 0x90 <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	6f eb       	ldi	r22, 0xBF	; 191
  b6:	84 ed       	ldi	r24, 0xD4	; 212
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	61 50       	subi	r22, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	00 00       	nop

  // Game loop
  while (!game_over)
  {
    // Move the LED in the current direction
    position += direction;
  c6:	24 0f       	add	r18, r20
  c8:	35 1f       	adc	r19, r21

    // Check if the LED has reached the end of the screen
    if (position == 0 || position == 7)
  ca:	21 15       	cp	r18, r1
  cc:	31 05       	cpc	r19, r1
  ce:	c9 f2       	breq	.-78     	; 0x82 <main+0x16>
  d0:	d5 cf       	rjmp	.-86     	; 0x7c <main+0x10>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

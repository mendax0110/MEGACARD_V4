
FastPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f3  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055e  00000000  00000000  00000787  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020c  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_ports>:
#include <avr/interrupt.h>	// std interrupt lib
#include <avr/portpins.h>	// std port and pins lib

void init_ports()
{
	DDRC = 0xFF;			// set all to output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7);	// Indicator LED - Turn on to check
  70:	85 b3       	in	r24, 0x15	; 21
  72:	80 68       	ori	r24, 0x80	; 128
  74:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);		// signal on PB3
  76:	87 b3       	in	r24, 0x17	; 23
  78:	88 60       	ori	r24, 0x08	; 8
  7a:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB3);	// set PB3 to low (OC0 -> Output) 
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	87 7f       	andi	r24, 0xF7	; 247
  80:	88 bb       	out	0x18, r24	; 24
  82:	08 95       	ret

00000084 <init_fast_PWM>:
}

void init_fast_PWM()
{
	TCCR0 |= (1 << WGM00) | (1 << COM01) | (1 << WGM01) | (1 << CS01) | (1 << CS00);	// fast PWM Mode(WGM00/WGM01), clear OC0 on compare match(COM01)
  84:	83 b7       	in	r24, 0x33	; 51
  86:	8b 66       	ori	r24, 0x6B	; 107
  88:	83 bf       	out	0x33, r24	; 51
	OCR0 = 150;																			// Fout = 12Mhz / (64*256) = 732,421875 Hz, if OCR0 gets bigger the pulse width get bigger
  8a:	86 e9       	ldi	r24, 0x96	; 150
  8c:	8c bf       	out	0x3c, r24	; 60
  8e:	08 95       	ret

00000090 <main>:
}


int main(void)
{
	cli();				// lock the global interrupt
  90:	f8 94       	cli
	
	init_ports();		// init the ports
  92:	0e 94 36 00 	call	0x6c	; 0x6c <init_ports>
	init_fast_PWM();	// init the fast pwm
  96:	0e 94 42 00 	call	0x84	; 0x84 <init_fast_PWM>
    
	sei();				// free the global interrupt
  9a:	78 94       	sei
  9c:	ff cf       	rjmp	.-2      	; 0x9c <main+0xc>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>

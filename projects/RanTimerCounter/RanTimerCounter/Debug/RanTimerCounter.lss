
RanTimerCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000292  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800064  00800064  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a1  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060a  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a2  00000000  00000000  00001073  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b4  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a4 e6       	ldi	r26, 0x64	; 100
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 e9       	ldi	r30, 0x92	; 146
  78:	f2 e0       	ldi	r31, 0x02	; 2
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8a:	0c 94 47 01 	jmp	0x28e	; 0x28e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_8>:
#define LED2_PIN PB1

volatile uint8_t timer1_overflow_count = 0;

ISR(TIMER1_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	timer1_overflow_count++;
  9e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <init_timer1>:

void init_timer1()
{
	TCCR1B |= (1 << CS10); // start timer, no prescaler
  b4:	8e b5       	in	r24, 0x2e	; 46
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1); // enable timer overflow interrupt
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	89 bf       	out	0x39, r24	; 57
	sei(); // enable global interrupts
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <main>:
}

int main(void)
{
	DDRB |= (1 << LED1_PIN) | (1 << LED2_PIN); // set LED pins as output
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	87 bb       	out	0x17, r24	; 23
	init_timer1(); // initialize Timer1
  ca:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_timer1>

	while (1)
	{
		if (timer1_overflow_count >= 5)
  ce:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  d2:	85 30       	cpi	r24, 0x05	; 5
  d4:	e0 f3       	brcs	.-8      	; 0xce <main+0xa>
		{
			// turn off both LEDs
			PORTB &= ~(1 << LED1_PIN);
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	88 bb       	out	0x18, r24	; 24
			PORTB &= ~(1 << LED2_PIN);
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	8d 7f       	andi	r24, 0xFD	; 253
  e0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	8e e9       	ldi	r24, 0x9E	; 158
  e6:	94 e2       	ldi	r25, 0x24	; 36
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x24>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x2e>
  f2:	00 00       	nop

			// wait for 1 second
			_delay_ms(1000);

			// turn on a random LED
			if (rand() % 2 == 0)
  f4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <rand>
  f8:	80 fd       	sbrc	r24, 0
  fa:	04 c0       	rjmp	.+8      	; 0x104 <main+0x40>
			{
				PORTB |= (1 << LED1_PIN);
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	88 bb       	out	0x18, r24	; 24
 102:	03 c0       	rjmp	.+6      	; 0x10a <main+0x46>
			}
			else
			{
				PORTB |= (1 << LED2_PIN);
 104:	88 b3       	in	r24, 0x18	; 24
 106:	82 60       	ori	r24, 0x02	; 2
 108:	88 bb       	out	0x18, r24	; 24
			}

			// reset overflow count
			timer1_overflow_count = 0;
 10a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
 10e:	df cf       	rjmp	.-66     	; 0xce <main+0xa>

00000110 <do_rand>:
 110:	8f 92       	push	r8
 112:	9f 92       	push	r9
 114:	af 92       	push	r10
 116:	bf 92       	push	r11
 118:	cf 92       	push	r12
 11a:	df 92       	push	r13
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
 126:	68 81       	ld	r22, Y
 128:	79 81       	ldd	r23, Y+1	; 0x01
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	9b 81       	ldd	r25, Y+3	; 0x03
 12e:	61 15       	cp	r22, r1
 130:	71 05       	cpc	r23, r1
 132:	81 05       	cpc	r24, r1
 134:	91 05       	cpc	r25, r1
 136:	21 f4       	brne	.+8      	; 0x140 <do_rand+0x30>
 138:	64 e2       	ldi	r22, 0x24	; 36
 13a:	79 ed       	ldi	r23, 0xD9	; 217
 13c:	8b e5       	ldi	r24, 0x5B	; 91
 13e:	97 e0       	ldi	r25, 0x07	; 7
 140:	2d e1       	ldi	r18, 0x1D	; 29
 142:	33 ef       	ldi	r19, 0xF3	; 243
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__divmodsi4>
 14c:	49 01       	movw	r8, r18
 14e:	5a 01       	movw	r10, r20
 150:	9b 01       	movw	r18, r22
 152:	ac 01       	movw	r20, r24
 154:	a7 ea       	ldi	r26, 0xA7	; 167
 156:	b1 e4       	ldi	r27, 0x41	; 65
 158:	0e 94 03 01 	call	0x206	; 0x206 <__muluhisi3>
 15c:	6b 01       	movw	r12, r22
 15e:	7c 01       	movw	r14, r24
 160:	ac ee       	ldi	r26, 0xEC	; 236
 162:	b4 ef       	ldi	r27, 0xF4	; 244
 164:	a5 01       	movw	r20, r10
 166:	94 01       	movw	r18, r8
 168:	0e 94 11 01 	call	0x222	; 0x222 <__mulohisi3>
 16c:	dc 01       	movw	r26, r24
 16e:	cb 01       	movw	r24, r22
 170:	8c 0d       	add	r24, r12
 172:	9d 1d       	adc	r25, r13
 174:	ae 1d       	adc	r26, r14
 176:	bf 1d       	adc	r27, r15
 178:	b7 ff       	sbrs	r27, 7
 17a:	03 c0       	rjmp	.+6      	; 0x182 <do_rand+0x72>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	a1 09       	sbc	r26, r1
 180:	b0 48       	sbci	r27, 0x80	; 128
 182:	88 83       	st	Y, r24
 184:	99 83       	std	Y+1, r25	; 0x01
 186:	aa 83       	std	Y+2, r26	; 0x02
 188:	bb 83       	std	Y+3, r27	; 0x03
 18a:	9f 77       	andi	r25, 0x7F	; 127
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	bf 90       	pop	r11
 19a:	af 90       	pop	r10
 19c:	9f 90       	pop	r9
 19e:	8f 90       	pop	r8
 1a0:	08 95       	ret

000001a2 <rand_r>:
 1a2:	0e 94 88 00 	call	0x110	; 0x110 <do_rand>
 1a6:	08 95       	ret

000001a8 <rand>:
 1a8:	80 e6       	ldi	r24, 0x60	; 96
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 88 00 	call	0x110	; 0x110 <do_rand>
 1b0:	08 95       	ret

000001b2 <srand>:
 1b2:	a0 e0       	ldi	r26, 0x00	; 0
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1be:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1c2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1c6:	08 95       	ret

000001c8 <__divmodsi4>:
 1c8:	05 2e       	mov	r0, r21
 1ca:	97 fb       	bst	r25, 7
 1cc:	1e f4       	brtc	.+6      	; 0x1d4 <__divmodsi4+0xc>
 1ce:	00 94       	com	r0
 1d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__negsi2>
 1d4:	57 fd       	sbrc	r21, 7
 1d6:	07 d0       	rcall	.+14     	; 0x1e6 <__divmodsi4_neg2>
 1d8:	0e 94 16 01 	call	0x22c	; 0x22c <__udivmodsi4>
 1dc:	07 fc       	sbrc	r0, 7
 1de:	03 d0       	rcall	.+6      	; 0x1e6 <__divmodsi4_neg2>
 1e0:	4e f4       	brtc	.+18     	; 0x1f4 <__divmodsi4_exit>
 1e2:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__negsi2>

000001e6 <__divmodsi4_neg2>:
 1e6:	50 95       	com	r21
 1e8:	40 95       	com	r20
 1ea:	30 95       	com	r19
 1ec:	21 95       	neg	r18
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	4f 4f       	sbci	r20, 0xFF	; 255
 1f2:	5f 4f       	sbci	r21, 0xFF	; 255

000001f4 <__divmodsi4_exit>:
 1f4:	08 95       	ret

000001f6 <__negsi2>:
 1f6:	90 95       	com	r25
 1f8:	80 95       	com	r24
 1fa:	70 95       	com	r23
 1fc:	61 95       	neg	r22
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255
 200:	8f 4f       	sbci	r24, 0xFF	; 255
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	08 95       	ret

00000206 <__muluhisi3>:
 206:	0e 94 38 01 	call	0x270	; 0x270 <__umulhisi3>
 20a:	a5 9f       	mul	r26, r21
 20c:	90 0d       	add	r25, r0
 20e:	b4 9f       	mul	r27, r20
 210:	90 0d       	add	r25, r0
 212:	a4 9f       	mul	r26, r20
 214:	80 0d       	add	r24, r0
 216:	91 1d       	adc	r25, r1
 218:	11 24       	eor	r1, r1
 21a:	08 95       	ret

0000021c <__mulshisi3>:
 21c:	b7 ff       	sbrs	r27, 7
 21e:	0c 94 03 01 	jmp	0x206	; 0x206 <__muluhisi3>

00000222 <__mulohisi3>:
 222:	0e 94 03 01 	call	0x206	; 0x206 <__muluhisi3>
 226:	82 1b       	sub	r24, r18
 228:	93 0b       	sbc	r25, r19
 22a:	08 95       	ret

0000022c <__udivmodsi4>:
 22c:	a1 e2       	ldi	r26, 0x21	; 33
 22e:	1a 2e       	mov	r1, r26
 230:	aa 1b       	sub	r26, r26
 232:	bb 1b       	sub	r27, r27
 234:	fd 01       	movw	r30, r26
 236:	0d c0       	rjmp	.+26     	; 0x252 <__udivmodsi4_ep>

00000238 <__udivmodsi4_loop>:
 238:	aa 1f       	adc	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	ee 1f       	adc	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	a2 17       	cp	r26, r18
 242:	b3 07       	cpc	r27, r19
 244:	e4 07       	cpc	r30, r20
 246:	f5 07       	cpc	r31, r21
 248:	20 f0       	brcs	.+8      	; 0x252 <__udivmodsi4_ep>
 24a:	a2 1b       	sub	r26, r18
 24c:	b3 0b       	sbc	r27, r19
 24e:	e4 0b       	sbc	r30, r20
 250:	f5 0b       	sbc	r31, r21

00000252 <__udivmodsi4_ep>:
 252:	66 1f       	adc	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	88 1f       	adc	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	1a 94       	dec	r1
 25c:	69 f7       	brne	.-38     	; 0x238 <__udivmodsi4_loop>
 25e:	60 95       	com	r22
 260:	70 95       	com	r23
 262:	80 95       	com	r24
 264:	90 95       	com	r25
 266:	9b 01       	movw	r18, r22
 268:	ac 01       	movw	r20, r24
 26a:	bd 01       	movw	r22, r26
 26c:	cf 01       	movw	r24, r30
 26e:	08 95       	ret

00000270 <__umulhisi3>:
 270:	a2 9f       	mul	r26, r18
 272:	b0 01       	movw	r22, r0
 274:	b3 9f       	mul	r27, r19
 276:	c0 01       	movw	r24, r0
 278:	a3 9f       	mul	r26, r19
 27a:	70 0d       	add	r23, r0
 27c:	81 1d       	adc	r24, r1
 27e:	11 24       	eor	r1, r1
 280:	91 1d       	adc	r25, r1
 282:	b2 9f       	mul	r27, r18
 284:	70 0d       	add	r23, r0
 286:	81 1d       	adc	r24, r1
 288:	11 24       	eor	r1, r1
 28a:	91 1d       	adc	r25, r1
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>

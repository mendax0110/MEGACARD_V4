
ADC_Channel_Switch_012.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000706  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005fb  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f3  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001631  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000016c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initPorts>:

volatile uint8_t adc_value = 0;

void initPorts()
{
	DDRC &= ~(1 << PA5);
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	8f 7d       	andi	r24, 0xDF	; 223
  80:	84 bb       	out	0x14, r24	; 20
	PORTA &= ~(1 << PA5);
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	8f 7d       	andi	r24, 0xDF	; 223
  86:	8b bb       	out	0x1b, r24	; 27
	
	DDRC |= 0xFF;
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	84 bb       	out	0x14, r24	; 20
  8e:	08 95       	ret

00000090 <initADC>:
}

void initADC()
{
	ADCSRA |= (1 << ADEN);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	80 68       	ori	r24, 0x80	; 128
  94:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADATE);
  96:	86 b1       	in	r24, 0x06	; 6
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2); 
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	87 60       	ori	r24, 0x07	; 7
  a0:	86 b9       	out	0x06, r24	; 6
	
	SFIOR &= ~(1 << ADTS0)&~(1 << ADTS1)&~(1 << ADTS2);
  a2:	80 b7       	in	r24, 0x30	; 48
  a4:	8f 71       	andi	r24, 0x1F	; 31
  a6:	80 bf       	out	0x30, r24	; 48
	
	ADMUX |= (1 << REFS0);
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << ADLAR);
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	08 95       	ret

000000b6 <main>:
}

int main(void)
{
    initPorts();
  b6:	0e 94 3e 00 	call	0x7c	; 0x7c <initPorts>
	initADC();
  ba:	0e 94 48 00 	call	0x90	; 0x90 <initADC>

	ADCSRA |= (1 << ADSC);
  be:	86 b1       	in	r24, 0x06	; 6
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	86 b9       	out	0x06, r24	; 6
	
    while (1) 
    {
		ADMUX &= ~(1 << MUX0)&~(1 << MUX1)&~(1 << MUX2)&~(1 << MUX3)&~(1 << MUX4); // channel selection 0
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	80 7e       	andi	r24, 0xE0	; 224
  c8:	87 b9       	out	0x07, r24	; 7
		while(!(ADCSRA & (1 << ADIF))) {}// wait till conversation finished
  ca:	34 9b       	sbis	0x06, 4	; 6
  cc:	fe cf       	rjmp	.-4      	; 0xca <main+0x14>
		adc_value = ADCH;
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC = adc_value;
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	8e e9       	ldi	r24, 0x9E	; 158
  de:	94 e2       	ldi	r25, 0x24	; 36
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x2a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x34>
  ea:	00 00       	nop
		_delay_ms(1000);
		
		ADMUX |= (1 << MUX0); // channel selection 1
  ec:	87 b1       	in	r24, 0x07	; 7
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	87 b9       	out	0x07, r24	; 7
		while(!(ADCSRA & (1 << ADIF))){} // wait till conversation finished
  f2:	34 9b       	sbis	0x06, 4	; 6
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x3c>
		adc_value = ADCH;
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC = adc_value;
  fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 100:	85 bb       	out	0x15, r24	; 21
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	8e e9       	ldi	r24, 0x9E	; 158
 106:	94 e2       	ldi	r25, 0x24	; 36
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x52>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x5c>
 112:	00 00       	nop
		_delay_ms(1000);
		
		ADMUX |= (1 << MUX2); // channel selection 5  (would normally be channel 2 -> but to control via poti we use channel 5)
 114:	87 b1       	in	r24, 0x07	; 7
 116:	84 60       	ori	r24, 0x04	; 4
 118:	87 b9       	out	0x07, r24	; 7
		while(!(ADCSRA & (1 << ADIF))) {} // wait till conversation finished
 11a:	34 9b       	sbis	0x06, 4	; 6
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x64>
		adc_value = ADCH;
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC = adc_value;
 124:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 128:	85 bb       	out	0x15, r24	; 21
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	8e e9       	ldi	r24, 0x9E	; 158
 12e:	94 e2       	ldi	r25, 0x24	; 36
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x7a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x84>
 13a:	00 00       	nop
 13c:	c3 cf       	rjmp	.-122    	; 0xc4 <main+0xe>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>

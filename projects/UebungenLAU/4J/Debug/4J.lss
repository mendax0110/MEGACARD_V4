
4J.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000677  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  0000081b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038d  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009c  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 39 00 	call	0x72	; 0x72 <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initPorts>:
#include <avr/portpins.h>
#include <util/delay.h>

void initPorts()
{
	DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
  70:	08 95       	ret

00000072 <main>:
}

int main(void)
{
	initPorts();
  72:	0e 94 36 00 	call	0x6c	; 0x6c <initPorts>
	uint8_t pattern = 0x01;
	uint8_t direction = 1;
  76:	91 e0       	ldi	r25, 0x01	; 1
}

int main(void)
{
	initPorts();
	uint8_t pattern = 0x01;
  78:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t direction = 1;

	while (1)
	{
		if (direction)
  7a:	99 23       	and	r25, r25
  7c:	19 f0       	breq	.+6      	; 0x84 <main+0x12>
		{
			// move the LED pattern forward
			pattern <<= 1;
  7e:	88 0f       	add	r24, r24

			if (pattern == 0x00)
  80:	21 f0       	breq	.+8      	; 0x8a <main+0x18>
  82:	06 c0       	rjmp	.+12     	; 0x90 <main+0x1e>
			pattern = 0x01;
		}
		else
		{
			// move the LED pattern backward
			pattern >>= 1;
  84:	86 95       	lsr	r24

			if (pattern == 0x00)
  86:	19 f0       	breq	.+6      	; 0x8e <main+0x1c>
  88:	03 c0       	rjmp	.+6      	; 0x90 <main+0x1e>
		{
			// move the LED pattern forward
			pattern <<= 1;

			if (pattern == 0x00)
			pattern = 0x01;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <main+0x1e>
		{
			// move the LED pattern backward
			pattern >>= 1;

			if (pattern == 0x00)
			pattern = 0x80;
  8e:	80 e8       	ldi	r24, 0x80	; 128
		}

		// show the LED pattern
		PORTC = pattern;
  90:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f e3       	ldi	r18, 0x3F	; 63
  94:	34 e1       	ldi	r19, 0x14	; 20
  96:	46 e0       	ldi	r20, 0x06	; 6
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	40 40       	sbci	r20, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x26>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x30>
  a2:	00 00       	nop
		_delay_ms(166); // Wait for 166 ms 3Hz

		// if pattern reaches end, change direction
		if (pattern == 0x01 || pattern == 0x80)
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	11 f0       	breq	.+4      	; 0xac <main+0x3a>
  a8:	80 38       	cpi	r24, 0x80	; 128
  aa:	39 f7       	brne	.-50     	; 0x7a <main+0x8>
		{
			direction = !direction; // Toggle direction
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	91 11       	cpse	r25, r1
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	92 2f       	mov	r25, r18
  b4:	e2 cf       	rjmp	.-60     	; 0x7a <main+0x8>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>


4M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000009ea  00000a7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800072  00800072  00000a90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ac0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153d  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098e  00000000  00000000  00002131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa1  00000000  00000000  00002abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00003560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dc  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016b1  00000000  00000000  00003d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000542d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  8a:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <initPorts>:
volatile uint8_t running = 0;     // Laufende Stoppuhr


void initPorts()
{
	DDRA = 0x00; // button as input
 1c6:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // set Pull-Up resistors
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	08 95       	ret

000001ce <updateDisplay>:
}

void updateDisplay()
{
	printf("%02d:%02d.%02d\r\n", seconds / 60, seconds % 60, hundredths);
 1ce:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <hundredths>
 1d2:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <hundredths+0x1>
 1d6:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <seconds>
 1da:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <seconds>
 1de:	3f 93       	push	r19
 1e0:	2f 93       	push	r18
 1e2:	39 e8       	ldi	r19, 0x89	; 137
 1e4:	93 9f       	mul	r25, r19
 1e6:	21 2d       	mov	r18, r1
 1e8:	11 24       	eor	r1, r1
 1ea:	22 95       	swap	r18
 1ec:	26 95       	lsr	r18
 1ee:	27 70       	andi	r18, 0x07	; 7
 1f0:	4c e3       	ldi	r20, 0x3C	; 60
 1f2:	24 9f       	mul	r18, r20
 1f4:	90 19       	sub	r25, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	1f 92       	push	r1
 1fa:	9f 93       	push	r25
 1fc:	83 9f       	mul	r24, r19
 1fe:	81 2d       	mov	r24, r1
 200:	11 24       	eor	r1, r1
 202:	82 95       	swap	r24
 204:	86 95       	lsr	r24
 206:	87 70       	andi	r24, 0x07	; 7
 208:	1f 92       	push	r1
 20a:	8f 93       	push	r24
 20c:	80 e6       	ldi	r24, 0x60	; 96
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	9f 93       	push	r25
 212:	8f 93       	push	r24
 214:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <tfp_printf>
}
 218:	8d b7       	in	r24, 0x3d	; 61
 21a:	9e b7       	in	r25, 0x3e	; 62
 21c:	08 96       	adiw	r24, 0x08	; 8
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	9e bf       	out	0x3e, r25	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	8d bf       	out	0x3d, r24	; 61
 228:	08 95       	ret

0000022a <startStopwatch>:

void startStopwatch()
{
	running = 1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
	hundredths = 0;
 230:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <hundredths+0x1>
 234:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <hundredths>
	seconds = 0;
 238:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <seconds>
	updateDisplay();
 23c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <updateDisplay>
 240:	08 95       	ret

00000242 <stopStopwatch>:
}

void stopStopwatch()
{
	running = 0;
 242:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 246:	08 95       	ret

00000248 <resetStopwatch>:
}

void resetStopwatch()
{
	running = 0;
 248:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
	hundredths = 0;
 24c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <hundredths+0x1>
 250:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <hundredths>
	seconds = 0;
 254:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <seconds>
	updateDisplay();
 258:	0e 94 e7 00 	call	0x1ce	; 0x1ce <updateDisplay>
 25c:	08 95       	ret

0000025e <main>:
}

int main(void)
{
	initPorts();
 25e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <initPorts>
	lcd_init();
 262:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	
	while (1)
	{
		if (!(PINA & (1 << PA0))) // S0: Start
 266:	c8 99       	sbic	0x19, 0	; 25
 268:	07 c0       	rjmp	.+14     	; 0x278 <main+0x1a>
		{
			if (!running)
 26a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 26e:	81 11       	cpse	r24, r1
 270:	1c c0       	rjmp	.+56     	; 0x2aa <main+0x4c>
			{
				startStopwatch();
 272:	0e 94 15 01 	call	0x22a	; 0x22a <startStopwatch>
 276:	19 c0       	rjmp	.+50     	; 0x2aa <main+0x4c>
			}
		}
		else if (!(PINA & (1 << PA1))) // S1: Stop
 278:	c9 99       	sbic	0x19, 1	; 25
 27a:	07 c0       	rjmp	.+14     	; 0x28a <main+0x2c>
		{
			if (running)
 27c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 280:	88 23       	and	r24, r24
 282:	99 f0       	breq	.+38     	; 0x2aa <main+0x4c>
			{
				stopStopwatch();
 284:	0e 94 21 01 	call	0x242	; 0x242 <stopStopwatch>
 288:	10 c0       	rjmp	.+32     	; 0x2aa <main+0x4c>
			}
		}
		else if (!(PINA & (1 << PA2))) // S2: Reset
 28a:	ca 99       	sbic	0x19, 2	; 25
 28c:	03 c0       	rjmp	.+6      	; 0x294 <main+0x36>
		{
			resetStopwatch();
 28e:	0e 94 24 01 	call	0x248	; 0x248 <resetStopwatch>
 292:	0b c0       	rjmp	.+22     	; 0x2aa <main+0x4c>
		}
		else if (!(PINA & (1 << PA3))) // S3: Start/Stop
 294:	cb 99       	sbic	0x19, 3	; 25
 296:	09 c0       	rjmp	.+18     	; 0x2aa <main+0x4c>
		{
			if (running)
 298:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 29c:	88 23       	and	r24, r24
 29e:	19 f0       	breq	.+6      	; 0x2a6 <main+0x48>
			{
				stopStopwatch();
 2a0:	0e 94 21 01 	call	0x242	; 0x242 <stopStopwatch>
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <main+0x4c>
			}
			else
			{
				startStopwatch();
 2a6:	0e 94 15 01 	call	0x22a	; 0x22a <startStopwatch>
			}
		}
		
		if (running)
 2aa:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 2ae:	88 23       	and	r24, r24
 2b0:	d1 f2       	breq	.-76     	; 0x266 <main+0x8>
 2b2:	8f e2       	ldi	r24, 0x2F	; 47
 2b4:	95 e7       	ldi	r25, 0x75	; 117
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x58>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x5e>
 2bc:	00 00       	nop
		{
			_delay_ms(10); // delay of 10 Millisec for the hundredths-Sec
			hundredths++;
 2be:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <hundredths>
 2c2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <hundredths+0x1>
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <hundredths+0x1>
 2cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <hundredths>
			
			if (hundredths >= 100)
 2d0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <hundredths>
 2d4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <hundredths+0x1>
 2d8:	84 36       	cpi	r24, 0x64	; 100
 2da:	91 05       	cpc	r25, r1
 2dc:	48 f0       	brcs	.+18     	; 0x2f0 <main+0x92>
			{
				hundredths = 0;
 2de:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <hundredths+0x1>
 2e2:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <hundredths>
				seconds++;
 2e6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <seconds>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <seconds>
			}
			
			updateDisplay();
 2f0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <updateDisplay>
 2f4:	b8 cf       	rjmp	.-144    	; 0x266 <main+0x8>

000002f6 <uli2a>:
	va_end(va);
}

static void putcp(void* p,char c)
{
	*(*((char**)p))++ = c;
 2f6:	2f 92       	push	r2
 2f8:	3f 92       	push	r3
 2fa:	4f 92       	push	r4
 2fc:	5f 92       	push	r5
 2fe:	6f 92       	push	r6
 300:	7f 92       	push	r7
 302:	8f 92       	push	r8
 304:	9f 92       	push	r9
 306:	af 92       	push	r10
 308:	bf 92       	push	r11
 30a:	cf 92       	push	r12
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	00 d0       	rcall	.+0      	; 0x31c <uli2a+0x26>
 31c:	00 d0       	rcall	.+0      	; 0x31e <uli2a+0x28>
 31e:	1f 92       	push	r1
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	6c 83       	std	Y+4, r22	; 0x04
 326:	7d 83       	std	Y+5, r23	; 0x05
 328:	98 2e       	mov	r9, r24
 32a:	89 2e       	mov	r8, r25
 32c:	5a 01       	movw	r10, r20
 32e:	3b 83       	std	Y+3, r19	; 0x03
 330:	2a 83       	std	Y+2, r18	; 0x02
 332:	c1 2c       	mov	r12, r1
 334:	d1 2c       	mov	r13, r1
 336:	76 01       	movw	r14, r12
 338:	c3 94       	inc	r12
 33a:	08 c0       	rjmp	.+16     	; 0x34c <uli2a+0x56>
 33c:	a7 01       	movw	r20, r14
 33e:	96 01       	movw	r18, r12
 340:	c3 01       	movw	r24, r6
 342:	b2 01       	movw	r22, r4
 344:	0e 94 93 04 	call	0x926	; 0x926 <__mulsi3>
 348:	6b 01       	movw	r12, r22
 34a:	7c 01       	movw	r14, r24
 34c:	6c 81       	ldd	r22, Y+4	; 0x04
 34e:	7d 81       	ldd	r23, Y+5	; 0x05
 350:	89 2d       	mov	r24, r9
 352:	98 2d       	mov	r25, r8
 354:	a7 01       	movw	r20, r14
 356:	96 01       	movw	r18, r12
 358:	0e 94 b7 04 	call	0x96e	; 0x96e <__udivmodsi4>
 35c:	25 01       	movw	r4, r10
 35e:	61 2c       	mov	r6, r1
 360:	71 2c       	mov	r7, r1
 362:	24 15       	cp	r18, r4
 364:	35 05       	cpc	r19, r5
 366:	46 05       	cpc	r20, r6
 368:	57 05       	cpc	r21, r7
 36a:	40 f7       	brcc	.-48     	; 0x33c <uli2a+0x46>
 36c:	a1 2c       	mov	r10, r1
 36e:	b1 2c       	mov	r11, r1
 370:	39 c0       	rjmp	.+114    	; 0x3e4 <uli2a+0xee>
 372:	6c 81       	ldd	r22, Y+4	; 0x04
 374:	7d 81       	ldd	r23, Y+5	; 0x05
 376:	89 2d       	mov	r24, r9
 378:	98 2d       	mov	r25, r8
 37a:	a7 01       	movw	r20, r14
 37c:	96 01       	movw	r18, r12
 37e:	0e 94 b7 04 	call	0x96e	; 0x96e <__udivmodsi4>
 382:	29 83       	std	Y+1, r18	; 0x01
 384:	42 2f       	mov	r20, r18
 386:	24 2e       	mov	r2, r20
 388:	33 2e       	mov	r3, r19
 38a:	6c 83       	std	Y+4, r22	; 0x04
 38c:	7d 83       	std	Y+5, r23	; 0x05
 38e:	98 2e       	mov	r9, r24
 390:	89 2e       	mov	r8, r25
 392:	c7 01       	movw	r24, r14
 394:	b6 01       	movw	r22, r12
 396:	a3 01       	movw	r20, r6
 398:	92 01       	movw	r18, r4
 39a:	0e 94 b7 04 	call	0x96e	; 0x96e <__udivmodsi4>
 39e:	69 01       	movw	r12, r18
 3a0:	7a 01       	movw	r14, r20
 3a2:	a1 14       	cp	r10, r1
 3a4:	b1 04       	cpc	r11, r1
 3a6:	39 f4       	brne	.+14     	; 0x3b6 <uli2a+0xc0>
 3a8:	12 14       	cp	r1, r2
 3aa:	13 04       	cpc	r1, r3
 3ac:	24 f0       	brlt	.+8      	; 0x3b6 <uli2a+0xc0>
 3ae:	23 2b       	or	r18, r19
 3b0:	24 2b       	or	r18, r20
 3b2:	25 2b       	or	r18, r21
 3b4:	b9 f4       	brne	.+46     	; 0x3e4 <uli2a+0xee>
 3b6:	c8 01       	movw	r24, r16
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	2a e0       	ldi	r18, 0x0A	; 10
 3bc:	22 16       	cp	r2, r18
 3be:	31 04       	cpc	r3, r1
 3c0:	34 f0       	brlt	.+12     	; 0x3ce <uli2a+0xd8>
 3c2:	ea 81       	ldd	r30, Y+2	; 0x02
 3c4:	fb 81       	ldd	r31, Y+3	; 0x03
 3c6:	ef 2b       	or	r30, r31
 3c8:	21 f0       	breq	.+8      	; 0x3d2 <uli2a+0xdc>
 3ca:	27 e3       	ldi	r18, 0x37	; 55
 3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <uli2a+0xde>
 3ce:	20 e3       	ldi	r18, 0x30	; 48
 3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <uli2a+0xde>
 3d2:	27 e5       	ldi	r18, 0x57	; 87
 3d4:	39 80       	ldd	r3, Y+1	; 0x01
 3d6:	32 0e       	add	r3, r18
 3d8:	f8 01       	movw	r30, r16
 3da:	30 82       	st	Z, r3
 3dc:	ff ef       	ldi	r31, 0xFF	; 255
 3de:	af 1a       	sub	r10, r31
 3e0:	bf 0a       	sbc	r11, r31
 3e2:	8c 01       	movw	r16, r24
 3e4:	c1 14       	cp	r12, r1
 3e6:	d1 04       	cpc	r13, r1
 3e8:	e1 04       	cpc	r14, r1
 3ea:	f1 04       	cpc	r15, r1
 3ec:	11 f6       	brne	.-124    	; 0x372 <uli2a+0x7c>
 3ee:	f8 01       	movw	r30, r16
 3f0:	10 82       	st	Z, r1
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	df 90       	pop	r13
 40a:	cf 90       	pop	r12
 40c:	bf 90       	pop	r11
 40e:	af 90       	pop	r10
 410:	9f 90       	pop	r9
 412:	8f 90       	pop	r8
 414:	7f 90       	pop	r7
 416:	6f 90       	pop	r6
 418:	5f 90       	pop	r5
 41a:	4f 90       	pop	r4
 41c:	3f 90       	pop	r3
 41e:	2f 90       	pop	r2
 420:	08 95       	ret

00000422 <li2a>:
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	99 23       	and	r25, r25
 428:	64 f4       	brge	.+24     	; 0x442 <li2a+0x20>
 42a:	90 95       	com	r25
 42c:	80 95       	com	r24
 42e:	70 95       	com	r23
 430:	61 95       	neg	r22
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	2d e2       	ldi	r18, 0x2D	; 45
 43a:	fa 01       	movw	r30, r20
 43c:	20 83       	st	Z, r18
 43e:	4f 5f       	subi	r20, 0xFF	; 255
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	8a 01       	movw	r16, r20
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	4a e0       	ldi	r20, 0x0A	; 10
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <uli2a>
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <ui2a>:
 456:	8f 92       	push	r8
 458:	9f 92       	push	r9
 45a:	af 92       	push	r10
 45c:	bf 92       	push	r11
 45e:	cf 92       	push	r12
 460:	df 92       	push	r13
 462:	ef 92       	push	r14
 464:	ff 92       	push	r15
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	c8 2f       	mov	r28, r24
 470:	d9 2f       	mov	r29, r25
 472:	8b 01       	movw	r16, r22
 474:	6a 01       	movw	r12, r20
 476:	79 01       	movw	r14, r18
 478:	e1 e0       	ldi	r30, 0x01	; 1
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	08 c0       	rjmp	.+16     	; 0x48e <__stack+0x2f>
 47e:	cf 01       	movw	r24, r30
 480:	80 9f       	mul	r24, r16
 482:	f0 01       	movw	r30, r0
 484:	81 9f       	mul	r24, r17
 486:	f0 0d       	add	r31, r0
 488:	90 9f       	mul	r25, r16
 48a:	f0 0d       	add	r31, r0
 48c:	11 24       	eor	r1, r1
 48e:	8c 2f       	mov	r24, r28
 490:	9d 2f       	mov	r25, r29
 492:	bf 01       	movw	r22, r30
 494:	0e 94 a3 04 	call	0x946	; 0x946 <__udivmodhi4>
 498:	60 17       	cp	r22, r16
 49a:	71 07       	cpc	r23, r17
 49c:	80 f7       	brcc	.-32     	; 0x47e <__stack+0x1f>
 49e:	a1 2c       	mov	r10, r1
 4a0:	b1 2c       	mov	r11, r1
 4a2:	2c c0       	rjmp	.+88     	; 0x4fc <__stack+0x9d>
 4a4:	8c 2f       	mov	r24, r28
 4a6:	9d 2f       	mov	r25, r29
 4a8:	bf 01       	movw	r22, r30
 4aa:	0e 94 a3 04 	call	0x946	; 0x946 <__udivmodhi4>
 4ae:	36 2f       	mov	r19, r22
 4b0:	86 2e       	mov	r8, r22
 4b2:	97 2e       	mov	r9, r23
 4b4:	c8 2f       	mov	r28, r24
 4b6:	d9 2f       	mov	r29, r25
 4b8:	cf 01       	movw	r24, r30
 4ba:	b8 01       	movw	r22, r16
 4bc:	0e 94 a3 04 	call	0x946	; 0x946 <__udivmodhi4>
 4c0:	fb 01       	movw	r30, r22
 4c2:	a1 14       	cp	r10, r1
 4c4:	b1 04       	cpc	r11, r1
 4c6:	29 f4       	brne	.+10     	; 0x4d2 <__stack+0x73>
 4c8:	18 14       	cp	r1, r8
 4ca:	19 04       	cpc	r1, r9
 4cc:	14 f0       	brlt	.+4      	; 0x4d2 <__stack+0x73>
 4ce:	30 97       	sbiw	r30, 0x00	; 0
 4d0:	a9 f4       	brne	.+42     	; 0x4fc <__stack+0x9d>
 4d2:	c7 01       	movw	r24, r14
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	aa e0       	ldi	r26, 0x0A	; 10
 4d8:	8a 16       	cp	r8, r26
 4da:	91 04       	cpc	r9, r1
 4dc:	2c f0       	brlt	.+10     	; 0x4e8 <__stack+0x89>
 4de:	c1 14       	cp	r12, r1
 4e0:	d1 04       	cpc	r13, r1
 4e2:	21 f0       	breq	.+8      	; 0x4ec <__stack+0x8d>
 4e4:	27 e3       	ldi	r18, 0x37	; 55
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <__stack+0x8f>
 4e8:	20 e3       	ldi	r18, 0x30	; 48
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <__stack+0x8f>
 4ec:	27 e5       	ldi	r18, 0x57	; 87
 4ee:	32 0f       	add	r19, r18
 4f0:	d7 01       	movw	r26, r14
 4f2:	3c 93       	st	X, r19
 4f4:	bf ef       	ldi	r27, 0xFF	; 255
 4f6:	ab 1a       	sub	r10, r27
 4f8:	bb 0a       	sbc	r11, r27
 4fa:	7c 01       	movw	r14, r24
 4fc:	30 97       	sbiw	r30, 0x00	; 0
 4fe:	91 f6       	brne	.-92     	; 0x4a4 <__stack+0x45>
 500:	f7 01       	movw	r30, r14
 502:	10 82       	st	Z, r1
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	ff 90       	pop	r15
 50e:	ef 90       	pop	r14
 510:	df 90       	pop	r13
 512:	cf 90       	pop	r12
 514:	bf 90       	pop	r11
 516:	af 90       	pop	r10
 518:	9f 90       	pop	r9
 51a:	8f 90       	pop	r8
 51c:	08 95       	ret

0000051e <i2a>:
 51e:	9b 01       	movw	r18, r22
 520:	99 23       	and	r25, r25
 522:	44 f4       	brge	.+16     	; 0x534 <i2a+0x16>
 524:	91 95       	neg	r25
 526:	81 95       	neg	r24
 528:	91 09       	sbc	r25, r1
 52a:	4d e2       	ldi	r20, 0x2D	; 45
 52c:	fb 01       	movw	r30, r22
 52e:	40 83       	st	Z, r20
 530:	2f 5f       	subi	r18, 0xFF	; 255
 532:	3f 4f       	sbci	r19, 0xFF	; 255
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	6a e0       	ldi	r22, 0x0A	; 10
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	0e 94 2b 02 	call	0x456	; 0x456 <ui2a>
 540:	08 95       	ret

00000542 <a2d>:
 542:	90 ed       	ldi	r25, 0xD0	; 208
 544:	98 0f       	add	r25, r24
 546:	9a 30       	cpi	r25, 0x0A	; 10
 548:	18 f4       	brcc	.+6      	; 0x550 <a2d+0xe>
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	c0 97       	sbiw	r24, 0x30	; 48
 54e:	08 95       	ret
 550:	9f e9       	ldi	r25, 0x9F	; 159
 552:	98 0f       	add	r25, r24
 554:	96 30       	cpi	r25, 0x06	; 6
 556:	20 f4       	brcc	.+8      	; 0x560 <a2d+0x1e>
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	87 55       	subi	r24, 0x57	; 87
 55c:	91 09       	sbc	r25, r1
 55e:	08 95       	ret
 560:	9f eb       	ldi	r25, 0xBF	; 191
 562:	98 0f       	add	r25, r24
 564:	96 30       	cpi	r25, 0x06	; 6
 566:	18 f4       	brcc	.+6      	; 0x56e <a2d+0x2c>
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	c7 97       	sbiw	r24, 0x37	; 55
 56c:	08 95       	ret
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	9f ef       	ldi	r25, 0xFF	; 255
 572:	08 95       	ret

00000574 <a2i>:
 574:	9f 92       	push	r9
 576:	af 92       	push	r10
 578:	bf 92       	push	r11
 57a:	cf 92       	push	r12
 57c:	df 92       	push	r13
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	98 2e       	mov	r9, r24
 58c:	5b 01       	movw	r10, r22
 58e:	7a 01       	movw	r14, r20
 590:	69 01       	movw	r12, r18
 592:	fb 01       	movw	r30, r22
 594:	c0 81       	ld	r28, Z
 596:	d1 81       	ldd	r29, Z+1	; 0x01
 598:	00 e0       	ldi	r16, 0x00	; 0
 59a:	10 e0       	ldi	r17, 0x00	; 0
 59c:	0f c0       	rjmp	.+30     	; 0x5bc <a2i+0x48>
 59e:	e8 16       	cp	r14, r24
 5a0:	f9 06       	cpc	r15, r25
 5a2:	8c f0       	brlt	.+34     	; 0x5c6 <a2i+0x52>
 5a4:	0e 9d       	mul	r16, r14
 5a6:	90 01       	movw	r18, r0
 5a8:	0f 9d       	mul	r16, r15
 5aa:	30 0d       	add	r19, r0
 5ac:	1e 9d       	mul	r17, r14
 5ae:	30 0d       	add	r19, r0
 5b0:	11 24       	eor	r1, r1
 5b2:	8c 01       	movw	r16, r24
 5b4:	02 0f       	add	r16, r18
 5b6:	13 1f       	adc	r17, r19
 5b8:	98 80       	ld	r9, Y
 5ba:	21 96       	adiw	r28, 0x01	; 1
 5bc:	89 2d       	mov	r24, r9
 5be:	0e 94 a1 02 	call	0x542	; 0x542 <a2d>
 5c2:	99 23       	and	r25, r25
 5c4:	64 f7       	brge	.-40     	; 0x59e <a2i+0x2a>
 5c6:	f5 01       	movw	r30, r10
 5c8:	d1 83       	std	Z+1, r29	; 0x01
 5ca:	c0 83       	st	Z, r28
 5cc:	f6 01       	movw	r30, r12
 5ce:	11 83       	std	Z+1, r17	; 0x01
 5d0:	00 83       	st	Z, r16
 5d2:	89 2d       	mov	r24, r9
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	ff 90       	pop	r15
 5de:	ef 90       	pop	r14
 5e0:	df 90       	pop	r13
 5e2:	cf 90       	pop	r12
 5e4:	bf 90       	pop	r11
 5e6:	af 90       	pop	r10
 5e8:	9f 90       	pop	r9
 5ea:	08 95       	ret

000005ec <putchw>:
 5ec:	bf 92       	push	r11
 5ee:	cf 92       	push	r12
 5f0:	df 92       	push	r13
 5f2:	ef 92       	push	r14
 5f4:	ff 92       	push	r15
 5f6:	0f 93       	push	r16
 5f8:	1f 93       	push	r17
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	6c 01       	movw	r12, r24
 600:	7b 01       	movw	r14, r22
 602:	e8 01       	movw	r28, r16
 604:	22 23       	and	r18, r18
 606:	29 f0       	breq	.+10     	; 0x612 <putchw+0x26>
 608:	0f 2e       	mov	r0, r31
 60a:	f0 e3       	ldi	r31, 0x30	; 48
 60c:	bf 2e       	mov	r11, r31
 60e:	f0 2d       	mov	r31, r0
 610:	03 c0       	rjmp	.+6      	; 0x618 <putchw+0x2c>
 612:	68 94       	set
 614:	bb 24       	eor	r11, r11
 616:	b5 f8       	bld	r11, 5
 618:	fe 01       	movw	r30, r28
 61a:	03 c0       	rjmp	.+6      	; 0x622 <putchw+0x36>
 61c:	41 50       	subi	r20, 0x01	; 1
 61e:	51 09       	sbc	r21, r1
 620:	f9 01       	movw	r30, r18
 622:	9f 01       	movw	r18, r30
 624:	2f 5f       	subi	r18, 0xFF	; 255
 626:	3f 4f       	sbci	r19, 0xFF	; 255
 628:	80 81       	ld	r24, Z
 62a:	88 23       	and	r24, r24
 62c:	49 f0       	breq	.+18     	; 0x640 <putchw+0x54>
 62e:	14 16       	cp	r1, r20
 630:	15 06       	cpc	r1, r21
 632:	a4 f3       	brlt	.-24     	; 0x61c <putchw+0x30>
 634:	05 c0       	rjmp	.+10     	; 0x640 <putchw+0x54>
 636:	6b 2d       	mov	r22, r11
 638:	c6 01       	movw	r24, r12
 63a:	f7 01       	movw	r30, r14
 63c:	09 95       	icall
 63e:	a8 01       	movw	r20, r16
 640:	8a 01       	movw	r16, r20
 642:	01 50       	subi	r16, 0x01	; 1
 644:	11 09       	sbc	r17, r1
 646:	14 16       	cp	r1, r20
 648:	15 06       	cpc	r1, r21
 64a:	ac f3       	brlt	.-22     	; 0x636 <putchw+0x4a>
 64c:	04 c0       	rjmp	.+8      	; 0x656 <putchw+0x6a>
 64e:	c6 01       	movw	r24, r12
 650:	f7 01       	movw	r30, r14
 652:	09 95       	icall
 654:	e8 01       	movw	r28, r16
 656:	8e 01       	movw	r16, r28
 658:	0f 5f       	subi	r16, 0xFF	; 255
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	68 81       	ld	r22, Y
 65e:	61 11       	cpse	r22, r1
 660:	f6 cf       	rjmp	.-20     	; 0x64e <putchw+0x62>
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	ff 90       	pop	r15
 66c:	ef 90       	pop	r14
 66e:	df 90       	pop	r13
 670:	cf 90       	pop	r12
 672:	bf 90       	pop	r11
 674:	08 95       	ret

00000676 <tfp_format>:
	while ((ch= *bf++))
	putf(putp,ch);
}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
{
 676:	7f 92       	push	r7
 678:	8f 92       	push	r8
 67a:	9f 92       	push	r9
 67c:	af 92       	push	r10
 67e:	bf 92       	push	r11
 680:	cf 92       	push	r12
 682:	df 92       	push	r13
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	cd b7       	in	r28, 0x3d	; 61
 692:	de b7       	in	r29, 0x3e	; 62
 694:	60 97       	sbiw	r28, 0x10	; 16
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	f8 94       	cli
 69a:	de bf       	out	0x3e, r29	; 62
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	cd bf       	out	0x3d, r28	; 61
 6a0:	5c 01       	movw	r10, r24
 6a2:	6b 01       	movw	r12, r22
 6a4:	58 8b       	std	Y+16, r21	; 0x10
 6a6:	4f 87       	std	Y+15, r20	; 0x0f
 6a8:	79 01       	movw	r14, r18
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 6aa:	ff c0       	rjmp	.+510    	; 0x8aa <tfp_format+0x234>
		if (ch!='%')
 6ac:	65 32       	cpi	r22, 0x25	; 37
 6ae:	21 f0       	breq	.+8      	; 0x6b8 <tfp_format+0x42>
		putf(putp,ch);
 6b0:	c5 01       	movw	r24, r10
 6b2:	f6 01       	movw	r30, r12
 6b4:	09 95       	icall
 6b6:	f9 c0       	rjmp	.+498    	; 0x8aa <tfp_format+0x234>
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
			#endif
			int w=0;
 6b8:	1e 86       	std	Y+14, r1	; 0x0e
 6ba:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 6bc:	9d 01       	movw	r18, r26
 6be:	2f 5f       	subi	r18, 0xFF	; 255
 6c0:	3f 4f       	sbci	r19, 0xFF	; 255
 6c2:	38 8b       	std	Y+16, r19	; 0x10
 6c4:	2f 87       	std	Y+15, r18	; 0x0f
 6c6:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 6c8:	80 33       	cpi	r24, 0x30	; 48
 6ca:	49 f4       	brne	.+18     	; 0x6de <tfp_format+0x68>
				ch=*(fmt++);
 6cc:	2f 5f       	subi	r18, 0xFF	; 255
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	38 8b       	std	Y+16, r19	; 0x10
 6d2:	2f 87       	std	Y+15, r18	; 0x0f
 6d4:	11 96       	adiw	r26, 0x01	; 1
 6d6:	8c 91       	ld	r24, X
				lz=1;
 6d8:	77 24       	eor	r7, r7
 6da:	73 94       	inc	r7
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <tfp_format+0x6a>

	while ((ch=*(fmt++))) {
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
 6de:	71 2c       	mov	r7, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
			}
			if (ch>='0' && ch<='9') {
 6e0:	90 ed       	ldi	r25, 0xD0	; 208
 6e2:	98 0f       	add	r25, r24
 6e4:	9a 30       	cpi	r25, 0x0A	; 10
 6e6:	50 f4       	brcc	.+20     	; 0x6fc <tfp_format+0x86>
				ch=a2i(ch,&fmt,10,&w);
 6e8:	9e 01       	movw	r18, r28
 6ea:	23 5f       	subi	r18, 0xF3	; 243
 6ec:	3f 4f       	sbci	r19, 0xFF	; 255
 6ee:	4a e0       	ldi	r20, 0x0A	; 10
 6f0:	50 e0       	ldi	r21, 0x00	; 0
 6f2:	be 01       	movw	r22, r28
 6f4:	61 5f       	subi	r22, 0xF1	; 241
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	0e 94 ba 02 	call	0x574	; 0x574 <a2i>
			}
			#ifdef 	PRINTF_LONG_SUPPORT
			if (ch=='l') {
 6fc:	8c 36       	cpi	r24, 0x6C	; 108
 6fe:	49 f4       	brne	.+18     	; 0x712 <tfp_format+0x9c>
				ch=*(fmt++);
 700:	ef 85       	ldd	r30, Y+15	; 0x0f
 702:	f8 89       	ldd	r31, Y+16	; 0x10
 704:	cf 01       	movw	r24, r30
 706:	01 96       	adiw	r24, 0x01	; 1
 708:	98 8b       	std	Y+16, r25	; 0x10
 70a:	8f 87       	std	Y+15, r24	; 0x0f
 70c:	80 81       	ld	r24, Z
				lng=1;
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	01 c0       	rjmp	.+2      	; 0x714 <tfp_format+0x9e>
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
 712:	90 e0       	ldi	r25, 0x00	; 0
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
			#endif
			switch (ch) {
 714:	83 36       	cpi	r24, 0x63	; 99
 716:	09 f4       	brne	.+2      	; 0x71a <tfp_format+0xa4>
 718:	aa c0       	rjmp	.+340    	; 0x86e <tfp_format+0x1f8>
 71a:	50 f4       	brcc	.+20     	; 0x730 <tfp_format+0xba>
 71c:	85 32       	cpi	r24, 0x25	; 37
 71e:	09 f4       	brne	.+2      	; 0x722 <tfp_format+0xac>
 720:	c0 c0       	rjmp	.+384    	; 0x8a2 <tfp_format+0x22c>
 722:	88 35       	cpi	r24, 0x58	; 88
 724:	09 f4       	brne	.+2      	; 0x728 <tfp_format+0xb2>
 726:	6a c0       	rjmp	.+212    	; 0x7fc <tfp_format+0x186>
 728:	88 23       	and	r24, r24
 72a:	09 f4       	brne	.+2      	; 0x72e <tfp_format+0xb8>
 72c:	c7 c0       	rjmp	.+398    	; 0x8bc <tfp_format+0x246>
 72e:	bd c0       	rjmp	.+378    	; 0x8aa <tfp_format+0x234>
 730:	83 37       	cpi	r24, 0x73	; 115
 732:	09 f4       	brne	.+2      	; 0x736 <tfp_format+0xc0>
 734:	a6 c0       	rjmp	.+332    	; 0x882 <tfp_format+0x20c>
 736:	18 f4       	brcc	.+6      	; 0x73e <tfp_format+0xc8>
 738:	84 36       	cpi	r24, 0x64	; 100
 73a:	c1 f1       	breq	.+112    	; 0x7ac <tfp_format+0x136>
 73c:	b6 c0       	rjmp	.+364    	; 0x8aa <tfp_format+0x234>
 73e:	85 37       	cpi	r24, 0x75	; 117
 740:	21 f0       	breq	.+8      	; 0x74a <tfp_format+0xd4>
 742:	88 37       	cpi	r24, 0x78	; 120
 744:	09 f4       	brne	.+2      	; 0x748 <tfp_format+0xd2>
 746:	5a c0       	rjmp	.+180    	; 0x7fc <tfp_format+0x186>
 748:	b0 c0       	rjmp	.+352    	; 0x8aa <tfp_format+0x234>
				case 0:
				goto abort;
				case 'u' : {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
 74a:	99 23       	and	r25, r25
 74c:	a1 f0       	breq	.+40     	; 0x776 <tfp_format+0x100>
					uli2a(va_arg(va, unsigned long int),10,0,bf);
 74e:	47 01       	movw	r8, r14
 750:	f4 e0       	ldi	r31, 0x04	; 4
 752:	8f 0e       	add	r8, r31
 754:	91 1c       	adc	r9, r1
 756:	f7 01       	movw	r30, r14
 758:	60 81       	ld	r22, Z
 75a:	71 81       	ldd	r23, Z+1	; 0x01
 75c:	82 81       	ldd	r24, Z+2	; 0x02
 75e:	93 81       	ldd	r25, Z+3	; 0x03
 760:	8e 01       	movw	r16, r28
 762:	0f 5f       	subi	r16, 0xFF	; 255
 764:	1f 4f       	sbci	r17, 0xFF	; 255
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	4a e0       	ldi	r20, 0x0A	; 10
 76c:	50 e0       	ldi	r21, 0x00	; 0
 76e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <uli2a>
 772:	74 01       	movw	r14, r8
 774:	10 c0       	rjmp	.+32     	; 0x796 <tfp_format+0x120>
					else
					#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 776:	87 01       	movw	r16, r14
 778:	0e 5f       	subi	r16, 0xFE	; 254
 77a:	1f 4f       	sbci	r17, 0xFF	; 255
 77c:	9e 01       	movw	r18, r28
 77e:	2f 5f       	subi	r18, 0xFF	; 255
 780:	3f 4f       	sbci	r19, 0xFF	; 255
 782:	40 e0       	ldi	r20, 0x00	; 0
 784:	50 e0       	ldi	r21, 0x00	; 0
 786:	6a e0       	ldi	r22, 0x0A	; 10
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	f7 01       	movw	r30, r14
 78c:	80 81       	ld	r24, Z
 78e:	91 81       	ldd	r25, Z+1	; 0x01
 790:	0e 94 2b 02 	call	0x456	; 0x456 <ui2a>
 794:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 796:	4d 85       	ldd	r20, Y+13	; 0x0d
 798:	5e 85       	ldd	r21, Y+14	; 0x0e
 79a:	8e 01       	movw	r16, r28
 79c:	0f 5f       	subi	r16, 0xFF	; 255
 79e:	1f 4f       	sbci	r17, 0xFF	; 255
 7a0:	27 2d       	mov	r18, r7
 7a2:	b6 01       	movw	r22, r12
 7a4:	c5 01       	movw	r24, r10
 7a6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <putchw>
					break;
 7aa:	7f c0       	rjmp	.+254    	; 0x8aa <tfp_format+0x234>
				}
				case 'd' :  {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng){
 7ac:	99 23       	and	r25, r25
 7ae:	79 f0       	breq	.+30     	; 0x7ce <tfp_format+0x158>
						//						li2a(va_arg(va, unsigned long int),bf);
						li2a(va_arg(va, long int),bf);
 7b0:	87 01       	movw	r16, r14
 7b2:	0c 5f       	subi	r16, 0xFC	; 252
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	f7 01       	movw	r30, r14
 7b8:	60 81       	ld	r22, Z
 7ba:	71 81       	ldd	r23, Z+1	; 0x01
 7bc:	82 81       	ldd	r24, Z+2	; 0x02
 7be:	93 81       	ldd	r25, Z+3	; 0x03
 7c0:	ae 01       	movw	r20, r28
 7c2:	4f 5f       	subi	r20, 0xFF	; 255
 7c4:	5f 4f       	sbci	r21, 0xFF	; 255
 7c6:	0e 94 11 02 	call	0x422	; 0x422 <li2a>
 7ca:	78 01       	movw	r14, r16
 7cc:	0c c0       	rjmp	.+24     	; 0x7e6 <tfp_format+0x170>
					else
					#endif



					i2a(va_arg(va, int),bf);
 7ce:	87 01       	movw	r16, r14
 7d0:	0e 5f       	subi	r16, 0xFE	; 254
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	be 01       	movw	r22, r28
 7d6:	6f 5f       	subi	r22, 0xFF	; 255
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	f7 01       	movw	r30, r14
 7dc:	80 81       	ld	r24, Z
 7de:	91 81       	ldd	r25, Z+1	; 0x01
 7e0:	0e 94 8f 02 	call	0x51e	; 0x51e <i2a>
 7e4:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 7e6:	4d 85       	ldd	r20, Y+13	; 0x0d
 7e8:	5e 85       	ldd	r21, Y+14	; 0x0e
 7ea:	8e 01       	movw	r16, r28
 7ec:	0f 5f       	subi	r16, 0xFF	; 255
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	27 2d       	mov	r18, r7
 7f2:	b6 01       	movw	r22, r12
 7f4:	c5 01       	movw	r24, r10
 7f6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <putchw>
					break;
 7fa:	57 c0       	rjmp	.+174    	; 0x8aa <tfp_format+0x234>
				}
				case 'x': case 'X' :
				#ifdef 	PRINTF_LONG_SUPPORT
				if (lng)
 7fc:	99 23       	and	r25, r25
 7fe:	c1 f0       	breq	.+48     	; 0x830 <tfp_format+0x1ba>
				uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
 800:	47 01       	movw	r8, r14
 802:	f4 e0       	ldi	r31, 0x04	; 4
 804:	8f 0e       	add	r8, r31
 806:	91 1c       	adc	r9, r1
 808:	21 e0       	ldi	r18, 0x01	; 1
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	88 35       	cpi	r24, 0x58	; 88
 80e:	11 f0       	breq	.+4      	; 0x814 <tfp_format+0x19e>
 810:	20 e0       	ldi	r18, 0x00	; 0
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	f7 01       	movw	r30, r14
 816:	60 81       	ld	r22, Z
 818:	71 81       	ldd	r23, Z+1	; 0x01
 81a:	82 81       	ldd	r24, Z+2	; 0x02
 81c:	93 81       	ldd	r25, Z+3	; 0x03
 81e:	8e 01       	movw	r16, r28
 820:	0f 5f       	subi	r16, 0xFF	; 255
 822:	1f 4f       	sbci	r17, 0xFF	; 255
 824:	40 e1       	ldi	r20, 0x10	; 16
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <uli2a>
 82c:	74 01       	movw	r14, r8
 82e:	14 c0       	rjmp	.+40     	; 0x858 <tfp_format+0x1e2>
				else
				#endif
				ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 830:	87 01       	movw	r16, r14
 832:	0e 5f       	subi	r16, 0xFE	; 254
 834:	1f 4f       	sbci	r17, 0xFF	; 255
 836:	41 e0       	ldi	r20, 0x01	; 1
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	88 35       	cpi	r24, 0x58	; 88
 83c:	11 f0       	breq	.+4      	; 0x842 <tfp_format+0x1cc>
 83e:	40 e0       	ldi	r20, 0x00	; 0
 840:	50 e0       	ldi	r21, 0x00	; 0
 842:	9e 01       	movw	r18, r28
 844:	2f 5f       	subi	r18, 0xFF	; 255
 846:	3f 4f       	sbci	r19, 0xFF	; 255
 848:	60 e1       	ldi	r22, 0x10	; 16
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	f7 01       	movw	r30, r14
 84e:	80 81       	ld	r24, Z
 850:	91 81       	ldd	r25, Z+1	; 0x01
 852:	0e 94 2b 02 	call	0x456	; 0x456 <ui2a>
 856:	78 01       	movw	r14, r16
				putchw(putp,putf,w,lz,bf);
 858:	4d 85       	ldd	r20, Y+13	; 0x0d
 85a:	5e 85       	ldd	r21, Y+14	; 0x0e
 85c:	8e 01       	movw	r16, r28
 85e:	0f 5f       	subi	r16, 0xFF	; 255
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	27 2d       	mov	r18, r7
 864:	b6 01       	movw	r22, r12
 866:	c5 01       	movw	r24, r10
 868:	0e 94 f6 02 	call	0x5ec	; 0x5ec <putchw>
				break;
 86c:	1e c0       	rjmp	.+60     	; 0x8aa <tfp_format+0x234>
				case 'c' :
				putf(putp,(char)(va_arg(va, int)));
 86e:	87 01       	movw	r16, r14
 870:	0e 5f       	subi	r16, 0xFE	; 254
 872:	1f 4f       	sbci	r17, 0xFF	; 255
 874:	f7 01       	movw	r30, r14
 876:	60 81       	ld	r22, Z
 878:	c5 01       	movw	r24, r10
 87a:	f6 01       	movw	r30, r12
 87c:	09 95       	icall
 87e:	78 01       	movw	r14, r16
				break;
 880:	14 c0       	rjmp	.+40     	; 0x8aa <tfp_format+0x234>
				case 's' :
				putchw(putp,putf,w,0,va_arg(va, char*));
 882:	47 01       	movw	r8, r14
 884:	f2 e0       	ldi	r31, 0x02	; 2
 886:	8f 0e       	add	r8, r31
 888:	91 1c       	adc	r9, r1
 88a:	f7 01       	movw	r30, r14
 88c:	00 81       	ld	r16, Z
 88e:	11 81       	ldd	r17, Z+1	; 0x01
 890:	4d 85       	ldd	r20, Y+13	; 0x0d
 892:	5e 85       	ldd	r21, Y+14	; 0x0e
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	b6 01       	movw	r22, r12
 898:	c5 01       	movw	r24, r10
 89a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <putchw>
 89e:	74 01       	movw	r14, r8
				break;
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <tfp_format+0x234>
				case '%' :
				putf(putp,ch);
 8a2:	68 2f       	mov	r22, r24
 8a4:	c5 01       	movw	r24, r10
 8a6:	f6 01       	movw	r30, r12
 8a8:	09 95       	icall
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 8aa:	ef 85       	ldd	r30, Y+15	; 0x0f
 8ac:	f8 89       	ldd	r31, Y+16	; 0x10
 8ae:	df 01       	movw	r26, r30
 8b0:	11 96       	adiw	r26, 0x01	; 1
 8b2:	b8 8b       	std	Y+16, r27	; 0x10
 8b4:	af 87       	std	Y+15, r26	; 0x0f
 8b6:	60 81       	ld	r22, Z
 8b8:	61 11       	cpse	r22, r1
 8ba:	f8 ce       	rjmp	.-528    	; 0x6ac <tfp_format+0x36>
				break;
			}
		}
	}
	abort:;
}
 8bc:	60 96       	adiw	r28, 0x10	; 16
 8be:	0f b6       	in	r0, 0x3f	; 63
 8c0:	f8 94       	cli
 8c2:	de bf       	out	0x3e, r29	; 62
 8c4:	0f be       	out	0x3f, r0	; 63
 8c6:	cd bf       	out	0x3d, r28	; 61
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
 8ce:	0f 91       	pop	r16
 8d0:	ff 90       	pop	r15
 8d2:	ef 90       	pop	r14
 8d4:	df 90       	pop	r13
 8d6:	cf 90       	pop	r12
 8d8:	bf 90       	pop	r11
 8da:	af 90       	pop	r10
 8dc:	9f 90       	pop	r9
 8de:	8f 90       	pop	r8
 8e0:	7f 90       	pop	r7
 8e2:	08 95       	ret

000008e4 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
{
	stdout_putf=putf;
 8e4:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <stdout_putf+0x1>
 8e8:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <stdout_putf>
	stdout_putp=putp;
 8ec:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <stdout_putp+0x1>
 8f0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <stdout_putp>
 8f4:	08 95       	ret

000008f6 <tfp_printf>:
}

void tfp_printf(char *fmt, ...)
{
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	cd b7       	in	r28, 0x3d	; 61
 8fc:	de b7       	in	r29, 0x3e	; 62
 8fe:	9e 01       	movw	r18, r28
 900:	2b 5f       	subi	r18, 0xFB	; 251
 902:	3f 4f       	sbci	r19, 0xFF	; 255
 904:	f9 01       	movw	r30, r18
 906:	41 91       	ld	r20, Z+
 908:	51 91       	ld	r21, Z+
 90a:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 90c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <stdout_putf>
 910:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <stdout_putf+0x1>
 914:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <stdout_putp>
 918:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <stdout_putp+0x1>
 91c:	0e 94 3b 03 	call	0x676	; 0x676 <tfp_format>
	va_end(va);
}
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	08 95       	ret

00000926 <__mulsi3>:
 926:	db 01       	movw	r26, r22
 928:	8f 93       	push	r24
 92a:	9f 93       	push	r25
 92c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__muluhisi3>
 930:	bf 91       	pop	r27
 932:	af 91       	pop	r26
 934:	a2 9f       	mul	r26, r18
 936:	80 0d       	add	r24, r0
 938:	91 1d       	adc	r25, r1
 93a:	a3 9f       	mul	r26, r19
 93c:	90 0d       	add	r25, r0
 93e:	b2 9f       	mul	r27, r18
 940:	90 0d       	add	r25, r0
 942:	11 24       	eor	r1, r1
 944:	08 95       	ret

00000946 <__udivmodhi4>:
 946:	aa 1b       	sub	r26, r26
 948:	bb 1b       	sub	r27, r27
 94a:	51 e1       	ldi	r21, 0x11	; 17
 94c:	07 c0       	rjmp	.+14     	; 0x95c <__udivmodhi4_ep>

0000094e <__udivmodhi4_loop>:
 94e:	aa 1f       	adc	r26, r26
 950:	bb 1f       	adc	r27, r27
 952:	a6 17       	cp	r26, r22
 954:	b7 07       	cpc	r27, r23
 956:	10 f0       	brcs	.+4      	; 0x95c <__udivmodhi4_ep>
 958:	a6 1b       	sub	r26, r22
 95a:	b7 0b       	sbc	r27, r23

0000095c <__udivmodhi4_ep>:
 95c:	88 1f       	adc	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	5a 95       	dec	r21
 962:	a9 f7       	brne	.-22     	; 0x94e <__udivmodhi4_loop>
 964:	80 95       	com	r24
 966:	90 95       	com	r25
 968:	bc 01       	movw	r22, r24
 96a:	cd 01       	movw	r24, r26
 96c:	08 95       	ret

0000096e <__udivmodsi4>:
 96e:	a1 e2       	ldi	r26, 0x21	; 33
 970:	1a 2e       	mov	r1, r26
 972:	aa 1b       	sub	r26, r26
 974:	bb 1b       	sub	r27, r27
 976:	fd 01       	movw	r30, r26
 978:	0d c0       	rjmp	.+26     	; 0x994 <__udivmodsi4_ep>

0000097a <__udivmodsi4_loop>:
 97a:	aa 1f       	adc	r26, r26
 97c:	bb 1f       	adc	r27, r27
 97e:	ee 1f       	adc	r30, r30
 980:	ff 1f       	adc	r31, r31
 982:	a2 17       	cp	r26, r18
 984:	b3 07       	cpc	r27, r19
 986:	e4 07       	cpc	r30, r20
 988:	f5 07       	cpc	r31, r21
 98a:	20 f0       	brcs	.+8      	; 0x994 <__udivmodsi4_ep>
 98c:	a2 1b       	sub	r26, r18
 98e:	b3 0b       	sbc	r27, r19
 990:	e4 0b       	sbc	r30, r20
 992:	f5 0b       	sbc	r31, r21

00000994 <__udivmodsi4_ep>:
 994:	66 1f       	adc	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	88 1f       	adc	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	1a 94       	dec	r1
 99e:	69 f7       	brne	.-38     	; 0x97a <__udivmodsi4_loop>
 9a0:	60 95       	com	r22
 9a2:	70 95       	com	r23
 9a4:	80 95       	com	r24
 9a6:	90 95       	com	r25
 9a8:	9b 01       	movw	r18, r22
 9aa:	ac 01       	movw	r20, r24
 9ac:	bd 01       	movw	r22, r26
 9ae:	cf 01       	movw	r24, r30
 9b0:	08 95       	ret

000009b2 <__muluhisi3>:
 9b2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__umulhisi3>
 9b6:	a5 9f       	mul	r26, r21
 9b8:	90 0d       	add	r25, r0
 9ba:	b4 9f       	mul	r27, r20
 9bc:	90 0d       	add	r25, r0
 9be:	a4 9f       	mul	r26, r20
 9c0:	80 0d       	add	r24, r0
 9c2:	91 1d       	adc	r25, r1
 9c4:	11 24       	eor	r1, r1
 9c6:	08 95       	ret

000009c8 <__umulhisi3>:
 9c8:	a2 9f       	mul	r26, r18
 9ca:	b0 01       	movw	r22, r0
 9cc:	b3 9f       	mul	r27, r19
 9ce:	c0 01       	movw	r24, r0
 9d0:	a3 9f       	mul	r26, r19
 9d2:	70 0d       	add	r23, r0
 9d4:	81 1d       	adc	r24, r1
 9d6:	11 24       	eor	r1, r1
 9d8:	91 1d       	adc	r25, r1
 9da:	b2 9f       	mul	r27, r18
 9dc:	70 0d       	add	r23, r0
 9de:	81 1d       	adc	r24, r1
 9e0:	11 24       	eor	r1, r1
 9e2:	91 1d       	adc	r25, r1
 9e4:	08 95       	ret

000009e6 <_exit>:
 9e6:	f8 94       	cli

000009e8 <__stop_program>:
 9e8:	ff cf       	rjmp	.-2      	; 0x9e8 <__stop_program>


4I.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065b  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000289  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initPorts>:
#include <avr/portpins.h>
#include <util/delay.h>

void initPorts()
{
	DDRC = 0xFF; // LED's
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x00; // Taster als Eingänge
  70:	1a ba       	out	0x1a, r1	; 26
	
	DDRA &= ~((1 << PA0)|(1 << PA1));
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	8c 7f       	andi	r24, 0xFC	; 252
  76:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0)|(1 << PA1));
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	83 60       	ori	r24, 0x03	; 3
  7c:	8b bb       	out	0x1b, r24	; 27
  7e:	08 95       	ret

00000080 <main>:
}

int main(void)
{
	initPorts();
  80:	0e 94 36 00 	call	0x6c	; 0x6c <initPorts>
	PORTC = 0x01; // Startposition 
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	85 bb       	out	0x15, r24	; 21

	while (1)
	{
		if (!(PINA & (1 << PA0)))
  88:	c8 99       	sbic	0x19, 0	; 25
  8a:	09 c0       	rjmp	.+18     	; 0x9e <main+0x1e>
		{
			PORTC <<= 1;
  8c:	85 b3       	in	r24, 0x15	; 21
  8e:	88 0f       	add	r24, r24
  90:	85 bb       	out	0x15, r24	; 21
			
			if (PORTC == 0x00)
  92:	85 b3       	in	r24, 0x15	; 21
  94:	81 11       	cpse	r24, r1
  96:	0f c0       	rjmp	.+30     	; 0xb6 <main+0x36>
			PORTC = 0x01;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <main+0x36>
		}
		else if (!(PINA & (1 << PA1)))
  9e:	c9 99       	sbic	0x19, 1	; 25
  a0:	09 c0       	rjmp	.+18     	; 0xb4 <main+0x34>
		{
			PORTC >>= 1;
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	86 95       	lsr	r24
  a6:	85 bb       	out	0x15, r24	; 21
			
			if (PORTC == 0x00)
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	81 11       	cpse	r24, r1
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <main+0x36>
			PORTC = 0x80;
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x36>
		}
		else
		{
			PORTC = 0x00;
  b4:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f e3       	ldi	r18, 0x3F	; 63
  b8:	84 e1       	ldi	r24, 0x14	; 20
  ba:	96 e0       	ldi	r25, 0x06	; 6
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
  c8:	df cf       	rjmp	.-66     	; 0x88 <main+0x8>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

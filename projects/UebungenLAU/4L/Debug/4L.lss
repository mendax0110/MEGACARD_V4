
4L.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000093e  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800070  00800070  000009e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001478  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000963  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009bc  00000000  00000000  000028fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  000032b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047a  00000000  00000000  000035a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000165c  00000000  00000000  00003a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000507a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  8a:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 1c 04 	call	0x838	; 0x838 <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <main>:
#include "lcd_4.h"

unsigned int count=0;

int main(void){
	lcd_init();
 1e6:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	lcd_pos(0,0);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
	printf("MEGACARD");
 1f2:	80 e6       	ldi	r24, 0x60	; 96
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	9f 93       	push	r25
 1f8:	8f 93       	push	r24
 1fa:	0e 94 25 04 	call	0x84a	; 0x84a <tfp_printf>
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0

	for(;;)                 
	{
		count++;									
 202:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 206:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 210:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		lcd_pos(1,0);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
		printf("T= %5d",count);
 21c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__data_end+0x1>
 220:	8f 93       	push	r24
 222:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 226:	8f 93       	push	r24
 228:	89 e6       	ldi	r24, 0x69	; 105
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	9f 93       	push	r25
 22e:	8f 93       	push	r24
 230:	0e 94 25 04 	call	0x84a	; 0x84a <tfp_printf>
 234:	8f e2       	ldi	r24, 0x2F	; 47
 236:	95 e7       	ldi	r25, 0x75	; 117
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 23e:	00 00       	nop
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	dc cf       	rjmp	.-72     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>

0000024a <uli2a>:
	va_end(va);
}

static void putcp(void* p,char c)
{
	*(*((char**)p))++ = c;
 24a:	2f 92       	push	r2
 24c:	3f 92       	push	r3
 24e:	4f 92       	push	r4
 250:	5f 92       	push	r5
 252:	6f 92       	push	r6
 254:	7f 92       	push	r7
 256:	8f 92       	push	r8
 258:	9f 92       	push	r9
 25a:	af 92       	push	r10
 25c:	bf 92       	push	r11
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 d0       	rcall	.+0      	; 0x270 <uli2a+0x26>
 270:	00 d0       	rcall	.+0      	; 0x272 <uli2a+0x28>
 272:	1f 92       	push	r1
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	6c 83       	std	Y+4, r22	; 0x04
 27a:	7d 83       	std	Y+5, r23	; 0x05
 27c:	98 2e       	mov	r9, r24
 27e:	89 2e       	mov	r8, r25
 280:	5a 01       	movw	r10, r20
 282:	3b 83       	std	Y+3, r19	; 0x03
 284:	2a 83       	std	Y+2, r18	; 0x02
 286:	c1 2c       	mov	r12, r1
 288:	d1 2c       	mov	r13, r1
 28a:	76 01       	movw	r14, r12
 28c:	c3 94       	inc	r12
 28e:	08 c0       	rjmp	.+16     	; 0x2a0 <uli2a+0x56>
 290:	a7 01       	movw	r20, r14
 292:	96 01       	movw	r18, r12
 294:	c3 01       	movw	r24, r6
 296:	b2 01       	movw	r22, r4
 298:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsi3>
 29c:	6b 01       	movw	r12, r22
 29e:	7c 01       	movw	r14, r24
 2a0:	6c 81       	ldd	r22, Y+4	; 0x04
 2a2:	7d 81       	ldd	r23, Y+5	; 0x05
 2a4:	89 2d       	mov	r24, r9
 2a6:	98 2d       	mov	r25, r8
 2a8:	a7 01       	movw	r20, r14
 2aa:	96 01       	movw	r18, r12
 2ac:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__udivmodsi4>
 2b0:	25 01       	movw	r4, r10
 2b2:	61 2c       	mov	r6, r1
 2b4:	71 2c       	mov	r7, r1
 2b6:	24 15       	cp	r18, r4
 2b8:	35 05       	cpc	r19, r5
 2ba:	46 05       	cpc	r20, r6
 2bc:	57 05       	cpc	r21, r7
 2be:	40 f7       	brcc	.-48     	; 0x290 <uli2a+0x46>
 2c0:	a1 2c       	mov	r10, r1
 2c2:	b1 2c       	mov	r11, r1
 2c4:	39 c0       	rjmp	.+114    	; 0x338 <uli2a+0xee>
 2c6:	6c 81       	ldd	r22, Y+4	; 0x04
 2c8:	7d 81       	ldd	r23, Y+5	; 0x05
 2ca:	89 2d       	mov	r24, r9
 2cc:	98 2d       	mov	r25, r8
 2ce:	a7 01       	movw	r20, r14
 2d0:	96 01       	movw	r18, r12
 2d2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__udivmodsi4>
 2d6:	29 83       	std	Y+1, r18	; 0x01
 2d8:	42 2f       	mov	r20, r18
 2da:	24 2e       	mov	r2, r20
 2dc:	33 2e       	mov	r3, r19
 2de:	6c 83       	std	Y+4, r22	; 0x04
 2e0:	7d 83       	std	Y+5, r23	; 0x05
 2e2:	98 2e       	mov	r9, r24
 2e4:	89 2e       	mov	r8, r25
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	a3 01       	movw	r20, r6
 2ec:	92 01       	movw	r18, r4
 2ee:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__udivmodsi4>
 2f2:	69 01       	movw	r12, r18
 2f4:	7a 01       	movw	r14, r20
 2f6:	a1 14       	cp	r10, r1
 2f8:	b1 04       	cpc	r11, r1
 2fa:	39 f4       	brne	.+14     	; 0x30a <uli2a+0xc0>
 2fc:	12 14       	cp	r1, r2
 2fe:	13 04       	cpc	r1, r3
 300:	24 f0       	brlt	.+8      	; 0x30a <uli2a+0xc0>
 302:	23 2b       	or	r18, r19
 304:	24 2b       	or	r18, r20
 306:	25 2b       	or	r18, r21
 308:	b9 f4       	brne	.+46     	; 0x338 <uli2a+0xee>
 30a:	c8 01       	movw	r24, r16
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	2a e0       	ldi	r18, 0x0A	; 10
 310:	22 16       	cp	r2, r18
 312:	31 04       	cpc	r3, r1
 314:	34 f0       	brlt	.+12     	; 0x322 <uli2a+0xd8>
 316:	ea 81       	ldd	r30, Y+2	; 0x02
 318:	fb 81       	ldd	r31, Y+3	; 0x03
 31a:	ef 2b       	or	r30, r31
 31c:	21 f0       	breq	.+8      	; 0x326 <uli2a+0xdc>
 31e:	27 e3       	ldi	r18, 0x37	; 55
 320:	03 c0       	rjmp	.+6      	; 0x328 <uli2a+0xde>
 322:	20 e3       	ldi	r18, 0x30	; 48
 324:	01 c0       	rjmp	.+2      	; 0x328 <uli2a+0xde>
 326:	27 e5       	ldi	r18, 0x57	; 87
 328:	39 80       	ldd	r3, Y+1	; 0x01
 32a:	32 0e       	add	r3, r18
 32c:	f8 01       	movw	r30, r16
 32e:	30 82       	st	Z, r3
 330:	ff ef       	ldi	r31, 0xFF	; 255
 332:	af 1a       	sub	r10, r31
 334:	bf 0a       	sbc	r11, r31
 336:	8c 01       	movw	r16, r24
 338:	c1 14       	cp	r12, r1
 33a:	d1 04       	cpc	r13, r1
 33c:	e1 04       	cpc	r14, r1
 33e:	f1 04       	cpc	r15, r1
 340:	11 f6       	brne	.-124    	; 0x2c6 <uli2a+0x7c>
 342:	f8 01       	movw	r30, r16
 344:	10 82       	st	Z, r1
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	bf 90       	pop	r11
 362:	af 90       	pop	r10
 364:	9f 90       	pop	r9
 366:	8f 90       	pop	r8
 368:	7f 90       	pop	r7
 36a:	6f 90       	pop	r6
 36c:	5f 90       	pop	r5
 36e:	4f 90       	pop	r4
 370:	3f 90       	pop	r3
 372:	2f 90       	pop	r2
 374:	08 95       	ret

00000376 <li2a>:
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	99 23       	and	r25, r25
 37c:	64 f4       	brge	.+24     	; 0x396 <li2a+0x20>
 37e:	90 95       	com	r25
 380:	80 95       	com	r24
 382:	70 95       	com	r23
 384:	61 95       	neg	r22
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	8f 4f       	sbci	r24, 0xFF	; 255
 38a:	9f 4f       	sbci	r25, 0xFF	; 255
 38c:	2d e2       	ldi	r18, 0x2D	; 45
 38e:	fa 01       	movw	r30, r20
 390:	20 83       	st	Z, r18
 392:	4f 5f       	subi	r20, 0xFF	; 255
 394:	5f 4f       	sbci	r21, 0xFF	; 255
 396:	8a 01       	movw	r16, r20
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	4a e0       	ldi	r20, 0x0A	; 10
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	0e 94 25 01 	call	0x24a	; 0x24a <uli2a>
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	08 95       	ret

000003aa <ui2a>:
 3aa:	8f 92       	push	r8
 3ac:	9f 92       	push	r9
 3ae:	af 92       	push	r10
 3b0:	bf 92       	push	r11
 3b2:	cf 92       	push	r12
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	c8 2f       	mov	r28, r24
 3c4:	d9 2f       	mov	r29, r25
 3c6:	8b 01       	movw	r16, r22
 3c8:	6a 01       	movw	r12, r20
 3ca:	79 01       	movw	r14, r18
 3cc:	e1 e0       	ldi	r30, 0x01	; 1
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	08 c0       	rjmp	.+16     	; 0x3e2 <ui2a+0x38>
 3d2:	cf 01       	movw	r24, r30
 3d4:	80 9f       	mul	r24, r16
 3d6:	f0 01       	movw	r30, r0
 3d8:	81 9f       	mul	r24, r17
 3da:	f0 0d       	add	r31, r0
 3dc:	90 9f       	mul	r25, r16
 3de:	f0 0d       	add	r31, r0
 3e0:	11 24       	eor	r1, r1
 3e2:	8c 2f       	mov	r24, r28
 3e4:	9d 2f       	mov	r25, r29
 3e6:	bf 01       	movw	r22, r30
 3e8:	0e 94 4d 04 	call	0x89a	; 0x89a <__udivmodhi4>
 3ec:	60 17       	cp	r22, r16
 3ee:	71 07       	cpc	r23, r17
 3f0:	80 f7       	brcc	.-32     	; 0x3d2 <ui2a+0x28>
 3f2:	a1 2c       	mov	r10, r1
 3f4:	b1 2c       	mov	r11, r1
 3f6:	2c c0       	rjmp	.+88     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 3f8:	8c 2f       	mov	r24, r28
 3fa:	9d 2f       	mov	r25, r29
 3fc:	bf 01       	movw	r22, r30
 3fe:	0e 94 4d 04 	call	0x89a	; 0x89a <__udivmodhi4>
 402:	36 2f       	mov	r19, r22
 404:	86 2e       	mov	r8, r22
 406:	97 2e       	mov	r9, r23
 408:	c8 2f       	mov	r28, r24
 40a:	d9 2f       	mov	r29, r25
 40c:	cf 01       	movw	r24, r30
 40e:	b8 01       	movw	r22, r16
 410:	0e 94 4d 04 	call	0x89a	; 0x89a <__udivmodhi4>
 414:	fb 01       	movw	r30, r22
 416:	a1 14       	cp	r10, r1
 418:	b1 04       	cpc	r11, r1
 41a:	29 f4       	brne	.+10     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 41c:	18 14       	cp	r1, r8
 41e:	19 04       	cpc	r1, r9
 420:	14 f0       	brlt	.+4      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 422:	30 97       	sbiw	r30, 0x00	; 0
 424:	a9 f4       	brne	.+42     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 426:	c7 01       	movw	r24, r14
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	aa e0       	ldi	r26, 0x0A	; 10
 42c:	8a 16       	cp	r8, r26
 42e:	91 04       	cpc	r9, r1
 430:	2c f0       	brlt	.+10     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 432:	c1 14       	cp	r12, r1
 434:	d1 04       	cpc	r13, r1
 436:	21 f0       	breq	.+8      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 438:	27 e3       	ldi	r18, 0x37	; 55
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 43c:	20 e3       	ldi	r18, 0x30	; 48
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 440:	27 e5       	ldi	r18, 0x57	; 87
 442:	32 0f       	add	r19, r18
 444:	d7 01       	movw	r26, r14
 446:	3c 93       	st	X, r19
 448:	bf ef       	ldi	r27, 0xFF	; 255
 44a:	ab 1a       	sub	r10, r27
 44c:	bb 0a       	sbc	r11, r27
 44e:	7c 01       	movw	r14, r24
 450:	30 97       	sbiw	r30, 0x00	; 0
 452:	91 f6       	brne	.-92     	; 0x3f8 <ui2a+0x4e>
 454:	f7 01       	movw	r30, r14
 456:	10 82       	st	Z, r1
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	bf 90       	pop	r11
 46a:	af 90       	pop	r10
 46c:	9f 90       	pop	r9
 46e:	8f 90       	pop	r8
 470:	08 95       	ret

00000472 <i2a>:
 472:	9b 01       	movw	r18, r22
 474:	99 23       	and	r25, r25
 476:	44 f4       	brge	.+16     	; 0x488 <i2a+0x16>
 478:	91 95       	neg	r25
 47a:	81 95       	neg	r24
 47c:	91 09       	sbc	r25, r1
 47e:	4d e2       	ldi	r20, 0x2D	; 45
 480:	fb 01       	movw	r30, r22
 482:	40 83       	st	Z, r20
 484:	2f 5f       	subi	r18, 0xFF	; 255
 486:	3f 4f       	sbci	r19, 0xFF	; 255
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	6a e0       	ldi	r22, 0x0A	; 10
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ui2a>
 494:	08 95       	ret

00000496 <a2d>:
 496:	90 ed       	ldi	r25, 0xD0	; 208
 498:	98 0f       	add	r25, r24
 49a:	9a 30       	cpi	r25, 0x0A	; 10
 49c:	18 f4       	brcc	.+6      	; 0x4a4 <a2d+0xe>
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	c0 97       	sbiw	r24, 0x30	; 48
 4a2:	08 95       	ret
 4a4:	9f e9       	ldi	r25, 0x9F	; 159
 4a6:	98 0f       	add	r25, r24
 4a8:	96 30       	cpi	r25, 0x06	; 6
 4aa:	20 f4       	brcc	.+8      	; 0x4b4 <a2d+0x1e>
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	87 55       	subi	r24, 0x57	; 87
 4b0:	91 09       	sbc	r25, r1
 4b2:	08 95       	ret
 4b4:	9f eb       	ldi	r25, 0xBF	; 191
 4b6:	98 0f       	add	r25, r24
 4b8:	96 30       	cpi	r25, 0x06	; 6
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <a2d+0x2c>
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	c7 97       	sbiw	r24, 0x37	; 55
 4c0:	08 95       	ret
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	9f ef       	ldi	r25, 0xFF	; 255
 4c6:	08 95       	ret

000004c8 <a2i>:
 4c8:	9f 92       	push	r9
 4ca:	af 92       	push	r10
 4cc:	bf 92       	push	r11
 4ce:	cf 92       	push	r12
 4d0:	df 92       	push	r13
 4d2:	ef 92       	push	r14
 4d4:	ff 92       	push	r15
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	98 2e       	mov	r9, r24
 4e0:	5b 01       	movw	r10, r22
 4e2:	7a 01       	movw	r14, r20
 4e4:	69 01       	movw	r12, r18
 4e6:	fb 01       	movw	r30, r22
 4e8:	c0 81       	ld	r28, Z
 4ea:	d1 81       	ldd	r29, Z+1	; 0x01
 4ec:	00 e0       	ldi	r16, 0x00	; 0
 4ee:	10 e0       	ldi	r17, 0x00	; 0
 4f0:	0f c0       	rjmp	.+30     	; 0x510 <a2i+0x48>
 4f2:	e8 16       	cp	r14, r24
 4f4:	f9 06       	cpc	r15, r25
 4f6:	8c f0       	brlt	.+34     	; 0x51a <a2i+0x52>
 4f8:	0e 9d       	mul	r16, r14
 4fa:	90 01       	movw	r18, r0
 4fc:	0f 9d       	mul	r16, r15
 4fe:	30 0d       	add	r19, r0
 500:	1e 9d       	mul	r17, r14
 502:	30 0d       	add	r19, r0
 504:	11 24       	eor	r1, r1
 506:	8c 01       	movw	r16, r24
 508:	02 0f       	add	r16, r18
 50a:	13 1f       	adc	r17, r19
 50c:	98 80       	ld	r9, Y
 50e:	21 96       	adiw	r28, 0x01	; 1
 510:	89 2d       	mov	r24, r9
 512:	0e 94 4b 02 	call	0x496	; 0x496 <a2d>
 516:	99 23       	and	r25, r25
 518:	64 f7       	brge	.-40     	; 0x4f2 <a2i+0x2a>
 51a:	f5 01       	movw	r30, r10
 51c:	d1 83       	std	Z+1, r29	; 0x01
 51e:	c0 83       	st	Z, r28
 520:	f6 01       	movw	r30, r12
 522:	11 83       	std	Z+1, r17	; 0x01
 524:	00 83       	st	Z, r16
 526:	89 2d       	mov	r24, r9
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	ff 90       	pop	r15
 532:	ef 90       	pop	r14
 534:	df 90       	pop	r13
 536:	cf 90       	pop	r12
 538:	bf 90       	pop	r11
 53a:	af 90       	pop	r10
 53c:	9f 90       	pop	r9
 53e:	08 95       	ret

00000540 <putchw>:
 540:	bf 92       	push	r11
 542:	cf 92       	push	r12
 544:	df 92       	push	r13
 546:	ef 92       	push	r14
 548:	ff 92       	push	r15
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	6c 01       	movw	r12, r24
 554:	7b 01       	movw	r14, r22
 556:	e8 01       	movw	r28, r16
 558:	22 23       	and	r18, r18
 55a:	29 f0       	breq	.+10     	; 0x566 <putchw+0x26>
 55c:	0f 2e       	mov	r0, r31
 55e:	f0 e3       	ldi	r31, 0x30	; 48
 560:	bf 2e       	mov	r11, r31
 562:	f0 2d       	mov	r31, r0
 564:	03 c0       	rjmp	.+6      	; 0x56c <putchw+0x2c>
 566:	68 94       	set
 568:	bb 24       	eor	r11, r11
 56a:	b5 f8       	bld	r11, 5
 56c:	fe 01       	movw	r30, r28
 56e:	03 c0       	rjmp	.+6      	; 0x576 <putchw+0x36>
 570:	41 50       	subi	r20, 0x01	; 1
 572:	51 09       	sbc	r21, r1
 574:	f9 01       	movw	r30, r18
 576:	9f 01       	movw	r18, r30
 578:	2f 5f       	subi	r18, 0xFF	; 255
 57a:	3f 4f       	sbci	r19, 0xFF	; 255
 57c:	80 81       	ld	r24, Z
 57e:	88 23       	and	r24, r24
 580:	49 f0       	breq	.+18     	; 0x594 <putchw+0x54>
 582:	14 16       	cp	r1, r20
 584:	15 06       	cpc	r1, r21
 586:	a4 f3       	brlt	.-24     	; 0x570 <putchw+0x30>
 588:	05 c0       	rjmp	.+10     	; 0x594 <putchw+0x54>
 58a:	6b 2d       	mov	r22, r11
 58c:	c6 01       	movw	r24, r12
 58e:	f7 01       	movw	r30, r14
 590:	09 95       	icall
 592:	a8 01       	movw	r20, r16
 594:	8a 01       	movw	r16, r20
 596:	01 50       	subi	r16, 0x01	; 1
 598:	11 09       	sbc	r17, r1
 59a:	14 16       	cp	r1, r20
 59c:	15 06       	cpc	r1, r21
 59e:	ac f3       	brlt	.-22     	; 0x58a <putchw+0x4a>
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <putchw+0x6a>
 5a2:	c6 01       	movw	r24, r12
 5a4:	f7 01       	movw	r30, r14
 5a6:	09 95       	icall
 5a8:	e8 01       	movw	r28, r16
 5aa:	8e 01       	movw	r16, r28
 5ac:	0f 5f       	subi	r16, 0xFF	; 255
 5ae:	1f 4f       	sbci	r17, 0xFF	; 255
 5b0:	68 81       	ld	r22, Y
 5b2:	61 11       	cpse	r22, r1
 5b4:	f6 cf       	rjmp	.-20     	; 0x5a2 <putchw+0x62>
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	df 90       	pop	r13
 5c4:	cf 90       	pop	r12
 5c6:	bf 90       	pop	r11
 5c8:	08 95       	ret

000005ca <tfp_format>:
	while ((ch= *bf++))
	putf(putp,ch);
}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
{
 5ca:	7f 92       	push	r7
 5cc:	8f 92       	push	r8
 5ce:	9f 92       	push	r9
 5d0:	af 92       	push	r10
 5d2:	bf 92       	push	r11
 5d4:	cf 92       	push	r12
 5d6:	df 92       	push	r13
 5d8:	ef 92       	push	r14
 5da:	ff 92       	push	r15
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	60 97       	sbiw	r28, 0x10	; 16
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	f8 94       	cli
 5ee:	de bf       	out	0x3e, r29	; 62
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	cd bf       	out	0x3d, r28	; 61
 5f4:	5c 01       	movw	r10, r24
 5f6:	6b 01       	movw	r12, r22
 5f8:	58 8b       	std	Y+16, r21	; 0x10
 5fa:	4f 87       	std	Y+15, r20	; 0x0f
 5fc:	79 01       	movw	r14, r18
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 5fe:	ff c0       	rjmp	.+510    	; 0x7fe <tfp_format+0x234>
		if (ch!='%')
 600:	65 32       	cpi	r22, 0x25	; 37
 602:	21 f0       	breq	.+8      	; 0x60c <tfp_format+0x42>
		putf(putp,ch);
 604:	c5 01       	movw	r24, r10
 606:	f6 01       	movw	r30, r12
 608:	09 95       	icall
 60a:	f9 c0       	rjmp	.+498    	; 0x7fe <tfp_format+0x234>
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
			#endif
			int w=0;
 60c:	1e 86       	std	Y+14, r1	; 0x0e
 60e:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 610:	9d 01       	movw	r18, r26
 612:	2f 5f       	subi	r18, 0xFF	; 255
 614:	3f 4f       	sbci	r19, 0xFF	; 255
 616:	38 8b       	std	Y+16, r19	; 0x10
 618:	2f 87       	std	Y+15, r18	; 0x0f
 61a:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 61c:	80 33       	cpi	r24, 0x30	; 48
 61e:	49 f4       	brne	.+18     	; 0x632 <tfp_format+0x68>
				ch=*(fmt++);
 620:	2f 5f       	subi	r18, 0xFF	; 255
 622:	3f 4f       	sbci	r19, 0xFF	; 255
 624:	38 8b       	std	Y+16, r19	; 0x10
 626:	2f 87       	std	Y+15, r18	; 0x0f
 628:	11 96       	adiw	r26, 0x01	; 1
 62a:	8c 91       	ld	r24, X
				lz=1;
 62c:	77 24       	eor	r7, r7
 62e:	73 94       	inc	r7
 630:	01 c0       	rjmp	.+2      	; 0x634 <tfp_format+0x6a>

	while ((ch=*(fmt++))) {
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
 632:	71 2c       	mov	r7, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
			}
			if (ch>='0' && ch<='9') {
 634:	90 ed       	ldi	r25, 0xD0	; 208
 636:	98 0f       	add	r25, r24
 638:	9a 30       	cpi	r25, 0x0A	; 10
 63a:	50 f4       	brcc	.+20     	; 0x650 <tfp_format+0x86>
				ch=a2i(ch,&fmt,10,&w);
 63c:	9e 01       	movw	r18, r28
 63e:	23 5f       	subi	r18, 0xF3	; 243
 640:	3f 4f       	sbci	r19, 0xFF	; 255
 642:	4a e0       	ldi	r20, 0x0A	; 10
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	be 01       	movw	r22, r28
 648:	61 5f       	subi	r22, 0xF1	; 241
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
 64c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <a2i>
			}
			#ifdef 	PRINTF_LONG_SUPPORT
			if (ch=='l') {
 650:	8c 36       	cpi	r24, 0x6C	; 108
 652:	49 f4       	brne	.+18     	; 0x666 <tfp_format+0x9c>
				ch=*(fmt++);
 654:	ef 85       	ldd	r30, Y+15	; 0x0f
 656:	f8 89       	ldd	r31, Y+16	; 0x10
 658:	cf 01       	movw	r24, r30
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	98 8b       	std	Y+16, r25	; 0x10
 65e:	8f 87       	std	Y+15, r24	; 0x0f
 660:	80 81       	ld	r24, Z
				lng=1;
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	01 c0       	rjmp	.+2      	; 0x668 <tfp_format+0x9e>
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
 666:	90 e0       	ldi	r25, 0x00	; 0
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
			#endif
			switch (ch) {
 668:	83 36       	cpi	r24, 0x63	; 99
 66a:	09 f4       	brne	.+2      	; 0x66e <tfp_format+0xa4>
 66c:	aa c0       	rjmp	.+340    	; 0x7c2 <tfp_format+0x1f8>
 66e:	50 f4       	brcc	.+20     	; 0x684 <tfp_format+0xba>
 670:	85 32       	cpi	r24, 0x25	; 37
 672:	09 f4       	brne	.+2      	; 0x676 <tfp_format+0xac>
 674:	c0 c0       	rjmp	.+384    	; 0x7f6 <tfp_format+0x22c>
 676:	88 35       	cpi	r24, 0x58	; 88
 678:	09 f4       	brne	.+2      	; 0x67c <tfp_format+0xb2>
 67a:	6a c0       	rjmp	.+212    	; 0x750 <tfp_format+0x186>
 67c:	88 23       	and	r24, r24
 67e:	09 f4       	brne	.+2      	; 0x682 <tfp_format+0xb8>
 680:	c7 c0       	rjmp	.+398    	; 0x810 <tfp_format+0x246>
 682:	bd c0       	rjmp	.+378    	; 0x7fe <tfp_format+0x234>
 684:	83 37       	cpi	r24, 0x73	; 115
 686:	09 f4       	brne	.+2      	; 0x68a <tfp_format+0xc0>
 688:	a6 c0       	rjmp	.+332    	; 0x7d6 <tfp_format+0x20c>
 68a:	18 f4       	brcc	.+6      	; 0x692 <tfp_format+0xc8>
 68c:	84 36       	cpi	r24, 0x64	; 100
 68e:	c1 f1       	breq	.+112    	; 0x700 <tfp_format+0x136>
 690:	b6 c0       	rjmp	.+364    	; 0x7fe <tfp_format+0x234>
 692:	85 37       	cpi	r24, 0x75	; 117
 694:	21 f0       	breq	.+8      	; 0x69e <tfp_format+0xd4>
 696:	88 37       	cpi	r24, 0x78	; 120
 698:	09 f4       	brne	.+2      	; 0x69c <tfp_format+0xd2>
 69a:	5a c0       	rjmp	.+180    	; 0x750 <tfp_format+0x186>
 69c:	b0 c0       	rjmp	.+352    	; 0x7fe <tfp_format+0x234>
				case 0:
				goto abort;
				case 'u' : {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
 69e:	99 23       	and	r25, r25
 6a0:	a1 f0       	breq	.+40     	; 0x6ca <tfp_format+0x100>
					uli2a(va_arg(va, unsigned long int),10,0,bf);
 6a2:	47 01       	movw	r8, r14
 6a4:	f4 e0       	ldi	r31, 0x04	; 4
 6a6:	8f 0e       	add	r8, r31
 6a8:	91 1c       	adc	r9, r1
 6aa:	f7 01       	movw	r30, r14
 6ac:	60 81       	ld	r22, Z
 6ae:	71 81       	ldd	r23, Z+1	; 0x01
 6b0:	82 81       	ldd	r24, Z+2	; 0x02
 6b2:	93 81       	ldd	r25, Z+3	; 0x03
 6b4:	8e 01       	movw	r16, r28
 6b6:	0f 5f       	subi	r16, 0xFF	; 255
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	4a e0       	ldi	r20, 0x0A	; 10
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	0e 94 25 01 	call	0x24a	; 0x24a <uli2a>
 6c6:	74 01       	movw	r14, r8
 6c8:	10 c0       	rjmp	.+32     	; 0x6ea <tfp_format+0x120>
					else
					#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 6ca:	87 01       	movw	r16, r14
 6cc:	0e 5f       	subi	r16, 0xFE	; 254
 6ce:	1f 4f       	sbci	r17, 0xFF	; 255
 6d0:	9e 01       	movw	r18, r28
 6d2:	2f 5f       	subi	r18, 0xFF	; 255
 6d4:	3f 4f       	sbci	r19, 0xFF	; 255
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	6a e0       	ldi	r22, 0x0A	; 10
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	f7 01       	movw	r30, r14
 6e0:	80 81       	ld	r24, Z
 6e2:	91 81       	ldd	r25, Z+1	; 0x01
 6e4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ui2a>
 6e8:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 6ea:	4d 85       	ldd	r20, Y+13	; 0x0d
 6ec:	5e 85       	ldd	r21, Y+14	; 0x0e
 6ee:	8e 01       	movw	r16, r28
 6f0:	0f 5f       	subi	r16, 0xFF	; 255
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	27 2d       	mov	r18, r7
 6f6:	b6 01       	movw	r22, r12
 6f8:	c5 01       	movw	r24, r10
 6fa:	0e 94 a0 02 	call	0x540	; 0x540 <putchw>
					break;
 6fe:	7f c0       	rjmp	.+254    	; 0x7fe <tfp_format+0x234>
				}
				case 'd' :  {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng){
 700:	99 23       	and	r25, r25
 702:	79 f0       	breq	.+30     	; 0x722 <tfp_format+0x158>
						//						li2a(va_arg(va, unsigned long int),bf);
						li2a(va_arg(va, long int),bf);
 704:	87 01       	movw	r16, r14
 706:	0c 5f       	subi	r16, 0xFC	; 252
 708:	1f 4f       	sbci	r17, 0xFF	; 255
 70a:	f7 01       	movw	r30, r14
 70c:	60 81       	ld	r22, Z
 70e:	71 81       	ldd	r23, Z+1	; 0x01
 710:	82 81       	ldd	r24, Z+2	; 0x02
 712:	93 81       	ldd	r25, Z+3	; 0x03
 714:	ae 01       	movw	r20, r28
 716:	4f 5f       	subi	r20, 0xFF	; 255
 718:	5f 4f       	sbci	r21, 0xFF	; 255
 71a:	0e 94 bb 01 	call	0x376	; 0x376 <li2a>
 71e:	78 01       	movw	r14, r16
 720:	0c c0       	rjmp	.+24     	; 0x73a <tfp_format+0x170>
					else
					#endif



					i2a(va_arg(va, int),bf);
 722:	87 01       	movw	r16, r14
 724:	0e 5f       	subi	r16, 0xFE	; 254
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	be 01       	movw	r22, r28
 72a:	6f 5f       	subi	r22, 0xFF	; 255
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	f7 01       	movw	r30, r14
 730:	80 81       	ld	r24, Z
 732:	91 81       	ldd	r25, Z+1	; 0x01
 734:	0e 94 39 02 	call	0x472	; 0x472 <i2a>
 738:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 73a:	4d 85       	ldd	r20, Y+13	; 0x0d
 73c:	5e 85       	ldd	r21, Y+14	; 0x0e
 73e:	8e 01       	movw	r16, r28
 740:	0f 5f       	subi	r16, 0xFF	; 255
 742:	1f 4f       	sbci	r17, 0xFF	; 255
 744:	27 2d       	mov	r18, r7
 746:	b6 01       	movw	r22, r12
 748:	c5 01       	movw	r24, r10
 74a:	0e 94 a0 02 	call	0x540	; 0x540 <putchw>
					break;
 74e:	57 c0       	rjmp	.+174    	; 0x7fe <tfp_format+0x234>
				}
				case 'x': case 'X' :
				#ifdef 	PRINTF_LONG_SUPPORT
				if (lng)
 750:	99 23       	and	r25, r25
 752:	c1 f0       	breq	.+48     	; 0x784 <tfp_format+0x1ba>
				uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
 754:	47 01       	movw	r8, r14
 756:	f4 e0       	ldi	r31, 0x04	; 4
 758:	8f 0e       	add	r8, r31
 75a:	91 1c       	adc	r9, r1
 75c:	21 e0       	ldi	r18, 0x01	; 1
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	88 35       	cpi	r24, 0x58	; 88
 762:	11 f0       	breq	.+4      	; 0x768 <tfp_format+0x19e>
 764:	20 e0       	ldi	r18, 0x00	; 0
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	f7 01       	movw	r30, r14
 76a:	60 81       	ld	r22, Z
 76c:	71 81       	ldd	r23, Z+1	; 0x01
 76e:	82 81       	ldd	r24, Z+2	; 0x02
 770:	93 81       	ldd	r25, Z+3	; 0x03
 772:	8e 01       	movw	r16, r28
 774:	0f 5f       	subi	r16, 0xFF	; 255
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	40 e1       	ldi	r20, 0x10	; 16
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	0e 94 25 01 	call	0x24a	; 0x24a <uli2a>
 780:	74 01       	movw	r14, r8
 782:	14 c0       	rjmp	.+40     	; 0x7ac <tfp_format+0x1e2>
				else
				#endif
				ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 784:	87 01       	movw	r16, r14
 786:	0e 5f       	subi	r16, 0xFE	; 254
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	41 e0       	ldi	r20, 0x01	; 1
 78c:	50 e0       	ldi	r21, 0x00	; 0
 78e:	88 35       	cpi	r24, 0x58	; 88
 790:	11 f0       	breq	.+4      	; 0x796 <tfp_format+0x1cc>
 792:	40 e0       	ldi	r20, 0x00	; 0
 794:	50 e0       	ldi	r21, 0x00	; 0
 796:	9e 01       	movw	r18, r28
 798:	2f 5f       	subi	r18, 0xFF	; 255
 79a:	3f 4f       	sbci	r19, 0xFF	; 255
 79c:	60 e1       	ldi	r22, 0x10	; 16
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	f7 01       	movw	r30, r14
 7a2:	80 81       	ld	r24, Z
 7a4:	91 81       	ldd	r25, Z+1	; 0x01
 7a6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ui2a>
 7aa:	78 01       	movw	r14, r16
				putchw(putp,putf,w,lz,bf);
 7ac:	4d 85       	ldd	r20, Y+13	; 0x0d
 7ae:	5e 85       	ldd	r21, Y+14	; 0x0e
 7b0:	8e 01       	movw	r16, r28
 7b2:	0f 5f       	subi	r16, 0xFF	; 255
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	27 2d       	mov	r18, r7
 7b8:	b6 01       	movw	r22, r12
 7ba:	c5 01       	movw	r24, r10
 7bc:	0e 94 a0 02 	call	0x540	; 0x540 <putchw>
				break;
 7c0:	1e c0       	rjmp	.+60     	; 0x7fe <tfp_format+0x234>
				case 'c' :
				putf(putp,(char)(va_arg(va, int)));
 7c2:	87 01       	movw	r16, r14
 7c4:	0e 5f       	subi	r16, 0xFE	; 254
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
 7c8:	f7 01       	movw	r30, r14
 7ca:	60 81       	ld	r22, Z
 7cc:	c5 01       	movw	r24, r10
 7ce:	f6 01       	movw	r30, r12
 7d0:	09 95       	icall
 7d2:	78 01       	movw	r14, r16
				break;
 7d4:	14 c0       	rjmp	.+40     	; 0x7fe <tfp_format+0x234>
				case 's' :
				putchw(putp,putf,w,0,va_arg(va, char*));
 7d6:	47 01       	movw	r8, r14
 7d8:	f2 e0       	ldi	r31, 0x02	; 2
 7da:	8f 0e       	add	r8, r31
 7dc:	91 1c       	adc	r9, r1
 7de:	f7 01       	movw	r30, r14
 7e0:	00 81       	ld	r16, Z
 7e2:	11 81       	ldd	r17, Z+1	; 0x01
 7e4:	4d 85       	ldd	r20, Y+13	; 0x0d
 7e6:	5e 85       	ldd	r21, Y+14	; 0x0e
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	b6 01       	movw	r22, r12
 7ec:	c5 01       	movw	r24, r10
 7ee:	0e 94 a0 02 	call	0x540	; 0x540 <putchw>
 7f2:	74 01       	movw	r14, r8
				break;
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <tfp_format+0x234>
				case '%' :
				putf(putp,ch);
 7f6:	68 2f       	mov	r22, r24
 7f8:	c5 01       	movw	r24, r10
 7fa:	f6 01       	movw	r30, r12
 7fc:	09 95       	icall
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 7fe:	ef 85       	ldd	r30, Y+15	; 0x0f
 800:	f8 89       	ldd	r31, Y+16	; 0x10
 802:	df 01       	movw	r26, r30
 804:	11 96       	adiw	r26, 0x01	; 1
 806:	b8 8b       	std	Y+16, r27	; 0x10
 808:	af 87       	std	Y+15, r26	; 0x0f
 80a:	60 81       	ld	r22, Z
 80c:	61 11       	cpse	r22, r1
 80e:	f8 ce       	rjmp	.-528    	; 0x600 <tfp_format+0x36>
				break;
			}
		}
	}
	abort:;
}
 810:	60 96       	adiw	r28, 0x10	; 16
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	f8 94       	cli
 816:	de bf       	out	0x3e, r29	; 62
 818:	0f be       	out	0x3f, r0	; 63
 81a:	cd bf       	out	0x3d, r28	; 61
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	ff 90       	pop	r15
 826:	ef 90       	pop	r14
 828:	df 90       	pop	r13
 82a:	cf 90       	pop	r12
 82c:	bf 90       	pop	r11
 82e:	af 90       	pop	r10
 830:	9f 90       	pop	r9
 832:	8f 90       	pop	r8
 834:	7f 90       	pop	r7
 836:	08 95       	ret

00000838 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
{
	stdout_putf=putf;
 838:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <stdout_putf+0x1>
 83c:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <stdout_putf>
	stdout_putp=putp;
 840:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <stdout_putp+0x1>
 844:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <stdout_putp>
 848:	08 95       	ret

0000084a <tfp_printf>:
}

void tfp_printf(char *fmt, ...)
{
 84a:	cf 93       	push	r28
 84c:	df 93       	push	r29
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
 852:	9e 01       	movw	r18, r28
 854:	2b 5f       	subi	r18, 0xFB	; 251
 856:	3f 4f       	sbci	r19, 0xFF	; 255
 858:	f9 01       	movw	r30, r18
 85a:	41 91       	ld	r20, Z+
 85c:	51 91       	ld	r21, Z+
 85e:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 860:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <stdout_putf>
 864:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <stdout_putf+0x1>
 868:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <stdout_putp>
 86c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <stdout_putp+0x1>
 870:	0e 94 e5 02 	call	0x5ca	; 0x5ca <tfp_format>
	va_end(va);
}
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	08 95       	ret

0000087a <__mulsi3>:
 87a:	db 01       	movw	r26, r22
 87c:	8f 93       	push	r24
 87e:	9f 93       	push	r25
 880:	0e 94 83 04 	call	0x906	; 0x906 <__muluhisi3>
 884:	bf 91       	pop	r27
 886:	af 91       	pop	r26
 888:	a2 9f       	mul	r26, r18
 88a:	80 0d       	add	r24, r0
 88c:	91 1d       	adc	r25, r1
 88e:	a3 9f       	mul	r26, r19
 890:	90 0d       	add	r25, r0
 892:	b2 9f       	mul	r27, r18
 894:	90 0d       	add	r25, r0
 896:	11 24       	eor	r1, r1
 898:	08 95       	ret

0000089a <__udivmodhi4>:
 89a:	aa 1b       	sub	r26, r26
 89c:	bb 1b       	sub	r27, r27
 89e:	51 e1       	ldi	r21, 0x11	; 17
 8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <__udivmodhi4_ep>

000008a2 <__udivmodhi4_loop>:
 8a2:	aa 1f       	adc	r26, r26
 8a4:	bb 1f       	adc	r27, r27
 8a6:	a6 17       	cp	r26, r22
 8a8:	b7 07       	cpc	r27, r23
 8aa:	10 f0       	brcs	.+4      	; 0x8b0 <__udivmodhi4_ep>
 8ac:	a6 1b       	sub	r26, r22
 8ae:	b7 0b       	sbc	r27, r23

000008b0 <__udivmodhi4_ep>:
 8b0:	88 1f       	adc	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	5a 95       	dec	r21
 8b6:	a9 f7       	brne	.-22     	; 0x8a2 <__udivmodhi4_loop>
 8b8:	80 95       	com	r24
 8ba:	90 95       	com	r25
 8bc:	bc 01       	movw	r22, r24
 8be:	cd 01       	movw	r24, r26
 8c0:	08 95       	ret

000008c2 <__udivmodsi4>:
 8c2:	a1 e2       	ldi	r26, 0x21	; 33
 8c4:	1a 2e       	mov	r1, r26
 8c6:	aa 1b       	sub	r26, r26
 8c8:	bb 1b       	sub	r27, r27
 8ca:	fd 01       	movw	r30, r26
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <__udivmodsi4_ep>

000008ce <__udivmodsi4_loop>:
 8ce:	aa 1f       	adc	r26, r26
 8d0:	bb 1f       	adc	r27, r27
 8d2:	ee 1f       	adc	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	a2 17       	cp	r26, r18
 8d8:	b3 07       	cpc	r27, r19
 8da:	e4 07       	cpc	r30, r20
 8dc:	f5 07       	cpc	r31, r21
 8de:	20 f0       	brcs	.+8      	; 0x8e8 <__udivmodsi4_ep>
 8e0:	a2 1b       	sub	r26, r18
 8e2:	b3 0b       	sbc	r27, r19
 8e4:	e4 0b       	sbc	r30, r20
 8e6:	f5 0b       	sbc	r31, r21

000008e8 <__udivmodsi4_ep>:
 8e8:	66 1f       	adc	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	88 1f       	adc	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	1a 94       	dec	r1
 8f2:	69 f7       	brne	.-38     	; 0x8ce <__udivmodsi4_loop>
 8f4:	60 95       	com	r22
 8f6:	70 95       	com	r23
 8f8:	80 95       	com	r24
 8fa:	90 95       	com	r25
 8fc:	9b 01       	movw	r18, r22
 8fe:	ac 01       	movw	r20, r24
 900:	bd 01       	movw	r22, r26
 902:	cf 01       	movw	r24, r30
 904:	08 95       	ret

00000906 <__muluhisi3>:
 906:	0e 94 8e 04 	call	0x91c	; 0x91c <__umulhisi3>
 90a:	a5 9f       	mul	r26, r21
 90c:	90 0d       	add	r25, r0
 90e:	b4 9f       	mul	r27, r20
 910:	90 0d       	add	r25, r0
 912:	a4 9f       	mul	r26, r20
 914:	80 0d       	add	r24, r0
 916:	91 1d       	adc	r25, r1
 918:	11 24       	eor	r1, r1
 91a:	08 95       	ret

0000091c <__umulhisi3>:
 91c:	a2 9f       	mul	r26, r18
 91e:	b0 01       	movw	r22, r0
 920:	b3 9f       	mul	r27, r19
 922:	c0 01       	movw	r24, r0
 924:	a3 9f       	mul	r26, r19
 926:	70 0d       	add	r23, r0
 928:	81 1d       	adc	r24, r1
 92a:	11 24       	eor	r1, r1
 92c:	91 1d       	adc	r25, r1
 92e:	b2 9f       	mul	r27, r18
 930:	70 0d       	add	r23, r0
 932:	81 1d       	adc	r24, r1
 934:	11 24       	eor	r1, r1
 936:	91 1d       	adc	r25, r1
 938:	08 95       	ret

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>

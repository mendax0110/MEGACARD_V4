
Tasterabfrage_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f3  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000571  00000000  00000000  0000076f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f6  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034e  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000126d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_ports>:
#define F_CPU 12000000UL	// Systemtakt bereits in Project-Properties definiert
#include <util/delay.h>    // Delay-Funktionen einbinden
#include <avr/io.h>

init_ports(){
	DDRC |= 0xFF;	// PORTC - Ausgang
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	9f ef       	ldi	r25, 0xFF	; 255
  70:	94 bb       	out	0x14, r25	; 20
	PORTC |= 0x80;	// LED 7 wird gesetzt (1000 0000 -> 0x80)
  72:	85 b3       	in	r24, 0x15	; 21
  74:	80 68       	ori	r24, 0x80	; 128
  76:	85 bb       	out	0x15, r24	; 21
	
	DDRA = 0x00;	// PORT A -> alle Pins auf Eingang	
  78:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	// alle PORTA -> Pullup
  7a:	9b bb       	out	0x1b, r25	; 27
}
  7c:	08 95       	ret

0000007e <main>:

int main(void)
{
	char keyboard_in;	// Variable vom Typ character -> 8 Bit (1Byte)
	
	init_ports();
  7e:	0e 94 36 00 	call	0x6c	; 0x6c <init_ports>
	
	while(1)
	{
        keyboard_in = PINA;	// Tastaturstatus wird in Variable gespeichert
  82:	89 b3       	in	r24, 0x19	; 25
        if(keyboard_in == 0xFE){	// wenn Taster 1 gedrückt
  84:	8e 3f       	cpi	r24, 0xFE	; 254
  86:	e9 f7       	brne	.-6      	; 0x82 <main+0x4>
            PORTC = PORTC << 1;	// LED 7 wird ausgeschaltet
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	88 0f       	add	r24, r24
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	f9 cf       	rjmp	.-14     	; 0x82 <main+0x4>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>

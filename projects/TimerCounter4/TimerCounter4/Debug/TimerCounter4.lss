
TimerCounter4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000f0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000624  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000590  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_19>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  7a:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_timer0>:
volatile uint8_t led_state = 0x01;  // Start with the first LED on (PB0)

void init_timer0()
{
	// CTC mode, TOP value = OCR0
	TCCR0 |= (1 << WGM01);
  82:	83 b7       	in	r24, 0x33	; 51
  84:	88 60       	ori	r24, 0x08	; 8
  86:	83 bf       	out	0x33, r24	; 51

	// Set prescaler to 1024
	TCCR0 |= (1 << COM00) | (1 << CS02) | (1 << CS00);	// Toggle - OC0, F_CPU: 1024
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	85 61       	ori	r24, 0x15	; 21
  8c:	83 bf       	out	0x33, r24	; 51

	// Set compare match value for 1s interrupt
	OCR0 = 117; // (F_CPU / prescaler / desired frequency) - 1 = (12000000 / 1024 / 1) - 1 = 117
  8e:	85 e7       	ldi	r24, 0x75	; 117
  90:	8c bf       	out	0x3c, r24	; 60

	// Enable compare match interrupt
	TIMSK |= (1 << OCIE0);
  92:	89 b7       	in	r24, 0x39	; 57
  94:	82 60       	ori	r24, 0x02	; 2
  96:	89 bf       	out	0x39, r24	; 57
  98:	08 95       	ret

0000009a <init_ports>:
}

void init_ports()
{
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2); // Set PB0, PB1, PB2 as output pins
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	87 bb       	out	0x17, r24	; 23
	PORTB = led_state; // Set initial LED state on PORTB
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	08 95       	ret

000000a8 <main>:
}

int main(void)
{
	cli();          // Disable global interrupts
  a8:	f8 94       	cli
	init_ports();   // Initialize ports
  aa:	0e 94 4d 00 	call	0x9a	; 0x9a <init_ports>
	init_timer0();  // Initialize Timer0
  ae:	0e 94 41 00 	call	0x82	; 0x82 <init_timer0>
	sei();          // Enable global interrupts
  b2:	78 94       	sei
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0xc>

000000b6 <__vector_19>:
		// Do nothing in the main loop
	}
}

ISR(TIMER0_COMP_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
	led_state <<= 1; // Shift LED state left
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	88 0f       	add	r24, r24
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (led_state == 0x00)
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	81 11       	cpse	r24, r1
  d2:	03 c0       	rjmp	.+6      	; 0xda <__vector_19+0x24>
	{
		led_state = 0x01; // Reset to the first LED
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	PORTB = led_state; // Update LED state on PORTB
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	88 bb       	out	0x18, r24	; 24
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

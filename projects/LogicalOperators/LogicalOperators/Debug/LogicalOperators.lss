
LogicalOperators.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000801  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  00000a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000303  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000240  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define BLINK 250

int main(void)
{
    // Set PORTC as output
    DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20

    while (1)
    {
        // Turn on all LEDs
        PORTC = 0xFF;
  70:	9f ef       	ldi	r25, 0xFF	; 255
  72:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	2f eb       	ldi	r18, 0xBF	; 191
  76:	37 e2       	ldi	r19, 0x27	; 39
  78:	89 e0       	ldi	r24, 0x09	; 9
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	30 40       	sbci	r19, 0x00	; 0
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <main+0xe>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
        _delay_ms(BLINK);

        // Turn off all LEDs
        PORTC = 0x00;
  86:	15 ba       	out	0x15, r1	; 21
  88:	2f eb       	ldi	r18, 0xBF	; 191
  8a:	37 e2       	ldi	r19, 0x27	; 39
  8c:	89 e0       	ldi	r24, 0x09	; 9
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x22>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
        _delay_ms(BLINK);

        // Toggle all LEDs
        PORTC ^= 0xFF;
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 95       	com	r24
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	2f eb       	ldi	r18, 0xBF	; 191
  a2:	37 e2       	ldi	r19, 0x27	; 39
  a4:	89 e0       	ldi	r24, 0x09	; 9
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
        _delay_ms(BLINK);

        // Turn on alternate LEDs using OR-Gatter
        PORTC |= 0x55;
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	85 65       	ori	r24, 0x55	; 85
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	2f eb       	ldi	r18, 0xBF	; 191
  ba:	37 e2       	ldi	r19, 0x27	; 39
  bc:	89 e0       	ldi	r24, 0x09	; 9
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	30 40       	sbci	r19, 0x00	; 0
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x52>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x5c>
  c8:	00 00       	nop
        _delay_ms(BLINK);

        // Turn off alternate LEDs using AND-Gatter
        PORTC &= 0xAA;
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8a 7a       	andi	r24, 0xAA	; 170
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	2f eb       	ldi	r18, 0xBF	; 191
  d2:	37 e2       	ldi	r19, 0x27	; 39
  d4:	89 e0       	ldi	r24, 0x09	; 9
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x6a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x74>
  e0:	00 00       	nop
        _delay_ms(BLINK);

        // Toggle alternate LEDs using EXOR-Gatter
        PORTC ^= 0x55;
  e2:	25 b3       	in	r18, 0x15	; 21
  e4:	85 e5       	ldi	r24, 0x55	; 85
  e6:	82 27       	eor	r24, r18
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	2f eb       	ldi	r18, 0xBF	; 191
  ec:	37 e2       	ldi	r19, 0x27	; 39
  ee:	89 e0       	ldi	r24, 0x09	; 9
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x84>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x8e>
  fa:	00 00       	nop
        _delay_ms(BLINK);

        // Invert all LEDs
        PORTC =~ PORTC;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	80 95       	com	r24
 100:	85 bb       	out	0x15, r24	; 21
 102:	2f eb       	ldi	r18, 0xBF	; 191
 104:	37 e2       	ldi	r19, 0x27	; 39
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x9c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0xa6>
 112:	00 00       	nop
        _delay_ms(BLINK);

        // Turn on all LEDs using NAND-Gatter
        PORTC =~(PORTC & 0x00);
 114:	85 b3       	in	r24, 0x15	; 21
 116:	95 bb       	out	0x15, r25	; 21
 118:	9f eb       	ldi	r25, 0xBF	; 191
 11a:	27 e2       	ldi	r18, 0x27	; 39
 11c:	39 e0       	ldi	r19, 0x09	; 9
 11e:	91 50       	subi	r25, 0x01	; 1
 120:	20 40       	sbci	r18, 0x00	; 0
 122:	30 40       	sbci	r19, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0xb2>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xbc>
 128:	00 00       	nop
        _delay_ms(BLINK);

        // Turn off all LEDs using NOR-Gatter
        PORTC =~(PORTC | 0xFF);
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	15 ba       	out	0x15, r1	; 21
 12e:	8f eb       	ldi	r24, 0xBF	; 191
 130:	97 e2       	ldi	r25, 0x27	; 39
 132:	29 e0       	ldi	r18, 0x09	; 9
 134:	81 50       	subi	r24, 0x01	; 1
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	20 40       	sbci	r18, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0xc8>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xd2>
 13e:	00 00       	nop
 140:	97 cf       	rjmp	.-210    	; 0x70 <main+0x4>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>


TimerCounter5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000154  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ee  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056d  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000208  00000000  00000000  00000d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034f  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000012df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000131b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  74:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_6>:
#include <avr/interrupt.h>

volatile uint8_t counter = 0;

ISR(TIMER1_COMPA_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	counter++;
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <main>:

int main(void)
{
	DDRB |= (1 << PB0);		// set PB0 as output
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PB0);	// set PB0 high
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	88 bb       	out	0x18, r24	; 24
	
	// setup Timer/Counter 0
	TCCR1A |= (1 << WGM01);	// set CTC mode
  aa:	8f b5       	in	r24, 0x2f	; 47
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	8f bd       	out	0x2f, r24	; 47
	OCR1A = 59;				// set compare match value (59 for 1ms 12Mhz clock)
  b0:	8b e3       	ldi	r24, 0x3B	; 59
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	9b bd       	out	0x2b, r25	; 43
  b6:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);	// enable interrupt
  b8:	89 b7       	in	r24, 0x39	; 57
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	89 bf       	out	0x39, r24	; 57
	sei();
  be:	78 94       	sei
	TCCR1B |= (1 << CS01)|(1 << CS00);	// start timer with prescaler of 64
  c0:	8e b5       	in	r24, 0x2e	; 46
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	8e bd       	out	0x2e, r24	; 46
	
	while(1) 
	{
		if(counter > 100)
  c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ca:	85 36       	cpi	r24, 0x65	; 101
  cc:	e0 f3       	brcs	.-8      	; 0xc6 <main+0x28>
		{
			counter = 0;
  ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			PORTB ^= (1 << PB0);
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	89 27       	eor	r24, r25
  d8:	88 bb       	out	0x18, r24	; 24
  da:	f5 cf       	rjmp	.-22     	; 0xc6 <main+0x28>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>

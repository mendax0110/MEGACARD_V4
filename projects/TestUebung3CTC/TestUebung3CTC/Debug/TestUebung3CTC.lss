
TestUebung3CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079f  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061f  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000312  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a4  00000000  00000000  00001763  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001907  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  74:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:

volatile uint8_t OCR0Var = 0;
volatile uint8_t freqDiv = 0;

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	freqDiv++;
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if(freqDiv == 78)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	8e 34       	cpi	r24, 0x4E	; 78
  98:	31 f4       	brne	.+12     	; 0xa6 <__vector_19+0x2a>
	{
		PORTC ^= (1 << PB0)|(1 << PB1)|(1 << PB2)|(1 << PB3)|(1 << PB4)|(1 << PB5)|(1 << PB6)|(1 << PB7);
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 95       	com	r24
  9e:	85 bb       	out	0x15, r24	; 21
		
		freqDiv = 10;
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <init_Ports>:

void init_Ports()
{
	DDRC = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 bb       	out	0x14, r24	; 20
	DDRC |= (1 << PC7);		// inicator LED
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	84 bb       	out	0x14, r24	; 20
	
	DDRB |= (1 << PB3);		// output for signal
  bc:	87 b3       	in	r24, 0x17	; 23
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	87 bb       	out	0x17, r24	; 23
  c2:	08 95       	ret

000000c4 <init_timer0_ctc>:
}

void init_timer0_ctc()
{
	TCCR0 |= (1 << COM00)|(1 << WGM01)|(1 << CS02)|(1 << CS00);
  c4:	83 b7       	in	r24, 0x33	; 51
  c6:	8d 61       	ori	r24, 0x1D	; 29
  c8:	83 bf       	out	0x33, r24	; 51
	
	for(OCR0Var = 0; OCR0Var <= 78; OCR0Var++)
  ca:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <OCR0Var>
  ce:	32 c0       	rjmp	.+100    	; 0x134 <init_timer0_ctc+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e2       	ldi	r24, 0x2F	; 47
  d2:	95 e7       	ldi	r25, 0x75	; 117
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_timer0_ctc+0x10>
  d8:	00 c0       	rjmp	.+0      	; 0xda <init_timer0_ctc+0x16>
  da:	00 00       	nop
	{
		_delay_ms(10);
		PORTC ^= (1 << PC1);
  dc:	95 b3       	in	r25, 0x15	; 21
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	89 27       	eor	r24, r25
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	8f e2       	ldi	r24, 0x2F	; 47
  e6:	95 e7       	ldi	r25, 0x75	; 117
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <init_timer0_ctc+0x24>
  ec:	00 c0       	rjmp	.+0      	; 0xee <init_timer0_ctc+0x2a>
  ee:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC3);
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	89 27       	eor	r24, r25
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	8f e2       	ldi	r24, 0x2F	; 47
  fa:	95 e7       	ldi	r25, 0x75	; 117
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <init_timer0_ctc+0x38>
 100:	00 c0       	rjmp	.+0      	; 0x102 <init_timer0_ctc+0x3e>
 102:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC5);
 104:	95 b3       	in	r25, 0x15	; 21
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	89 27       	eor	r24, r25
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	8f e2       	ldi	r24, 0x2F	; 47
 10e:	95 e7       	ldi	r25, 0x75	; 117
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <init_timer0_ctc+0x4c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <init_timer0_ctc+0x52>
 116:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC7);
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	80 58       	subi	r24, 0x80	; 128
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	8f e2       	ldi	r24, 0x2F	; 47
 120:	95 e7       	ldi	r25, 0x75	; 117
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <init_timer0_ctc+0x5e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <init_timer0_ctc+0x64>
 128:	00 00       	nop

void init_timer0_ctc()
{
	TCCR0 |= (1 << COM00)|(1 << WGM01)|(1 << CS02)|(1 << CS00);
	
	for(OCR0Var = 0; OCR0Var <= 78; OCR0Var++)
 12a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <OCR0Var>
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <OCR0Var>
 134:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <OCR0Var>
 138:	8f 34       	cpi	r24, 0x4F	; 79
 13a:	50 f2       	brcs	.-108    	; 0xd0 <init_timer0_ctc+0xc>
		_delay_ms(10);
		PORTC ^= (1 << PC7);
		_delay_ms(10);
	}
	
	OCR0 = OCR0Var; // OCR = (FCPU/2*256*FOUT)+1
 13c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <OCR0Var>
 140:	8c bf       	out	0x3c, r24	; 60
	// FOUT = (FCPU/2*256*(OCR+1)
	
	TCNT0 = 0;
 142:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << OCIE0);
 144:	89 b7       	in	r24, 0x39	; 57
 146:	82 60       	ori	r24, 0x02	; 2
 148:	89 bf       	out	0x39, r24	; 57
 14a:	08 95       	ret

0000014c <main>:
}

int main(void)
{
	cli();
 14c:	f8 94       	cli
	init_Ports();
 14e:	0e 94 59 00 	call	0xb2	; 0xb2 <init_Ports>
	init_timer0_ctc();
 152:	0e 94 62 00 	call	0xc4	; 0xc4 <init_timer0_ctc>
	sei();
 156:	78 94       	sei
 158:	ff cf       	rjmp	.-2      	; 0x158 <main+0xc>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>

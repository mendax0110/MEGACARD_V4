
Timer1Zeitmessung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000609  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000576  00000000  00000000  000007c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022e  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002f  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_5>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 00 	call	0xac	; 0xac <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_5>:
#include <avr/interrupt.h>
#include <avr/portpins.h>
#include <util/delay.h>

ISR(TIMER1_CAPT_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
	
}
  76:	0f 90       	pop	r0
  78:	0f be       	out	0x3f, r0	; 63
  7a:	0f 90       	pop	r0
  7c:	1f 90       	pop	r1
  7e:	18 95       	reti

00000080 <initPorts>:

void initPorts()
{
	DDRC |= 0xFF;	// portc output
  80:	84 b3       	in	r24, 0x14	; 20
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;	// all led dark
  86:	85 bb       	out	0x15, r24	; 21
		
	DDRA &= ~(1 << PA0);	// for S0
  88:	8a b3       	in	r24, 0x1a	; 26
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0);	// for S0
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	81 60       	ori	r24, 0x01	; 1
  92:	8b bb       	out	0x1b, r24	; 27
	
	DDRD &= ~(1 << PD6);	// ICP Input Capture
  94:	81 b3       	in	r24, 0x11	; 17
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1 << PD6);	// Hi-Z, cuz connected to PA0 (Pull up)
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	08 95       	ret

000000a2 <initTimer1>:
}

void initTimer1()
{
	TCCR1A = 0x00;						// normal mode
  a2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << ICNC1)|(1 << CS11);	// prescaler 8bit, noise canceller -> 1.5Mhz -> 0.66us -> Zeiteinheit	
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	82 68       	ori	r24, 0x82	; 130
  a8:	8e bd       	out	0x2e, r24	; 46
  aa:	08 95       	ret

000000ac <main>:
}

int main(void)
{
	cli();
  ac:	f8 94       	cli
	initPorts();
  ae:	0e 94 40 00 	call	0x80	; 0x80 <initPorts>
	initTimer1();
  b2:	0e 94 51 00 	call	0xa2	; 0xa2 <initTimer1>
	sei();
  b6:	78 94       	sei
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0xc>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>

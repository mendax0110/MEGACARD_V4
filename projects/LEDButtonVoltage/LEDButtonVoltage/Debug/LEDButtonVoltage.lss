
LEDButtonVoltage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000021c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068c  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b6  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  74:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:
volatile uint8_t button_pressed = 0;	// flag for the button
volatile uint16_t voltage = 0;		// voltage value

// ISR for the button
ISR(INT1_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
    // check button pressed
    if(!(PIND & (1 << BUTTON_1)))
  88:	83 99       	sbic	0x10, 3	; 16
  8a:	03 c0       	rjmp	.+6      	; 0x92 <__vector_2+0x16>
    {
        // set flag
        button_pressed = 1;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <button_pressed>
    }
}
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <__vector_14>:

ISR(ADC_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
    // read the voltage
    voltage = (ADCL | (ADCH << 8));
  ae:	24 b1       	in	r18, 0x04	; 4
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	98 2f       	mov	r25, r24
  b6:	88 27       	eor	r24, r24
  b8:	82 2b       	or	r24, r18
  ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	2f 91       	pop	r18
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <init_interrupt>:

void init_interrupt()
{
    // enable interrupts
    GICR |= (1 << INT1);
  d2:	8b b7       	in	r24, 0x3b	; 59
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8b bf       	out	0x3b, r24	; 59
    MCUCR |= (1 << ISC11);
  d8:	85 b7       	in	r24, 0x35	; 53
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	85 bf       	out	0x35, r24	; 53

    // enable global interrupts
    sei();
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <init_ports>:
}

void init_ports()
{
    // set the led pins as output
    DDRC |= (1 << LED_1) | (1 << LED_2) | (1 << LED_3) | (1 << LED_4);
  e2:	84 b3       	in	r24, 0x14	; 20
  e4:	8f 60       	ori	r24, 0x0F	; 15
  e6:	84 bb       	out	0x14, r24	; 20

    // set button pin as input
    DDRD &= ~(1 << BUTTON_1);
  e8:	81 b3       	in	r24, 0x11	; 17
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1 << BUTTON_1);
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	82 bb       	out	0x12, r24	; 18

    // set voltage pin as input
    DDRB &= ~(1 << VOLTAGE_PIN);
  f4:	87 b3       	in	r24, 0x17	; 23
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	08 95       	ret

000000fc <init_adc>:
}

void init_adc()
{
    // ADC voltage reference
    ADMUX |= (1 << REFS0);
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	87 b9       	out	0x07, r24	; 7

    // ADC prescaler
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 102:	86 b1       	in	r24, 0x06	; 6
 104:	87 60       	ori	r24, 0x07	; 7
 106:	86 b9       	out	0x06, r24	; 6

    // enable ADC
    ADCSRA |= (1 << ADIE) | (1 << ADEN);
 108:	86 b1       	in	r24, 0x06	; 6
 10a:	88 68       	ori	r24, 0x88	; 136
 10c:	86 b9       	out	0x06, r24	; 6

    // start ADC
    ADCSRA |= (1 << ADSC);
 10e:	86 b1       	in	r24, 0x06	; 6
 110:	80 64       	ori	r24, 0x40	; 64
 112:	86 b9       	out	0x06, r24	; 6

    // start ADC conversion
    ADCSRA |= (1 << ADSC);
 114:	86 b1       	in	r24, 0x06	; 6
 116:	80 64       	ori	r24, 0x40	; 64
 118:	86 b9       	out	0x06, r24	; 6
 11a:	08 95       	ret

0000011c <main>:
}

int main(void)
{
    init_ports();
 11c:	0e 94 71 00 	call	0xe2	; 0xe2 <init_ports>
    init_interrupt();
 120:	0e 94 69 00 	call	0xd2	; 0xd2 <init_interrupt>
    init_adc();
 124:	0e 94 7e 00 	call	0xfc	; 0xfc <init_adc>

    // set sleep mode
    set_sleep_mode(SLEEP_MODE_IDLE);
 128:	85 b7       	in	r24, 0x35	; 53
 12a:	8f 74       	andi	r24, 0x4F	; 79
 12c:	85 bf       	out	0x35, r24	; 53

    while(1)
    {
        // enter sleep mode
        sleep_mode();
 12e:	85 b7       	in	r24, 0x35	; 53
 130:	80 64       	ori	r24, 0x40	; 64
 132:	85 bf       	out	0x35, r24	; 53
 134:	88 95       	sleep
 136:	85 b7       	in	r24, 0x35	; 53
 138:	8f 7b       	andi	r24, 0xBF	; 191
 13a:	85 bf       	out	0x35, r24	; 53

        // check if button is pressed
        if(button_pressed)
 13c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <button_pressed>
 140:	88 23       	and	r24, r24
 142:	69 f0       	breq	.+26     	; 0x15e <main+0x42>
        {
           led_counter++;
 144:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <led_counter>
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <led_counter>

            // check if led counter is greater than 4
            if(led_counter > 3)
 14e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <led_counter>
 152:	84 30       	cpi	r24, 0x04	; 4
 154:	10 f0       	brcs	.+4      	; 0x15a <main+0x3e>
            {
                led_counter = 0;
 156:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <led_counter>
            }
            
            button_pressed = 0;
 15a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <button_pressed>
        }

        // check if voltage is greater than threshold
        if(voltage > VOLTAGE_THRESHOLD)
 15e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 162:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 166:	85 36       	cpi	r24, 0x65	; 101
 168:	91 05       	cpc	r25, r1
 16a:	68 f0       	brcs	.+26     	; 0x186 <main+0x6a>
        {
            // turn on led
            PORTC |= (1 << led_counter);
 16c:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <led_counter>
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <main+0x5e>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	2a 95       	dec	r18
 17c:	e2 f7       	brpl	.-8      	; 0x176 <main+0x5a>
 17e:	95 b3       	in	r25, 0x15	; 21
 180:	89 2b       	or	r24, r25
 182:	85 bb       	out	0x15, r24	; 21
 184:	d4 cf       	rjmp	.-88     	; 0x12e <main+0x12>
        }
        else
        {
            // turn off led
            PORTC &= ~(1 << led_counter);
 186:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <led_counter>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <main+0x78>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	2a 95       	dec	r18
 196:	e2 f7       	brpl	.-8      	; 0x190 <main+0x74>
 198:	80 95       	com	r24
 19a:	90 95       	com	r25
 19c:	95 b3       	in	r25, 0x15	; 21
 19e:	89 23       	and	r24, r25
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	c5 cf       	rjmp	.-118    	; 0x12e <main+0x12>

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>

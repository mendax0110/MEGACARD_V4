
PWMFrequency.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000244  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009cc  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000724  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058e  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043f  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f1  00000000  00000000  00001f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_19>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  7a:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_ports>:
#include <avr/io.h>
#include <util/delay.h>

void init_ports(void)
{
	DDRB |= (1 << PB3);     // set PB3 as ouput
  82:	87 b3       	in	r24, 0x17	; 23
  84:	88 60       	ori	r24, 0x08	; 8
  86:	87 bb       	out	0x17, r24	; 23
	//DDRC |= (1 << PC7);
	DDRC = 0xFF;    // set all pins of PORTB as output
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 bb       	out	0x14, r24	; 20
  8c:	08 95       	ret

0000008e <init_timer0_pwm>:
}

void init_timer0_pwm(void)
{
	TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01); // COM = non inverting, fast pwm, prescaler
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	8a 66       	ori	r24, 0x6A	; 106
  92:	83 bf       	out	0x33, r24	; 51
	OCR0 = 148; // set PWM duty cycle to 58 % ( 148/255)
  94:	84 e9       	ldi	r24, 0x94	; 148
  96:	8c bf       	out	0x3c, r24	; 60
  98:	08 95       	ret

0000009a <change_pattern>:
 */ 

#include "ledControl.h"

void change_pattern(int* pattern, int* direction)
{
  9a:	fc 01       	movw	r30, r24
	if (*direction == 1)
  9c:	db 01       	movw	r26, r22
  9e:	8d 91       	ld	r24, X+
  a0:	9c 91       	ld	r25, X
  a2:	11 97       	sbiw	r26, 0x01	; 1
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	71 f4       	brne	.+28     	; 0xc4 <change_pattern+0x2a>
	{
		(*pattern)++;
  a8:	80 81       	ld	r24, Z
  aa:	91 81       	ldd	r25, Z+1	; 0x01
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	91 83       	std	Z+1, r25	; 0x01
  b0:	80 83       	st	Z, r24
		if (*pattern > 3)
  b2:	04 97       	sbiw	r24, 0x04	; 4
  b4:	bc f0       	brlt	.+46     	; 0xe4 <change_pattern+0x4a>
		{
			*pattern = 3;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	91 83       	std	Z+1, r25	; 0x01
  bc:	80 83       	st	Z, r24
			*direction = 0;
  be:	1d 92       	st	X+, r1
  c0:	1c 92       	st	X, r1
  c2:	08 95       	ret
		}
	}
	else
	{
		(*pattern)--;
  c4:	20 81       	ld	r18, Z
  c6:	31 81       	ldd	r19, Z+1	; 0x01
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	31 09       	sbc	r19, r1
  cc:	31 83       	std	Z+1, r19	; 0x01
  ce:	20 83       	st	Z, r18
		if (*pattern < 1)
  d0:	12 16       	cp	r1, r18
  d2:	13 06       	cpc	r1, r19
  d4:	3c f0       	brlt	.+14     	; 0xe4 <change_pattern+0x4a>
		{
			*pattern = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	91 83       	std	Z+1, r25	; 0x01
  dc:	80 83       	st	Z, r24
			*direction = 1;
  de:	fb 01       	movw	r30, r22
  e0:	91 83       	std	Z+1, r25	; 0x01
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <led_pattern_1>:
int pattern = 1;
int direction = 1;

void led_pattern_1()
{
	for(int i=0; i<8; i++)
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	1b c0       	rjmp	.+54     	; 0x122 <led_pattern_1+0x3c>
	{
		PORTC |= (1<<i);   // turn on pin i
  ec:	45 b3       	in	r20, 0x15	; 21
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <led_pattern_1+0x14>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <led_pattern_1+0x10>
  fe:	94 2f       	mov	r25, r20
 100:	98 2b       	or	r25, r24
 102:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	4f e7       	ldi	r20, 0x7F	; 127
 106:	59 ea       	ldi	r21, 0xA9	; 169
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	41 50       	subi	r20, 0x01	; 1
 10c:	50 40       	sbci	r21, 0x00	; 0
 10e:	60 40       	sbci	r22, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <led_pattern_1+0x24>
 112:	00 c0       	rjmp	.+0      	; 0x114 <led_pattern_1+0x2e>
 114:	00 00       	nop
		_delay_ms(100);     // delay for 100ms
		PORTC &= ~(1<<i);  // turn off pin i
 116:	95 b3       	in	r25, 0x15	; 21
 118:	80 95       	com	r24
 11a:	89 23       	and	r24, r25
 11c:	85 bb       	out	0x15, r24	; 21
int pattern = 1;
int direction = 1;

void led_pattern_1()
{
	for(int i=0; i<8; i++)
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	28 30       	cpi	r18, 0x08	; 8
 124:	31 05       	cpc	r19, r1
 126:	14 f3       	brlt	.-60     	; 0xec <led_pattern_1+0x6>
	{
		PORTC |= (1<<i);   // turn on pin i
		_delay_ms(100);     // delay for 100ms
		PORTC &= ~(1<<i);  // turn off pin i
	}
}
 128:	08 95       	ret

0000012a <led_pattern_2>:

void led_pattern_2()
{
	for(int i=7; i>=0; i--)
 12a:	27 e0       	ldi	r18, 0x07	; 7
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	1b c0       	rjmp	.+54     	; 0x166 <led_pattern_2+0x3c>
	{
		PORTC |= (1<<i);   // turn on pin i
 130:	45 b3       	in	r20, 0x15	; 21
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 2e       	mov	r0, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <led_pattern_2+0x14>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <led_pattern_2+0x10>
 142:	94 2f       	mov	r25, r20
 144:	98 2b       	or	r25, r24
 146:	95 bb       	out	0x15, r25	; 21
 148:	4f e7       	ldi	r20, 0x7F	; 127
 14a:	59 ea       	ldi	r21, 0xA9	; 169
 14c:	63 e0       	ldi	r22, 0x03	; 3
 14e:	41 50       	subi	r20, 0x01	; 1
 150:	50 40       	sbci	r21, 0x00	; 0
 152:	60 40       	sbci	r22, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <led_pattern_2+0x24>
 156:	00 c0       	rjmp	.+0      	; 0x158 <led_pattern_2+0x2e>
 158:	00 00       	nop
		_delay_ms(100);     // delay for 100ms
		PORTC &= ~(1<<i);  // turn off pin i
 15a:	95 b3       	in	r25, 0x15	; 21
 15c:	80 95       	com	r24
 15e:	89 23       	and	r24, r25
 160:	85 bb       	out	0x15, r24	; 21
	}
}

void led_pattern_2()
{
	for(int i=7; i>=0; i--)
 162:	21 50       	subi	r18, 0x01	; 1
 164:	31 09       	sbc	r19, r1
 166:	33 23       	and	r19, r19
 168:	1c f7       	brge	.-58     	; 0x130 <led_pattern_2+0x6>
	{
		PORTC |= (1<<i);   // turn on pin i
		_delay_ms(100);     // delay for 100ms
		PORTC &= ~(1<<i);  // turn off pin i
	}
}
 16a:	08 95       	ret

0000016c <led_pattern_3>:

void led_pattern_3()
{
	for(int i=0; i<4; i++)
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	2d c0       	rjmp	.+90     	; 0x1cc <led_pattern_3+0x60>
	{
		PORTC |= (1<<i);   // turn on pin i
 172:	65 b3       	in	r22, 0x15	; 21
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 2e       	mov	r0, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <led_pattern_3+0x16>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <led_pattern_3+0x12>
 186:	56 2f       	mov	r21, r22
 188:	54 2b       	or	r21, r20
 18a:	55 bb       	out	0x15, r21	; 21
		PORTC |= (1<<(7-i));   // turn on pin (7-i)
 18c:	55 b3       	in	r21, 0x15	; 21
 18e:	67 e0       	ldi	r22, 0x07	; 7
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	62 1b       	sub	r22, r18
 194:	73 0b       	sbc	r23, r19
 196:	02 c0       	rjmp	.+4      	; 0x19c <led_pattern_3+0x30>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <led_pattern_3+0x2c>
 1a0:	95 2f       	mov	r25, r21
 1a2:	98 2b       	or	r25, r24
 1a4:	95 bb       	out	0x15, r25	; 21
 1a6:	6f e7       	ldi	r22, 0x7F	; 127
 1a8:	79 ea       	ldi	r23, 0xA9	; 169
 1aa:	e3 e0       	ldi	r30, 0x03	; 3
 1ac:	61 50       	subi	r22, 0x01	; 1
 1ae:	70 40       	sbci	r23, 0x00	; 0
 1b0:	e0 40       	sbci	r30, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <led_pattern_3+0x40>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <led_pattern_3+0x4a>
 1b6:	00 00       	nop
		_delay_ms(100);     // delay for 100ms
		PORTC &= ~(1<<i);  // turn off pin i
 1b8:	95 b3       	in	r25, 0x15	; 21
 1ba:	40 95       	com	r20
 1bc:	49 23       	and	r20, r25
 1be:	45 bb       	out	0x15, r20	; 21
		PORTC &= ~(1<<(7-i));  // turn off pin (7-i)
 1c0:	95 b3       	in	r25, 0x15	; 21
 1c2:	80 95       	com	r24
 1c4:	89 23       	and	r24, r25
 1c6:	85 bb       	out	0x15, r24	; 21
	}
}

void led_pattern_3()
{
	for(int i=0; i<4; i++)
 1c8:	2f 5f       	subi	r18, 0xFF	; 255
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	24 30       	cpi	r18, 0x04	; 4
 1ce:	31 05       	cpc	r19, r1
 1d0:	84 f2       	brlt	.-96     	; 0x172 <led_pattern_3+0x6>
		PORTC |= (1<<(7-i));   // turn on pin (7-i)
		_delay_ms(100);     // delay for 100ms
		PORTC &= ~(1<<i);  // turn off pin i
		PORTC &= ~(1<<(7-i));  // turn off pin (7-i)
	}
 1d2:	08 95       	ret

000001d4 <__vector_19>:
#include "ledPatterns/ledPatterns.h"
#include "ledControl/ledControl.h"
#include "InitFunctions/InitFunctions.h"

ISR(TIMER0_COMP_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
	// empty
}
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <main>:

int main(void)
{	
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <main+0x6>
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <main+0x8>
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
	cli();    // disable global interrupts
 1f4:	f8 94       	cli
	
	init_ports(); // call the InitFunctions
 1f6:	0e 94 41 00 	call	0x82	; 0x82 <init_ports>
	init_timer0_pwm();
 1fa:	0e 94 47 00 	call	0x8e	; 0x8e <init_timer0_pwm>
	sei();    // enable global interrupts
 1fe:	78 94       	sei

	int pattern = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
	int direction = 1;
 208:	9c 83       	std	Y+4, r25	; 0x04
 20a:	8b 83       	std	Y+3, r24	; 0x03

	while (1)
	{
		change_pattern(&pattern, &direction);
 20c:	be 01       	movw	r22, r28
 20e:	6d 5f       	subi	r22, 0xFD	; 253
 210:	7f 4f       	sbci	r23, 0xFF	; 255
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	0e 94 4d 00 	call	0x9a	; 0x9a <change_pattern>
		
		switch (pattern)
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	9a 81       	ldd	r25, Y+2	; 0x02
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	91 05       	cpc	r25, r1
 222:	41 f0       	breq	.+16     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	91 05       	cpc	r25, r1
 228:	41 f0       	breq	.+16     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	79 f7       	brne	.-34     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
		{
			case 1:
				led_pattern_1();
 22e:	0e 94 73 00 	call	0xe6	; 0xe6 <led_pattern_1>
				break;
 232:	ec cf       	rjmp	.-40     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
			case 2:
				led_pattern_2();
 234:	0e 94 95 00 	call	0x12a	; 0x12a <led_pattern_2>
				break;
 238:	e9 cf       	rjmp	.-46     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
			case 3:
				led_pattern_3();
 23a:	0e 94 b6 00 	call	0x16c	; 0x16c <led_pattern_3>
				break;
 23e:	e6 cf       	rjmp	.-52     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>

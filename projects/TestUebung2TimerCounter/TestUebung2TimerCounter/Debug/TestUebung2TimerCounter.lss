
TestUebung2TimerCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000122  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a9  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060e  00000000  00000000  000008e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  000015e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000166d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_9>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 88 00 	call	0x110	; 0x110 <main>
  7a:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_9>:
#include <util/delay.h>

volatile uint8_t TCNT0Var = 245;

ISR(TIMER0_OVF_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
	TCNT0 = TCNT0Var;
  8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  92:	82 bf       	out	0x32, r24	; 50
}
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <init_Ports>:

void init_Ports()
{
	TCCR0 &= ~(1 << WGM00);	// Normal Mode
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << WGM01);	
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM00)|(1 << CS01)|(1 << CS00);	// Toggle OC0
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	83 61       	ori	r24, 0x13	; 19
  b0:	83 bf       	out	0x33, r24	; 51
	
	TCNT0 = TCNT0Var;
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1 << TOIE0);
  b8:	89 b7       	in	r24, 0x39	; 57
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	89 bf       	out	0x39, r24	; 57
  be:	08 95       	ret

000000c0 <init_Timer0>:
}

void init_Timer0()
{
	DDRC = 0xFF;			// Output
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	84 bb       	out	0x14, r24	; 20
	PORTC ^= (1 << PC1);	// Indicator LED init timer0
  c4:	95 b3       	in	r25, 0x15	; 21
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	89 27       	eor	r24, r25
  ca:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);		// OC0 Ouput Toggle
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	87 bb       	out	0x17, r24	; 23
	
	for(TCNT0Var = 245; TCNT0Var >= 100; TCNT0Var--)
  d2:	85 ef       	ldi	r24, 0xF5	; 245
  d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	16 c0       	rjmp	.+44     	; 0x106 <init_Timer0+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f eb       	ldi	r18, 0xBF	; 191
  dc:	87 e2       	ldi	r24, 0x27	; 39
  de:	99 e0       	ldi	r25, 0x09	; 9
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <init_Timer0+0x20>
  e8:	00 c0       	rjmp	.+0      	; 0xea <init_Timer0+0x2a>
  ea:	00 00       	nop
	{
		_delay_ms(250);
		
		if(TCNT0Var >= 100)
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	84 36       	cpi	r24, 0x64	; 100
  f2:	20 f0       	brcs	.+8      	; 0xfc <init_Timer0+0x3c>
		{
			PORTC ^= (1 << PC0);	// Indicator LED init ISR Timer0_OVF_vect
  f4:	95 b3       	in	r25, 0x15	; 21
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	89 27       	eor	r24, r25
  fa:	85 bb       	out	0x15, r24	; 21
	DDRC = 0xFF;			// Output
	PORTC ^= (1 << PC1);	// Indicator LED init timer0
	
	DDRB |= (1 << PB3);		// OC0 Ouput Toggle
	
	for(TCNT0Var = 245; TCNT0Var >= 100; TCNT0Var--)
  fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 100:	81 50       	subi	r24, 0x01	; 1
 102:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 106:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	84 36       	cpi	r24, 0x64	; 100
 10c:	30 f7       	brcc	.-52     	; 0xda <init_Timer0+0x1a>
		if(TCNT0Var >= 100)
		{
			PORTC ^= (1 << PC0);	// Indicator LED init ISR Timer0_OVF_vect
		}
	}
}
 10e:	08 95       	ret

00000110 <main>:

int main(void)
{
    cli();
 110:	f8 94       	cli
	init_Ports();
 112:	0e 94 50 00 	call	0xa0	; 0xa0 <init_Ports>
	init_Timer0();
 116:	0e 94 60 00 	call	0xc0	; 0xc0 <init_Timer0>
	sei();
 11a:	78 94       	sei
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0xc>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>

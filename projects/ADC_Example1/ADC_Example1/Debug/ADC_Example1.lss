
ADC_Example1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000008e4  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006e  0080006e  00000986  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140b  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091e  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009bc  00000000  00000000  000027fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  000031bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  000034b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000145d  00000000  00000000  00003947  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004da4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  8a:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
  char D=0;

	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 19 04 	call	0x832	; 0x832 <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <initPorts>:

volatile uint8_t value = 0;

void initPorts()
{
	DDRA &= ~(1 << PA5);	// set with and neg because of voltage measurment -> potentiometer Megacard (inout)
 1e6:	8a b3       	in	r24, 0x1a	; 26
 1e8:	8f 7d       	andi	r24, 0xDF	; 223
 1ea:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1 << PA5);	// set high-z
 1ec:	8b b3       	in	r24, 0x1b	; 27
 1ee:	8f 7d       	andi	r24, 0xDF	; 223
 1f0:	8b bb       	out	0x1b, r24	; 27
	
	DDRC |= 0xFF;		// indicator LED
 1f2:	84 b3       	in	r24, 0x14	; 20
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7);	
 1f8:	85 b3       	in	r24, 0x15	; 21
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	85 bb       	out	0x15, r24	; 21
 1fe:	08 95       	ret

00000200 <initADC>:
}

void initADC()	// now without return type, later with return type  
{
	ADCSRA |= (1 << ADEN);	// enable ADC
 200:	86 b1       	in	r24, 0x06	; 6
 202:	80 68       	ori	r24, 0x80	; 128
 204:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADATE);	// Trigger Source on
 206:	86 b1       	in	r24, 0x06	; 6
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2);	// Prescaler 128 -> Teilung fck/128 -> clk for ADC = 93,75 kHz
 20c:	86 b1       	in	r24, 0x06	; 6
 20e:	87 60       	ori	r24, 0x07	; 7
 210:	86 b9       	out	0x06, r24	; 6
	
	SFIOR &= ~(1 << ADTS0)&~(1 << ADTS1)&~(1 << ADTS2); // Free running mode
 212:	80 b7       	in	r24, 0x30	; 48
 214:	8f 71       	andi	r24, 0x1F	; 31
 216:	80 bf       	out	0x30, r24	; 48
	
	ADMUX |= (1 << MUX0)|(1 << MUX2);	// Channel 5 set on on the multiplexer -> ADC Poti
 218:	87 b1       	in	r24, 0x07	; 7
 21a:	85 60       	ori	r24, 0x05	; 5
 21c:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << REFS0);	// external reference for voltage AVCC
 21e:	87 b1       	in	r24, 0x07	; 7
 220:	80 64       	ori	r24, 0x40	; 64
 222:	87 b9       	out	0x07, r24	; 7
	
	ADMUX |= (1 << ADLAR);	// presentation of bits in the ADC Data Register
 224:	87 b1       	in	r24, 0x07	; 7
 226:	80 62       	ori	r24, 0x20	; 32
 228:	87 b9       	out	0x07, r24	; 7
 22a:	08 95       	ret

0000022c <main>:
}

int main(void)
{
	cli();
 22c:	f8 94       	cli
    initPorts();
 22e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <initPorts>
	initADC();
 232:	0e 94 00 01 	call	0x200	; 0x200 <initADC>
	lcd_init();
 236:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	sei();
 23a:	78 94       	sei
	
	ADCSRA |= (1 << ADSC); // Start the ADC Measurment one time, for free running mode!
 23c:	86 b1       	in	r24, 0x06	; 6
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	86 b9       	out	0x06, r24	; 6
 242:	18 c0       	rjmp	.+48     	; 0x274 <main+0x48>
	
    while (1) 
    {
		while((ADCSRA & (1 << ADIF)))
		{
			value = ADCH;
 244:	85 b1       	in	r24, 0x05	; 5
 246:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
			PORTC = value;
 24a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 24e:	85 bb       	out	0x15, r24	; 21
			
			lcd_pos(0,0);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
			printf("ADC-VALUE: %d" ,value);
 258:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 25c:	1f 92       	push	r1
 25e:	8f 93       	push	r24
 260:	80 e6       	ldi	r24, 0x60	; 96
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	9f 93       	push	r25
 266:	8f 93       	push	r24
 268:	0e 94 22 04 	call	0x844	; 0x844 <tfp_printf>
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
	
	ADCSRA |= (1 << ADSC); // Start the ADC Measurment one time, for free running mode!
	
    while (1) 
    {
		while((ADCSRA & (1 << ADIF)))
 274:	34 99       	sbic	0x06, 4	; 6
 276:	e6 cf       	rjmp	.-52     	; 0x244 <main+0x18>
 278:	fd cf       	rjmp	.-6      	; 0x274 <main+0x48>

0000027a <uli2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 27a:	4f 92       	push	r4
 27c:	5f 92       	push	r5
 27e:	6f 92       	push	r6
 280:	7f 92       	push	r7
 282:	8f 92       	push	r8
 284:	9f 92       	push	r9
 286:	af 92       	push	r10
 288:	bf 92       	push	r11
 28a:	cf 92       	push	r12
 28c:	df 92       	push	r13
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	f6 2e       	mov	r15, r22
 29c:	e7 2e       	mov	r14, r23
 29e:	78 2e       	mov	r7, r24
 2a0:	69 2e       	mov	r6, r25
 2a2:	6a 01       	movw	r12, r20
 2a4:	29 01       	movw	r4, r18
 2a6:	c1 e0       	ldi	r28, 0x01	; 1
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <uli2a+0x42>
 2ac:	ce 01       	movw	r24, r28
 2ae:	8c 9d       	mul	r24, r12
 2b0:	e0 01       	movw	r28, r0
 2b2:	8d 9d       	mul	r24, r13
 2b4:	d0 0d       	add	r29, r0
 2b6:	9c 9d       	mul	r25, r12
 2b8:	d0 0d       	add	r29, r0
 2ba:	11 24       	eor	r1, r1
 2bc:	4e 01       	movw	r8, r28
 2be:	a1 2c       	mov	r10, r1
 2c0:	b1 2c       	mov	r11, r1
 2c2:	6f 2d       	mov	r22, r15
 2c4:	7e 2d       	mov	r23, r14
 2c6:	87 2d       	mov	r24, r7
 2c8:	96 2d       	mov	r25, r6
 2ca:	a5 01       	movw	r20, r10
 2cc:	94 01       	movw	r18, r8
 2ce:	0e 94 4e 04 	call	0x89c	; 0x89c <__udivmodsi4>
 2d2:	c6 01       	movw	r24, r12
 2d4:	a0 e0       	ldi	r26, 0x00	; 0
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	28 17       	cp	r18, r24
 2da:	39 07       	cpc	r19, r25
 2dc:	4a 07       	cpc	r20, r26
 2de:	5b 07       	cpc	r21, r27
 2e0:	28 f7       	brcc	.-54     	; 0x2ac <uli2a+0x32>
 2e2:	81 2c       	mov	r8, r1
 2e4:	91 2c       	mov	r9, r1
 2e6:	2f c0       	rjmp	.+94     	; 0x346 <uli2a+0xcc>
 2e8:	9e 01       	movw	r18, r28
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	6f 2d       	mov	r22, r15
 2f0:	7e 2d       	mov	r23, r14
 2f2:	87 2d       	mov	r24, r7
 2f4:	96 2d       	mov	r25, r6
 2f6:	0e 94 4e 04 	call	0x89c	; 0x89c <__udivmodsi4>
 2fa:	e2 2f       	mov	r30, r18
 2fc:	f3 2f       	mov	r31, r19
 2fe:	f6 2e       	mov	r15, r22
 300:	e7 2e       	mov	r14, r23
 302:	78 2e       	mov	r7, r24
 304:	69 2e       	mov	r6, r25
 306:	ce 01       	movw	r24, r28
 308:	b6 01       	movw	r22, r12
 30a:	0e 94 3a 04 	call	0x874	; 0x874 <__udivmodhi4>
 30e:	eb 01       	movw	r28, r22
 310:	81 14       	cp	r8, r1
 312:	91 04       	cpc	r9, r1
 314:	29 f4       	brne	.+10     	; 0x320 <uli2a+0xa6>
 316:	1e 16       	cp	r1, r30
 318:	1f 06       	cpc	r1, r31
 31a:	14 f0       	brlt	.+4      	; 0x320 <uli2a+0xa6>
 31c:	20 97       	sbiw	r28, 0x00	; 0
 31e:	99 f4       	brne	.+38     	; 0x346 <uli2a+0xcc>
 320:	c8 01       	movw	r24, r16
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	3a 97       	sbiw	r30, 0x0a	; 10
 326:	2c f0       	brlt	.+10     	; 0x332 <uli2a+0xb8>
 328:	41 14       	cp	r4, r1
 32a:	51 04       	cpc	r5, r1
 32c:	21 f0       	breq	.+8      	; 0x336 <uli2a+0xbc>
 32e:	37 e3       	ldi	r19, 0x37	; 55
 330:	03 c0       	rjmp	.+6      	; 0x338 <uli2a+0xbe>
 332:	30 e3       	ldi	r19, 0x30	; 48
 334:	01 c0       	rjmp	.+2      	; 0x338 <uli2a+0xbe>
 336:	37 e5       	ldi	r19, 0x57	; 87
 338:	23 0f       	add	r18, r19
 33a:	f8 01       	movw	r30, r16
 33c:	20 83       	st	Z, r18
 33e:	ff ef       	ldi	r31, 0xFF	; 255
 340:	8f 1a       	sub	r8, r31
 342:	9f 0a       	sbc	r9, r31
 344:	8c 01       	movw	r16, r24
 346:	20 97       	sbiw	r28, 0x00	; 0
 348:	79 f6       	brne	.-98     	; 0x2e8 <uli2a+0x6e>
 34a:	f8 01       	movw	r30, r16
 34c:	10 82       	st	Z, r1
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	bf 90       	pop	r11
 360:	af 90       	pop	r10
 362:	9f 90       	pop	r9
 364:	8f 90       	pop	r8
 366:	7f 90       	pop	r7
 368:	6f 90       	pop	r6
 36a:	5f 90       	pop	r5
 36c:	4f 90       	pop	r4
 36e:	08 95       	ret

00000370 <li2a>:
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	99 23       	and	r25, r25
 376:	64 f4       	brge	.+24     	; 0x390 <li2a+0x20>
 378:	90 95       	com	r25
 37a:	80 95       	com	r24
 37c:	70 95       	com	r23
 37e:	61 95       	neg	r22
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	8f 4f       	sbci	r24, 0xFF	; 255
 384:	9f 4f       	sbci	r25, 0xFF	; 255
 386:	2d e2       	ldi	r18, 0x2D	; 45
 388:	fa 01       	movw	r30, r20
 38a:	20 83       	st	Z, r18
 38c:	4f 5f       	subi	r20, 0xFF	; 255
 38e:	5f 4f       	sbci	r21, 0xFF	; 255
 390:	8a 01       	movw	r16, r20
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	4a e0       	ldi	r20, 0x0A	; 10
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	0e 94 3d 01 	call	0x27a	; 0x27a <uli2a>
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	08 95       	ret

000003a4 <ui2a>:
 3a4:	8f 92       	push	r8
 3a6:	9f 92       	push	r9
 3a8:	af 92       	push	r10
 3aa:	bf 92       	push	r11
 3ac:	cf 92       	push	r12
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	c8 2f       	mov	r28, r24
 3be:	d9 2f       	mov	r29, r25
 3c0:	8b 01       	movw	r16, r22
 3c2:	6a 01       	movw	r12, r20
 3c4:	79 01       	movw	r14, r18
 3c6:	e1 e0       	ldi	r30, 0x01	; 1
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <ui2a+0x38>
 3cc:	cf 01       	movw	r24, r30
 3ce:	80 9f       	mul	r24, r16
 3d0:	f0 01       	movw	r30, r0
 3d2:	81 9f       	mul	r24, r17
 3d4:	f0 0d       	add	r31, r0
 3d6:	90 9f       	mul	r25, r16
 3d8:	f0 0d       	add	r31, r0
 3da:	11 24       	eor	r1, r1
 3dc:	8c 2f       	mov	r24, r28
 3de:	9d 2f       	mov	r25, r29
 3e0:	bf 01       	movw	r22, r30
 3e2:	0e 94 3a 04 	call	0x874	; 0x874 <__udivmodhi4>
 3e6:	60 17       	cp	r22, r16
 3e8:	71 07       	cpc	r23, r17
 3ea:	80 f7       	brcc	.-32     	; 0x3cc <ui2a+0x28>
 3ec:	a1 2c       	mov	r10, r1
 3ee:	b1 2c       	mov	r11, r1
 3f0:	2c c0       	rjmp	.+88     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 3f2:	8c 2f       	mov	r24, r28
 3f4:	9d 2f       	mov	r25, r29
 3f6:	bf 01       	movw	r22, r30
 3f8:	0e 94 3a 04 	call	0x874	; 0x874 <__udivmodhi4>
 3fc:	36 2f       	mov	r19, r22
 3fe:	86 2e       	mov	r8, r22
 400:	97 2e       	mov	r9, r23
 402:	c8 2f       	mov	r28, r24
 404:	d9 2f       	mov	r29, r25
 406:	cf 01       	movw	r24, r30
 408:	b8 01       	movw	r22, r16
 40a:	0e 94 3a 04 	call	0x874	; 0x874 <__udivmodhi4>
 40e:	fb 01       	movw	r30, r22
 410:	a1 14       	cp	r10, r1
 412:	b1 04       	cpc	r11, r1
 414:	29 f4       	brne	.+10     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 416:	18 14       	cp	r1, r8
 418:	19 04       	cpc	r1, r9
 41a:	14 f0       	brlt	.+4      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 41c:	30 97       	sbiw	r30, 0x00	; 0
 41e:	a9 f4       	brne	.+42     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 420:	c7 01       	movw	r24, r14
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	aa e0       	ldi	r26, 0x0A	; 10
 426:	8a 16       	cp	r8, r26
 428:	91 04       	cpc	r9, r1
 42a:	2c f0       	brlt	.+10     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 42c:	c1 14       	cp	r12, r1
 42e:	d1 04       	cpc	r13, r1
 430:	21 f0       	breq	.+8      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
 432:	27 e3       	ldi	r18, 0x37	; 55
 434:	03 c0       	rjmp	.+6      	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 436:	20 e3       	ldi	r18, 0x30	; 48
 438:	01 c0       	rjmp	.+2      	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 43a:	27 e5       	ldi	r18, 0x57	; 87
 43c:	32 0f       	add	r19, r18
 43e:	d7 01       	movw	r26, r14
 440:	3c 93       	st	X, r19
 442:	bf ef       	ldi	r27, 0xFF	; 255
 444:	ab 1a       	sub	r10, r27
 446:	bb 0a       	sbc	r11, r27
 448:	7c 01       	movw	r14, r24
 44a:	30 97       	sbiw	r30, 0x00	; 0
 44c:	91 f6       	brne	.-92     	; 0x3f2 <ui2a+0x4e>
 44e:	f7 01       	movw	r30, r14
 450:	10 82       	st	Z, r1
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	ff 90       	pop	r15
 45c:	ef 90       	pop	r14
 45e:	df 90       	pop	r13
 460:	cf 90       	pop	r12
 462:	bf 90       	pop	r11
 464:	af 90       	pop	r10
 466:	9f 90       	pop	r9
 468:	8f 90       	pop	r8
 46a:	08 95       	ret

0000046c <i2a>:
 46c:	9b 01       	movw	r18, r22
 46e:	99 23       	and	r25, r25
 470:	44 f4       	brge	.+16     	; 0x482 <i2a+0x16>
 472:	91 95       	neg	r25
 474:	81 95       	neg	r24
 476:	91 09       	sbc	r25, r1
 478:	4d e2       	ldi	r20, 0x2D	; 45
 47a:	fb 01       	movw	r30, r22
 47c:	40 83       	st	Z, r20
 47e:	2f 5f       	subi	r18, 0xFF	; 255
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	6a e0       	ldi	r22, 0x0A	; 10
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <ui2a>
 48e:	08 95       	ret

00000490 <a2d>:
 490:	90 ed       	ldi	r25, 0xD0	; 208
 492:	98 0f       	add	r25, r24
 494:	9a 30       	cpi	r25, 0x0A	; 10
 496:	18 f4       	brcc	.+6      	; 0x49e <a2d+0xe>
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	c0 97       	sbiw	r24, 0x30	; 48
 49c:	08 95       	ret
 49e:	9f e9       	ldi	r25, 0x9F	; 159
 4a0:	98 0f       	add	r25, r24
 4a2:	96 30       	cpi	r25, 0x06	; 6
 4a4:	20 f4       	brcc	.+8      	; 0x4ae <a2d+0x1e>
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	87 55       	subi	r24, 0x57	; 87
 4aa:	91 09       	sbc	r25, r1
 4ac:	08 95       	ret
 4ae:	9f eb       	ldi	r25, 0xBF	; 191
 4b0:	98 0f       	add	r25, r24
 4b2:	96 30       	cpi	r25, 0x06	; 6
 4b4:	18 f4       	brcc	.+6      	; 0x4bc <a2d+0x2c>
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	c7 97       	sbiw	r24, 0x37	; 55
 4ba:	08 95       	ret
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	9f ef       	ldi	r25, 0xFF	; 255
 4c0:	08 95       	ret

000004c2 <a2i>:
 4c2:	9f 92       	push	r9
 4c4:	af 92       	push	r10
 4c6:	bf 92       	push	r11
 4c8:	cf 92       	push	r12
 4ca:	df 92       	push	r13
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	98 2e       	mov	r9, r24
 4da:	5b 01       	movw	r10, r22
 4dc:	7a 01       	movw	r14, r20
 4de:	69 01       	movw	r12, r18
 4e0:	fb 01       	movw	r30, r22
 4e2:	c0 81       	ld	r28, Z
 4e4:	d1 81       	ldd	r29, Z+1	; 0x01
 4e6:	00 e0       	ldi	r16, 0x00	; 0
 4e8:	10 e0       	ldi	r17, 0x00	; 0
 4ea:	0f c0       	rjmp	.+30     	; 0x50a <a2i+0x48>
 4ec:	e8 16       	cp	r14, r24
 4ee:	f9 06       	cpc	r15, r25
 4f0:	8c f0       	brlt	.+34     	; 0x514 <a2i+0x52>
 4f2:	0e 9d       	mul	r16, r14
 4f4:	90 01       	movw	r18, r0
 4f6:	0f 9d       	mul	r16, r15
 4f8:	30 0d       	add	r19, r0
 4fa:	1e 9d       	mul	r17, r14
 4fc:	30 0d       	add	r19, r0
 4fe:	11 24       	eor	r1, r1
 500:	8c 01       	movw	r16, r24
 502:	02 0f       	add	r16, r18
 504:	13 1f       	adc	r17, r19
 506:	98 80       	ld	r9, Y
 508:	21 96       	adiw	r28, 0x01	; 1
 50a:	89 2d       	mov	r24, r9
 50c:	0e 94 48 02 	call	0x490	; 0x490 <a2d>
 510:	99 23       	and	r25, r25
 512:	64 f7       	brge	.-40     	; 0x4ec <a2i+0x2a>
 514:	f5 01       	movw	r30, r10
 516:	d1 83       	std	Z+1, r29	; 0x01
 518:	c0 83       	st	Z, r28
 51a:	f6 01       	movw	r30, r12
 51c:	11 83       	std	Z+1, r17	; 0x01
 51e:	00 83       	st	Z, r16
 520:	89 2d       	mov	r24, r9
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	0f 91       	pop	r16
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	df 90       	pop	r13
 530:	cf 90       	pop	r12
 532:	bf 90       	pop	r11
 534:	af 90       	pop	r10
 536:	9f 90       	pop	r9
 538:	08 95       	ret

0000053a <putchw>:
 53a:	bf 92       	push	r11
 53c:	cf 92       	push	r12
 53e:	df 92       	push	r13
 540:	ef 92       	push	r14
 542:	ff 92       	push	r15
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	6c 01       	movw	r12, r24
 54e:	7b 01       	movw	r14, r22
 550:	e8 01       	movw	r28, r16
 552:	22 23       	and	r18, r18
 554:	29 f0       	breq	.+10     	; 0x560 <putchw+0x26>
 556:	0f 2e       	mov	r0, r31
 558:	f0 e3       	ldi	r31, 0x30	; 48
 55a:	bf 2e       	mov	r11, r31
 55c:	f0 2d       	mov	r31, r0
 55e:	03 c0       	rjmp	.+6      	; 0x566 <putchw+0x2c>
 560:	68 94       	set
 562:	bb 24       	eor	r11, r11
 564:	b5 f8       	bld	r11, 5
 566:	fe 01       	movw	r30, r28
 568:	03 c0       	rjmp	.+6      	; 0x570 <putchw+0x36>
 56a:	41 50       	subi	r20, 0x01	; 1
 56c:	51 09       	sbc	r21, r1
 56e:	f9 01       	movw	r30, r18
 570:	9f 01       	movw	r18, r30
 572:	2f 5f       	subi	r18, 0xFF	; 255
 574:	3f 4f       	sbci	r19, 0xFF	; 255
 576:	80 81       	ld	r24, Z
 578:	88 23       	and	r24, r24
 57a:	49 f0       	breq	.+18     	; 0x58e <putchw+0x54>
 57c:	14 16       	cp	r1, r20
 57e:	15 06       	cpc	r1, r21
 580:	a4 f3       	brlt	.-24     	; 0x56a <putchw+0x30>
 582:	05 c0       	rjmp	.+10     	; 0x58e <putchw+0x54>
 584:	6b 2d       	mov	r22, r11
 586:	c6 01       	movw	r24, r12
 588:	f7 01       	movw	r30, r14
 58a:	09 95       	icall
 58c:	a8 01       	movw	r20, r16
 58e:	8a 01       	movw	r16, r20
 590:	01 50       	subi	r16, 0x01	; 1
 592:	11 09       	sbc	r17, r1
 594:	14 16       	cp	r1, r20
 596:	15 06       	cpc	r1, r21
 598:	ac f3       	brlt	.-22     	; 0x584 <putchw+0x4a>
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <putchw+0x6a>
 59c:	c6 01       	movw	r24, r12
 59e:	f7 01       	movw	r30, r14
 5a0:	09 95       	icall
 5a2:	e8 01       	movw	r28, r16
 5a4:	8e 01       	movw	r16, r28
 5a6:	0f 5f       	subi	r16, 0xFF	; 255
 5a8:	1f 4f       	sbci	r17, 0xFF	; 255
 5aa:	68 81       	ld	r22, Y
 5ac:	61 11       	cpse	r22, r1
 5ae:	f6 cf       	rjmp	.-20     	; 0x59c <putchw+0x62>
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	df 90       	pop	r13
 5be:	cf 90       	pop	r12
 5c0:	bf 90       	pop	r11
 5c2:	08 95       	ret

000005c4 <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
 5c4:	7f 92       	push	r7
 5c6:	8f 92       	push	r8
 5c8:	9f 92       	push	r9
 5ca:	af 92       	push	r10
 5cc:	bf 92       	push	r11
 5ce:	cf 92       	push	r12
 5d0:	df 92       	push	r13
 5d2:	ef 92       	push	r14
 5d4:	ff 92       	push	r15
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	60 97       	sbiw	r28, 0x10	; 16
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	5c 01       	movw	r10, r24
 5f0:	6b 01       	movw	r12, r22
 5f2:	58 8b       	std	Y+16, r21	; 0x10
 5f4:	4f 87       	std	Y+15, r20	; 0x0f
 5f6:	79 01       	movw	r14, r18
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 5f8:	ff c0       	rjmp	.+510    	; 0x7f8 <tfp_format+0x234>
		if (ch!='%') 
 5fa:	65 32       	cpi	r22, 0x25	; 37
 5fc:	21 f0       	breq	.+8      	; 0x606 <tfp_format+0x42>
			putf(putp,ch);
 5fe:	c5 01       	movw	r24, r10
 600:	f6 01       	movw	r30, r12
 602:	09 95       	icall
 604:	f9 c0       	rjmp	.+498    	; 0x7f8 <tfp_format+0x234>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
 606:	1e 86       	std	Y+14, r1	; 0x0e
 608:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 60a:	9d 01       	movw	r18, r26
 60c:	2f 5f       	subi	r18, 0xFF	; 255
 60e:	3f 4f       	sbci	r19, 0xFF	; 255
 610:	38 8b       	std	Y+16, r19	; 0x10
 612:	2f 87       	std	Y+15, r18	; 0x0f
 614:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 616:	80 33       	cpi	r24, 0x30	; 48
 618:	49 f4       	brne	.+18     	; 0x62c <tfp_format+0x68>
				ch=*(fmt++);
 61a:	2f 5f       	subi	r18, 0xFF	; 255
 61c:	3f 4f       	sbci	r19, 0xFF	; 255
 61e:	38 8b       	std	Y+16, r19	; 0x10
 620:	2f 87       	std	Y+15, r18	; 0x0f
 622:	11 96       	adiw	r26, 0x01	; 1
 624:	8c 91       	ld	r24, X
				lz=1;
 626:	77 24       	eor	r7, r7
 628:	73 94       	inc	r7
 62a:	01 c0       	rjmp	.+2      	; 0x62e <tfp_format+0x6a>

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
 62c:	71 2c       	mov	r7, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 62e:	90 ed       	ldi	r25, 0xD0	; 208
 630:	98 0f       	add	r25, r24
 632:	9a 30       	cpi	r25, 0x0A	; 10
 634:	50 f4       	brcc	.+20     	; 0x64a <tfp_format+0x86>
				ch=a2i(ch,&fmt,10,&w);
 636:	9e 01       	movw	r18, r28
 638:	23 5f       	subi	r18, 0xF3	; 243
 63a:	3f 4f       	sbci	r19, 0xFF	; 255
 63c:	4a e0       	ldi	r20, 0x0A	; 10
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	be 01       	movw	r22, r28
 642:	61 5f       	subi	r22, 0xF1	; 241
 644:	7f 4f       	sbci	r23, 0xFF	; 255
 646:	0e 94 61 02 	call	0x4c2	; 0x4c2 <a2i>
				}
#ifdef 	PRINTF_LONG_SUPPORT
			if (ch=='l') {
 64a:	8c 36       	cpi	r24, 0x6C	; 108
 64c:	49 f4       	brne	.+18     	; 0x660 <tfp_format+0x9c>
				ch=*(fmt++);
 64e:	ef 85       	ldd	r30, Y+15	; 0x0f
 650:	f8 89       	ldd	r31, Y+16	; 0x10
 652:	cf 01       	movw	r24, r30
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	98 8b       	std	Y+16, r25	; 0x10
 658:	8f 87       	std	Y+15, r24	; 0x0f
 65a:	80 81       	ld	r24, Z
				lng=1;
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	01 c0       	rjmp	.+2      	; 0x662 <tfp_format+0x9e>
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
 660:	90 e0       	ldi	r25, 0x00	; 0
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 662:	83 36       	cpi	r24, 0x63	; 99
 664:	09 f4       	brne	.+2      	; 0x668 <tfp_format+0xa4>
 666:	aa c0       	rjmp	.+340    	; 0x7bc <tfp_format+0x1f8>
 668:	50 f4       	brcc	.+20     	; 0x67e <tfp_format+0xba>
 66a:	85 32       	cpi	r24, 0x25	; 37
 66c:	09 f4       	brne	.+2      	; 0x670 <tfp_format+0xac>
 66e:	c0 c0       	rjmp	.+384    	; 0x7f0 <tfp_format+0x22c>
 670:	88 35       	cpi	r24, 0x58	; 88
 672:	09 f4       	brne	.+2      	; 0x676 <tfp_format+0xb2>
 674:	6a c0       	rjmp	.+212    	; 0x74a <tfp_format+0x186>
 676:	88 23       	and	r24, r24
 678:	09 f4       	brne	.+2      	; 0x67c <tfp_format+0xb8>
 67a:	c7 c0       	rjmp	.+398    	; 0x80a <tfp_format+0x246>
 67c:	bd c0       	rjmp	.+378    	; 0x7f8 <tfp_format+0x234>
 67e:	83 37       	cpi	r24, 0x73	; 115
 680:	09 f4       	brne	.+2      	; 0x684 <tfp_format+0xc0>
 682:	a6 c0       	rjmp	.+332    	; 0x7d0 <tfp_format+0x20c>
 684:	18 f4       	brcc	.+6      	; 0x68c <tfp_format+0xc8>
 686:	84 36       	cpi	r24, 0x64	; 100
 688:	c1 f1       	breq	.+112    	; 0x6fa <tfp_format+0x136>
 68a:	b6 c0       	rjmp	.+364    	; 0x7f8 <tfp_format+0x234>
 68c:	85 37       	cpi	r24, 0x75	; 117
 68e:	21 f0       	breq	.+8      	; 0x698 <tfp_format+0xd4>
 690:	88 37       	cpi	r24, 0x78	; 120
 692:	09 f4       	brne	.+2      	; 0x696 <tfp_format+0xd2>
 694:	5a c0       	rjmp	.+180    	; 0x74a <tfp_format+0x186>
 696:	b0 c0       	rjmp	.+352    	; 0x7f8 <tfp_format+0x234>
				case 0: 
					goto abort;
				case 'u' : {
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
 698:	99 23       	and	r25, r25
 69a:	a1 f0       	breq	.+40     	; 0x6c4 <tfp_format+0x100>
						uli2a(va_arg(va, unsigned long int),10,0,bf);
 69c:	47 01       	movw	r8, r14
 69e:	f4 e0       	ldi	r31, 0x04	; 4
 6a0:	8f 0e       	add	r8, r31
 6a2:	91 1c       	adc	r9, r1
 6a4:	f7 01       	movw	r30, r14
 6a6:	60 81       	ld	r22, Z
 6a8:	71 81       	ldd	r23, Z+1	; 0x01
 6aa:	82 81       	ldd	r24, Z+2	; 0x02
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	8e 01       	movw	r16, r28
 6b0:	0f 5f       	subi	r16, 0xFF	; 255
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	4a e0       	ldi	r20, 0x0A	; 10
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	0e 94 3d 01 	call	0x27a	; 0x27a <uli2a>
 6c0:	74 01       	movw	r14, r8
 6c2:	10 c0       	rjmp	.+32     	; 0x6e4 <tfp_format+0x120>
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 6c4:	87 01       	movw	r16, r14
 6c6:	0e 5f       	subi	r16, 0xFE	; 254
 6c8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ca:	9e 01       	movw	r18, r28
 6cc:	2f 5f       	subi	r18, 0xFF	; 255
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	50 e0       	ldi	r21, 0x00	; 0
 6d4:	6a e0       	ldi	r22, 0x0A	; 10
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	f7 01       	movw	r30, r14
 6da:	80 81       	ld	r24, Z
 6dc:	91 81       	ldd	r25, Z+1	; 0x01
 6de:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <ui2a>
 6e2:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 6e4:	4d 85       	ldd	r20, Y+13	; 0x0d
 6e6:	5e 85       	ldd	r21, Y+14	; 0x0e
 6e8:	8e 01       	movw	r16, r28
 6ea:	0f 5f       	subi	r16, 0xFF	; 255
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	27 2d       	mov	r18, r7
 6f0:	b6 01       	movw	r22, r12
 6f2:	c5 01       	movw	r24, r10
 6f4:	0e 94 9d 02 	call	0x53a	; 0x53a <putchw>
					break;
 6f8:	7f c0       	rjmp	.+254    	; 0x7f8 <tfp_format+0x234>
					}
				case 'd' :  {
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
 6fa:	99 23       	and	r25, r25
 6fc:	79 f0       	breq	.+30     	; 0x71c <tfp_format+0x158>
						li2a(va_arg(va, unsigned long int),bf);
 6fe:	87 01       	movw	r16, r14
 700:	0c 5f       	subi	r16, 0xFC	; 252
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	f7 01       	movw	r30, r14
 706:	60 81       	ld	r22, Z
 708:	71 81       	ldd	r23, Z+1	; 0x01
 70a:	82 81       	ldd	r24, Z+2	; 0x02
 70c:	93 81       	ldd	r25, Z+3	; 0x03
 70e:	ae 01       	movw	r20, r28
 710:	4f 5f       	subi	r20, 0xFF	; 255
 712:	5f 4f       	sbci	r21, 0xFF	; 255
 714:	0e 94 b8 01 	call	0x370	; 0x370 <li2a>
 718:	78 01       	movw	r14, r16
 71a:	0c c0       	rjmp	.+24     	; 0x734 <tfp_format+0x170>
					else
#endif
					i2a(va_arg(va, int),bf);
 71c:	87 01       	movw	r16, r14
 71e:	0e 5f       	subi	r16, 0xFE	; 254
 720:	1f 4f       	sbci	r17, 0xFF	; 255
 722:	be 01       	movw	r22, r28
 724:	6f 5f       	subi	r22, 0xFF	; 255
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	f7 01       	movw	r30, r14
 72a:	80 81       	ld	r24, Z
 72c:	91 81       	ldd	r25, Z+1	; 0x01
 72e:	0e 94 36 02 	call	0x46c	; 0x46c <i2a>
 732:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 734:	4d 85       	ldd	r20, Y+13	; 0x0d
 736:	5e 85       	ldd	r21, Y+14	; 0x0e
 738:	8e 01       	movw	r16, r28
 73a:	0f 5f       	subi	r16, 0xFF	; 255
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
 73e:	27 2d       	mov	r18, r7
 740:	b6 01       	movw	r22, r12
 742:	c5 01       	movw	r24, r10
 744:	0e 94 9d 02 	call	0x53a	; 0x53a <putchw>
					break;
 748:	57 c0       	rjmp	.+174    	; 0x7f8 <tfp_format+0x234>
					}
				case 'x': case 'X' : 
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
 74a:	99 23       	and	r25, r25
 74c:	c1 f0       	breq	.+48     	; 0x77e <tfp_format+0x1ba>
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
 74e:	47 01       	movw	r8, r14
 750:	f4 e0       	ldi	r31, 0x04	; 4
 752:	8f 0e       	add	r8, r31
 754:	91 1c       	adc	r9, r1
 756:	21 e0       	ldi	r18, 0x01	; 1
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	88 35       	cpi	r24, 0x58	; 88
 75c:	11 f0       	breq	.+4      	; 0x762 <tfp_format+0x19e>
 75e:	20 e0       	ldi	r18, 0x00	; 0
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	f7 01       	movw	r30, r14
 764:	60 81       	ld	r22, Z
 766:	71 81       	ldd	r23, Z+1	; 0x01
 768:	82 81       	ldd	r24, Z+2	; 0x02
 76a:	93 81       	ldd	r25, Z+3	; 0x03
 76c:	8e 01       	movw	r16, r28
 76e:	0f 5f       	subi	r16, 0xFF	; 255
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	40 e1       	ldi	r20, 0x10	; 16
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	0e 94 3d 01 	call	0x27a	; 0x27a <uli2a>
 77a:	74 01       	movw	r14, r8
 77c:	14 c0       	rjmp	.+40     	; 0x7a6 <tfp_format+0x1e2>
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 77e:	87 01       	movw	r16, r14
 780:	0e 5f       	subi	r16, 0xFE	; 254
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	41 e0       	ldi	r20, 0x01	; 1
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	88 35       	cpi	r24, 0x58	; 88
 78a:	11 f0       	breq	.+4      	; 0x790 <tfp_format+0x1cc>
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	9e 01       	movw	r18, r28
 792:	2f 5f       	subi	r18, 0xFF	; 255
 794:	3f 4f       	sbci	r19, 0xFF	; 255
 796:	60 e1       	ldi	r22, 0x10	; 16
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	f7 01       	movw	r30, r14
 79c:	80 81       	ld	r24, Z
 79e:	91 81       	ldd	r25, Z+1	; 0x01
 7a0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <ui2a>
 7a4:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 7a6:	4d 85       	ldd	r20, Y+13	; 0x0d
 7a8:	5e 85       	ldd	r21, Y+14	; 0x0e
 7aa:	8e 01       	movw	r16, r28
 7ac:	0f 5f       	subi	r16, 0xFF	; 255
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	27 2d       	mov	r18, r7
 7b2:	b6 01       	movw	r22, r12
 7b4:	c5 01       	movw	r24, r10
 7b6:	0e 94 9d 02 	call	0x53a	; 0x53a <putchw>
					break;
 7ba:	1e c0       	rjmp	.+60     	; 0x7f8 <tfp_format+0x234>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 7bc:	87 01       	movw	r16, r14
 7be:	0e 5f       	subi	r16, 0xFE	; 254
 7c0:	1f 4f       	sbci	r17, 0xFF	; 255
 7c2:	f7 01       	movw	r30, r14
 7c4:	60 81       	ld	r22, Z
 7c6:	c5 01       	movw	r24, r10
 7c8:	f6 01       	movw	r30, r12
 7ca:	09 95       	icall
 7cc:	78 01       	movw	r14, r16
					break;
 7ce:	14 c0       	rjmp	.+40     	; 0x7f8 <tfp_format+0x234>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 7d0:	47 01       	movw	r8, r14
 7d2:	f2 e0       	ldi	r31, 0x02	; 2
 7d4:	8f 0e       	add	r8, r31
 7d6:	91 1c       	adc	r9, r1
 7d8:	f7 01       	movw	r30, r14
 7da:	00 81       	ld	r16, Z
 7dc:	11 81       	ldd	r17, Z+1	; 0x01
 7de:	4d 85       	ldd	r20, Y+13	; 0x0d
 7e0:	5e 85       	ldd	r21, Y+14	; 0x0e
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	b6 01       	movw	r22, r12
 7e6:	c5 01       	movw	r24, r10
 7e8:	0e 94 9d 02 	call	0x53a	; 0x53a <putchw>
 7ec:	74 01       	movw	r14, r8
					break;
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <tfp_format+0x234>
				case '%' :
					putf(putp,ch);
 7f0:	68 2f       	mov	r22, r24
 7f2:	c5 01       	movw	r24, r10
 7f4:	f6 01       	movw	r30, r12
 7f6:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 7f8:	ef 85       	ldd	r30, Y+15	; 0x0f
 7fa:	f8 89       	ldd	r31, Y+16	; 0x10
 7fc:	df 01       	movw	r26, r30
 7fe:	11 96       	adiw	r26, 0x01	; 1
 800:	b8 8b       	std	Y+16, r27	; 0x10
 802:	af 87       	std	Y+15, r26	; 0x0f
 804:	60 81       	ld	r22, Z
 806:	61 11       	cpse	r22, r1
 808:	f8 ce       	rjmp	.-528    	; 0x5fa <tfp_format+0x36>
					break;
				}
			}
		}
	abort:;
	}
 80a:	60 96       	adiw	r28, 0x10	; 16
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	f8 94       	cli
 810:	de bf       	out	0x3e, r29	; 62
 812:	0f be       	out	0x3f, r0	; 63
 814:	cd bf       	out	0x3d, r28	; 61
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	ff 90       	pop	r15
 820:	ef 90       	pop	r14
 822:	df 90       	pop	r13
 824:	cf 90       	pop	r12
 826:	bf 90       	pop	r11
 828:	af 90       	pop	r10
 82a:	9f 90       	pop	r9
 82c:	8f 90       	pop	r8
 82e:	7f 90       	pop	r7
 830:	08 95       	ret

00000832 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 832:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <stdout_putf+0x1>
 836:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <stdout_putf>
	stdout_putp=putp;
 83a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <stdout_putp+0x1>
 83e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <stdout_putp>
 842:	08 95       	ret

00000844 <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	9e 01       	movw	r18, r28
 84e:	2b 5f       	subi	r18, 0xFB	; 251
 850:	3f 4f       	sbci	r19, 0xFF	; 255
 852:	f9 01       	movw	r30, r18
 854:	41 91       	ld	r20, Z+
 856:	51 91       	ld	r21, Z+
 858:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 85a:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <stdout_putf>
 85e:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <stdout_putf+0x1>
 862:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <stdout_putp>
 866:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <stdout_putp+0x1>
 86a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <tfp_format>
	va_end(va);
	}
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	08 95       	ret

00000874 <__udivmodhi4>:
 874:	aa 1b       	sub	r26, r26
 876:	bb 1b       	sub	r27, r27
 878:	51 e1       	ldi	r21, 0x11	; 17
 87a:	07 c0       	rjmp	.+14     	; 0x88a <__udivmodhi4_ep>

0000087c <__udivmodhi4_loop>:
 87c:	aa 1f       	adc	r26, r26
 87e:	bb 1f       	adc	r27, r27
 880:	a6 17       	cp	r26, r22
 882:	b7 07       	cpc	r27, r23
 884:	10 f0       	brcs	.+4      	; 0x88a <__udivmodhi4_ep>
 886:	a6 1b       	sub	r26, r22
 888:	b7 0b       	sbc	r27, r23

0000088a <__udivmodhi4_ep>:
 88a:	88 1f       	adc	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	5a 95       	dec	r21
 890:	a9 f7       	brne	.-22     	; 0x87c <__udivmodhi4_loop>
 892:	80 95       	com	r24
 894:	90 95       	com	r25
 896:	bc 01       	movw	r22, r24
 898:	cd 01       	movw	r24, r26
 89a:	08 95       	ret

0000089c <__udivmodsi4>:
 89c:	a1 e2       	ldi	r26, 0x21	; 33
 89e:	1a 2e       	mov	r1, r26
 8a0:	aa 1b       	sub	r26, r26
 8a2:	bb 1b       	sub	r27, r27
 8a4:	fd 01       	movw	r30, r26
 8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <__udivmodsi4_ep>

000008a8 <__udivmodsi4_loop>:
 8a8:	aa 1f       	adc	r26, r26
 8aa:	bb 1f       	adc	r27, r27
 8ac:	ee 1f       	adc	r30, r30
 8ae:	ff 1f       	adc	r31, r31
 8b0:	a2 17       	cp	r26, r18
 8b2:	b3 07       	cpc	r27, r19
 8b4:	e4 07       	cpc	r30, r20
 8b6:	f5 07       	cpc	r31, r21
 8b8:	20 f0       	brcs	.+8      	; 0x8c2 <__udivmodsi4_ep>
 8ba:	a2 1b       	sub	r26, r18
 8bc:	b3 0b       	sbc	r27, r19
 8be:	e4 0b       	sbc	r30, r20
 8c0:	f5 0b       	sbc	r31, r21

000008c2 <__udivmodsi4_ep>:
 8c2:	66 1f       	adc	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	88 1f       	adc	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	1a 94       	dec	r1
 8cc:	69 f7       	brne	.-38     	; 0x8a8 <__udivmodsi4_loop>
 8ce:	60 95       	com	r22
 8d0:	70 95       	com	r23
 8d2:	80 95       	com	r24
 8d4:	90 95       	com	r25
 8d6:	9b 01       	movw	r18, r22
 8d8:	ac 01       	movw	r20, r24
 8da:	bd 01       	movw	r22, r26
 8dc:	cf 01       	movw	r24, r30
 8de:	08 95       	ret

000008e0 <_exit>:
 8e0:	f8 94       	cli

000008e2 <__stop_program>:
 8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <__stop_program>

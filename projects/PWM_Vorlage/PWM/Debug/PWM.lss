
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000114  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068a  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000601  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002af  00000000  00000000  00000eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_19>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  7a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init>:

volatile uint8_t OCR0_value = (255 * 25) / 100;

void init()
{
	DDRB |= (1 << PWM_PIN);
  82:	bb 9a       	sbi	0x17, 3	; 23

	DDRA &= ~((1 << S0_PIN) | (1 << S1_PIN) | (1 << S2_PIN) | (1 << S3_PIN));
  84:	8a b3       	in	r24, 0x1a	; 26
  86:	80 7f       	andi	r24, 0xF0	; 240
  88:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << S0_PIN) | (1 << S1_PIN) | (1 << S2_PIN) | (1 << S3_PIN);
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	8f 60       	ori	r24, 0x0F	; 15
  8e:	8b bb       	out	0x1b, r24	; 27

	TCCR0 |= (1 << WGM00) | (1 << WGM01);
  90:	83 b7       	in	r24, 0x33	; 51
  92:	88 64       	ori	r24, 0x48	; 72
  94:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);
  96:	83 b7       	in	r24, 0x33	; 51
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS02);
  9c:	83 b7       	in	r24, 0x33	; 51
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	83 bf       	out	0x33, r24	; 51

	OCR0 = OCR0_value;
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a6:	8c bf       	out	0x3c, r24	; 60

	TIMSK |= (1 << OCIE0);
  a8:	89 b7       	in	r24, 0x39	; 57
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	89 bf       	out	0x39, r24	; 57
	sei();
  ae:	78 94       	sei
  b0:	08 95       	ret

000000b2 <__vector_19>:
}

ISR(TIMER0_COMP_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
	if (!(PINA & (1 << S2_PIN)))
  be:	ca 99       	sbic	0x19, 2	; 25
  c0:	0a c0       	rjmp	.+20     	; 0xd6 <__vector_19+0x24>
	{
		if (OCR0_value < 255)
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	8f 3f       	cpi	r24, 0xFF	; 255
  c8:	89 f0       	breq	.+34     	; 0xec <__vector_19+0x3a>
		{
			OCR0_value++;
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	0b c0       	rjmp	.+22     	; 0xec <__vector_19+0x3a>
		}
	}
	else if (!(PINA & (1 << S3_PIN)))
  d6:	cb 99       	sbic	0x19, 3	; 25
  d8:	09 c0       	rjmp	.+18     	; 0xec <__vector_19+0x3a>
	{
		if (OCR0_value > 0)
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	88 23       	and	r24, r24
  e0:	29 f0       	breq	.+10     	; 0xec <__vector_19+0x3a>
		{
			OCR0_value--;
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}

	OCR0 = OCR0_value;
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	8c bf       	out	0x3c, r24	; 60
}
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <main>:

int main(void)
{
	init();
  fe:	0e 94 41 00 	call	0x82	; 0x82 <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	87 e8       	ldi	r24, 0x87	; 135
 104:	93 e1       	ldi	r25, 0x13	; 19
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x8>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0xe>
 10c:	00 00       	nop
 10e:	f9 cf       	rjmp	.-14     	; 0x102 <main+0x4>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>

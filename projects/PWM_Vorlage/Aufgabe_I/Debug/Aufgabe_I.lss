
Aufgabe_I.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000140  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000623  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  00000897  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026a  00000000  00000000  00000e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000357  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000143f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 00 	call	0x130	; 0x130 <main>
  8a:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
volatile uint8_t OCR0_value = 127;
volatile uint8_t timer_count = 0;

void init()
{
	DDRB |= (1 << PWM_PIN);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	88 60       	ori	r24, 0x08	; 8
  96:	87 bb       	out	0x17, r24	; 23
	DDRA &= ~((1 << S2_PIN) | (1 << S3_PIN));
  98:	8a b3       	in	r24, 0x1a	; 26
  9a:	83 7f       	andi	r24, 0xF3	; 243
  9c:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << S2_PIN) | (1 << S3_PIN);
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	8c 60       	ori	r24, 0x0C	; 12
  a2:	8b bb       	out	0x1b, r24	; 27

	TCCR0 |= (1 << WGM00) | (1 << WGM01);
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	88 64       	ori	r24, 0x48	; 72
  a8:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);
  aa:	83 b7       	in	r24, 0x33	; 51
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS00);
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	83 bf       	out	0x33, r24	; 51

	OCR0 = OCR0_value;
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	8c bf       	out	0x3c, r24	; 60

	TCCR1B |= (1 << CS10) | (1 << WGM12);
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	89 60       	ori	r24, 0x09	; 9
  c0:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 1199;
  c2:	8f ea       	ldi	r24, 0xAF	; 175
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	9b bd       	out	0x2b, r25	; 43
  c8:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);
  ca:	89 b7       	in	r24, 0x39	; 57
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	89 bf       	out	0x39, r24	; 57
	sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <__vector_6>:
}

ISR(TIMER1_COMPA_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
	timer_count++;
  e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	
	if (timer_count >= 50)
  ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ee:	82 33       	cpi	r24, 0x32	; 50
  f0:	c8 f0       	brcs	.+50     	; 0x124 <__vector_6+0x50>
	{
		timer_count = 0;
  f2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		if (!(PINA & (1 << S2_PIN)) && OCR0_value < 255)
  f6:	ca 99       	sbic	0x19, 2	; 25
  f8:	0a c0       	rjmp	.+20     	; 0x10e <__vector_6+0x3a>
  fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	31 f0       	breq	.+12     	; 0x10e <__vector_6+0x3a>
		{
			OCR0_value++;
 102:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	0b c0       	rjmp	.+22     	; 0x124 <__vector_6+0x50>
		}
		else if (!(PINA & (1 << S3_PIN)) && OCR0_value > 0)
 10e:	cb 99       	sbic	0x19, 3	; 25
 110:	09 c0       	rjmp	.+18     	; 0x124 <__vector_6+0x50>
 112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	88 23       	and	r24, r24
 118:	29 f0       	breq	.+10     	; 0x124 <__vector_6+0x50>
		{
			OCR0_value--;
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
}
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:

int main(void)
{
	init();
 130:	0e 94 49 00 	call	0x92	; 0x92 <init>

	while (1)
	{
		OCR0 = OCR0_value;
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	8c bf       	out	0x3c, r24	; 60
 13a:	fc cf       	rjmp	.-8      	; 0x134 <main+0x4>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>

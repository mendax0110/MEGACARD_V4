
Aufgabe_k.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000618  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000590  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000218  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034b  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001363  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:
volatile uint8_t rampFlag = 0;
volatile uint8_t rampValue = 0;

void init()
{
	DDRB |= (1 << PWM_PIN);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	87 bb       	out	0x17, r24	; 23
	
	DDRA &= ~((1 << S0_PIN) | (1 << S1_PIN));
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	8c 7f       	andi	r24, 0xFC	; 252
  86:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << S0_PIN) | (1 << S1_PIN);
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	8b bb       	out	0x1b, r24	; 27

	TCCR0 |= (1 << WGM00) | (1 << WGM01);
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	88 64       	ori	r24, 0x48	; 72
  92:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);
  94:	83 b7       	in	r24, 0x33	; 51
  96:	80 62       	ori	r24, 0x20	; 32
  98:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS00);
  9a:	83 b7       	in	r24, 0x33	; 51
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	83 bf       	out	0x33, r24	; 51

	OCR0 = 57;
  a0:	89 e3       	ldi	r24, 0x39	; 57
  a2:	8c bf       	out	0x3c, r24	; 60

	TIMSK |= (1 << OCIE0);
  a4:	89 b7       	in	r24, 0x39	; 57
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	89 bf       	out	0x39, r24	; 57
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <__vector_19>:
}

ISR(TIMER0_COMP_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	OCR0++;
  ba:	8c b7       	in	r24, 0x3c	; 60
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	8c bf       	out	0x3c, r24	; 60
	else
	{
		OCR0++;
		rampValue++;
	}
}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void)
{
	init();
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <init>
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x4>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

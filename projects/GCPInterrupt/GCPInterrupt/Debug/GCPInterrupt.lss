
GCPInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ea  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000631  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000127  00000000  00000000  0000161d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  7a:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_2>:
	{'4', '5', '6', 'B'},
	{'7', '8', '9', 'C'},
	{'*', '0', '#', 'D'}
};

ISR(INT1_vect) {
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f e2       	ldi	r24, 0x2F	; 47
  96:	95 e7       	ldi	r25, 0x75	; 117
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <__vector_2+0x16>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <__vector_2+0x1c>
  9e:	00 00       	nop
	_delay_ms(10);
	uint8_t column = PINA & 0x0F;
  a0:	99 b3       	in	r25, 0x19	; 25
  a2:	9f 70       	andi	r25, 0x0F	; 15
	for (uint8_t i = 0; i < KEYPAD_COLS; i++) 
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	1c c0       	rjmp	.+56     	; 0xe0 <__vector_2+0x5e>
	{
		if (column & (1 << i)) 
  a8:	29 2f       	mov	r18, r25
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	08 2e       	mov	r0, r24
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__vector_2+0x32>
  b0:	35 95       	asr	r19
  b2:	27 95       	ror	r18
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <__vector_2+0x2e>
  b8:	20 ff       	sbrs	r18, 0
  ba:	11 c0       	rjmp	.+34     	; 0xde <__vector_2+0x5c>
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <__vector_2+0x54>
		{
			for (uint8_t j = 0; j < KEYPAD_ROWS; j++) 
			{
				if (PINC & (1 << j)) 
  be:	83 b3       	in	r24, 0x13	; 19
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <__vector_2+0x48>
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <__vector_2+0x44>
  ce:	80 fd       	sbrc	r24, 0
  d0:	09 c0       	rjmp	.+18     	; 0xe4 <__vector_2+0x62>
	uint8_t column = PINA & 0x0F;
	for (uint8_t i = 0; i < KEYPAD_COLS; i++) 
	{
		if (column & (1 << i)) 
		{
			for (uint8_t j = 0; j < KEYPAD_ROWS; j++) 
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <__vector_2+0x56>
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	24 30       	cpi	r18, 0x04	; 4
  da:	88 f3       	brcs	.-30     	; 0xbe <__vector_2+0x3c>
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <__vector_2+0x62>
};

ISR(INT1_vect) {
	_delay_ms(10);
	uint8_t column = PINA & 0x0F;
	for (uint8_t i = 0; i < KEYPAD_COLS; i++) 
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	10 f3       	brcs	.-60     	; 0xa8 <__vector_2+0x26>
				}
			}
			break;
		}
	}
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	3f 91       	pop	r19
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <init_keypad>:

void init_keypad() {
	DDRD &= ~(1 << PD3);
  f6:	81 b3       	in	r24, 0x11	; 17
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PD3);
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	82 bb       	out	0x12, r24	; 18
	DDRA &= ~(0x0F);
 102:	8a b3       	in	r24, 0x1a	; 26
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (0x0F);
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	8f 60       	ori	r24, 0x0F	; 15
 10c:	8b bb       	out	0x1b, r24	; 27
	DDRC |= (0x0F);
 10e:	84 b3       	in	r24, 0x14	; 20
 110:	8f 60       	ori	r24, 0x0F	; 15
 112:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~(0x0F);
 114:	85 b3       	in	r24, 0x15	; 21
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	85 bb       	out	0x15, r24	; 21
 11a:	08 95       	ret

0000011c <main>:
}

int main(void) {
	init_keypad();
 11c:	0e 94 7b 00 	call	0xf6	; 0xf6 <init_keypad>
	GICR |= (1 << INT1);
 120:	8b b7       	in	r24, 0x3b	; 59
 122:	80 68       	ori	r24, 0x80	; 128
 124:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11);
 126:	85 b7       	in	r24, 0x35	; 53
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	85 bf       	out	0x35, r24	; 53
	sei();
 12c:	78 94       	sei
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x12>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>

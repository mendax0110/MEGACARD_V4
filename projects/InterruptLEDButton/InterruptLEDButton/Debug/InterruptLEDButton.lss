
InterruptLEDButton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bc  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000601  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002df  00000000  00000000  00000f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c8  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:

volatile uint8_t led_counter = 0;		// Counter to keep track of which LED to toggle
volatile uint8_t button_pressed = 0;	// Flag to indicate if the button has been pressed

ISR(INT1_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	// Check if the button is pressed
	if(!(PIND & (1 << BUTTON)))
  88:	83 99       	sbic	0x10, 3	; 16
  8a:	03 c0       	rjmp	.+6      	; 0x92 <__vector_2+0x16>
	{
		button_pressed = 1;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <init_interrupt>:

void init_interrupt()
{
	// Enable interrupt 1 and set it to trigger on faling edge
	GICR |= (1 << INT1);
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11);
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	85 bf       	out	0x35, r24	; 53
	
	// Enable global interrupts
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <init_ports>:
}

void init_ports()
{
	// Set the LED pins as outputs
	DDRC |= (1 << LED_1)|(1 << LED_2)|(1 << LED_3)|(1 << LED_4);
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	84 bb       	out	0x14, r24	; 20
	
	// Set the button pin as input and enable the internal pull-up resistor
	DDRD &= ~(1 << BUTTON);
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	87 7f       	andi	r24, 0xF7	; 247
  b8:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << BUTTON);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	82 bb       	out	0x12, r24	; 18
  c0:	08 95       	ret

000000c2 <main>:
}

int main(void)
{
	init_ports();
  c2:	0e 94 57 00 	call	0xae	; 0xae <init_ports>
	init_interrupt();
  c6:	0e 94 4f 00 	call	0x9e	; 0x9e <init_interrupt>
	
	while(1)
	{
		// If the button has been pressed, toggle the next LED and reset the flag
		if(button_pressed)
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	88 23       	and	r24, r24
  d0:	69 f0       	breq	.+26     	; 0xec <main+0x2a>
		{
			led_counter++;
  d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <led_counter>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <led_counter>
			
			if(led_counter > 3)
  dc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <led_counter>
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	10 f0       	brcs	.+4      	; 0xe8 <main+0x26>
			{
				led_counter = 0;
  e4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <led_counter>
			}
			
			button_pressed = 0;
  e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		
		// Toggle the LED based on the current value of the counter
		switch(led_counter)
  ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <led_counter>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	59 f0       	breq	.+22     	; 0x10a <main+0x48>
  f4:	28 f0       	brcs	.+10     	; 0x100 <main+0x3e>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	69 f0       	breq	.+26     	; 0x114 <main+0x52>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	81 f0       	breq	.+32     	; 0x11e <main+0x5c>
  fe:	13 c0       	rjmp	.+38     	; 0x126 <main+0x64>
		{
			case 0: 
				PORTC ^= (1 << LED_1);
 100:	95 b3       	in	r25, 0x15	; 21
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	89 27       	eor	r24, r25
 106:	85 bb       	out	0x15, r24	; 21
				break;
 108:	0e c0       	rjmp	.+28     	; 0x126 <main+0x64>
			case 1:
				PORTC ^= (1 << LED_2);
 10a:	95 b3       	in	r25, 0x15	; 21
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	89 27       	eor	r24, r25
 110:	85 bb       	out	0x15, r24	; 21
				break;
 112:	09 c0       	rjmp	.+18     	; 0x126 <main+0x64>
			case 2:
				PORTC ^= (1 << LED_3);
 114:	95 b3       	in	r25, 0x15	; 21
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	89 27       	eor	r24, r25
 11a:	85 bb       	out	0x15, r24	; 21
				break;
 11c:	04 c0       	rjmp	.+8      	; 0x126 <main+0x64>
			case 3:
				PORTC ^= (1 << LED_4);
 11e:	95 b3       	in	r25, 0x15	; 21
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	89 27       	eor	r24, r25
 124:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f e7       	ldi	r18, 0x7F	; 127
 128:	8f e4       	ldi	r24, 0x4F	; 79
 12a:	92 e1       	ldi	r25, 0x12	; 18
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x6a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x74>
 136:	00 00       	nop
 138:	c8 cf       	rjmp	.-112    	; 0xca <main+0x8>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>

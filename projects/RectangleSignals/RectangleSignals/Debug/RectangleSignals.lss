
RectangleSignals.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000756  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062b  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  00000f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014e  00000000  00000000  00001689  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_19>:
#include <avr/portpins.h>
#include <avr/interrupt.h>
#include <util/delay.h>

ISR(TIMER0_COMP_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTC ^= (1 << PC6); // Toggle PC6
  7a:	95 b3       	in	r25, 0x15	; 21
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	89 27       	eor	r24, r25
  80:	85 bb       	out	0x15, r24	; 21
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <init_timer0>:

void init_timer0(uint8_t ocr_value)
{
	TCCR0 = (1 << WGM01) | (1 << COM00); // CTC mode, toggle OC0 on match
  90:	98 e1       	ldi	r25, 0x18	; 24
  92:	93 bf       	out	0x33, r25	; 51
	TCCR0 |= (1 << CS02) | (1 << CS00); // Prescaler = 1024
  94:	93 b7       	in	r25, 0x33	; 51
  96:	95 60       	ori	r25, 0x05	; 5
  98:	93 bf       	out	0x33, r25	; 51

	OCR0 = ocr_value; // Set output compare value for desired frequency
  9a:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0); // Enable compare match interrupt
  9c:	89 b7       	in	r24, 0x39	; 57
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	89 bf       	out	0x39, r24	; 57
  a2:	08 95       	ret

000000a4 <init_ports>:
}

void init_ports()
{
	DDRC = 0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7); // Set LED Indicator
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	85 bb       	out	0x15, r24	; 21

	DDRB |= (1 << PB3); // OC0 output
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	87 bb       	out	0x17, r24	; 23
  b4:	08 95       	ret

000000b6 <main>:
}

int main(void)
{
	cli(); // Disable global interrupts
  b6:	f8 94       	cli

	init_ports(); // Initialize ports
  b8:	0e 94 52 00 	call	0xa4	; 0xa4 <init_ports>
	init_timer0(117); // Initialize timer for 1000 Hz signal
  bc:	85 e7       	ldi	r24, 0x75	; 117
  be:	0e 94 48 00 	call	0x90	; 0x90 <init_timer0>

	sei(); // Enable global interrupts
  c2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	8f e4       	ldi	r24, 0x4F	; 79
  c8:	92 e1       	ldi	r25, 0x12	; 18
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x14>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x1e>
  d4:	00 00       	nop

	while (1)
	{
		// Switch between different frequencies
		_delay_ms(500);
		init_timer0(58); // 2000 Hz
  d6:	8a e3       	ldi	r24, 0x3A	; 58
  d8:	0e 94 48 00 	call	0x90	; 0x90 <init_timer0>
  dc:	2f e7       	ldi	r18, 0x7F	; 127
  de:	8f e4       	ldi	r24, 0x4F	; 79
  e0:	92 e1       	ldi	r25, 0x12	; 18
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x2c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x36>
  ec:	00 00       	nop
		_delay_ms(500);
		init_timer0(23); // 5000 Hz
  ee:	87 e1       	ldi	r24, 0x17	; 23
  f0:	0e 94 48 00 	call	0x90	; 0x90 <init_timer0>
  f4:	2f e7       	ldi	r18, 0x7F	; 127
  f6:	8f e4       	ldi	r24, 0x4F	; 79
  f8:	92 e1       	ldi	r25, 0x12	; 18
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x44>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x4e>
 104:	00 00       	nop
		_delay_ms(500);
		init_timer0(117); // 1000 Hz
 106:	85 e7       	ldi	r24, 0x75	; 117
 108:	0e 94 48 00 	call	0x90	; 0x90 <init_timer0>
 10c:	db cf       	rjmp	.-74     	; 0xc4 <main+0xe>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>

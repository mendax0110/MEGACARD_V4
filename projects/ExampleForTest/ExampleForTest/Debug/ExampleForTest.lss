
ExampleForTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078f  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  0000098f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000297  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#define BLINK 500

int main(void)
{
	DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x0F;
  70:	8f e0       	ldi	r24, 0x0F	; 15
  72:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	2f e7       	ldi	r18, 0x7F	; 127
  76:	8f e4       	ldi	r24, 0x4F	; 79
  78:	92 e1       	ldi	r25, 0x12	; 18
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	80 40       	sbci	r24, 0x00	; 0
  7e:	90 40       	sbci	r25, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <main+0xe>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
	
	_delay_ms(BLINK);
	
	PORTC |= 0xF0;	// OR-Gatter
  86:	85 b3       	in	r24, 0x15	; 21
  88:	80 6f       	ori	r24, 0xF0	; 240
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	2f e7       	ldi	r18, 0x7F	; 127
  8e:	8f e4       	ldi	r24, 0x4F	; 79
  90:	92 e1       	ldi	r25, 0x12	; 18
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x26>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
	
	_delay_ms(BLINK);
	
	PORTC &= 0b10101010;	// AND-Gatter
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	8a 7a       	andi	r24, 0xAA	; 170
  a2:	85 bb       	out	0x15, r24	; 21
  a4:	2f e7       	ldi	r18, 0x7F	; 127
  a6:	8f e4       	ldi	r24, 0x4F	; 79
  a8:	92 e1       	ldi	r25, 0x12	; 18
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
	
	_delay_ms(BLINK);
	
	PORTC ^= 0b01010101;	// EXOR-Gatter
  b6:	95 b3       	in	r25, 0x15	; 21
  b8:	85 e5       	ldi	r24, 0x55	; 85
  ba:	89 27       	eor	r24, r25
  bc:	85 bb       	out	0x15, r24	; 21
  be:	2f e7       	ldi	r18, 0x7F	; 127
  c0:	8f e4       	ldi	r24, 0x4F	; 79
  c2:	92 e1       	ldi	r25, 0x12	; 18
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
	
	_delay_ms(BLINK);
	
	PORTC =~ PORTC;			// Inverter
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	80 95       	com	r24
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	92 e1       	ldi	r25, 0x12	; 18
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x70>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x7a>
  e6:	00 00       	nop
	
	_delay_ms(BLINK);
	
	PORTC =~(PORTC & 0b0101010101);	// NAND-Gatter
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	85 75       	andi	r24, 0x55	; 85
  ec:	80 95       	com	r24
  ee:	85 bb       	out	0x15, r24	; 21
  f0:	2f e7       	ldi	r18, 0x7F	; 127
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	92 e1       	ldi	r25, 0x12	; 18
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x8a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x94>
 100:	00 00       	nop
	
	_delay_ms(BLINK);
	
	PORTC =~(PORTC|0b11111111);		// NOR-Gatter
 102:	85 b3       	in	r24, 0x15	; 21
 104:	15 ba       	out	0x15, r1	; 21
 106:	2f e7       	ldi	r18, 0x7F	; 127
 108:	8f e4       	ldi	r24, 0x4F	; 79
 10a:	92 e1       	ldi	r25, 0x12	; 18
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0xa0>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0xaa>
 116:	00 00       	nop
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0xac>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>

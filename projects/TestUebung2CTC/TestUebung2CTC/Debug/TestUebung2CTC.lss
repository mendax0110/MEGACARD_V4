
TestUebung2CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bb  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060e  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002be  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000077  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  74:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:

volatile uint8_t OCR0Var = 0;	// 77 or 78
volatile uint8_t timer = 0;

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
	
}
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <init_Ports>:

void init_Ports()
{
	DDRC = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 bb       	out	0x14, r24	; 20
	PORTC ^= (1 << PC0);		// Indicator LED
  94:	95 b3       	in	r25, 0x15	; 21
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	89 27       	eor	r24, r25
  9a:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);		// Ouput for signal	
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	08 95       	ret

000000a4 <init_Timer0_CTC>:
}

void init_Timer0_CTC()
{
	TCCR0 |= (1 << COM00)|(1 << WGM01)|(1 << CS02)|(1 << CS00);
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	8d 61       	ori	r24, 0x1D	; 29
  a8:	83 bf       	out	0x33, r24	; 51
	
	// OCR = (F_CPU/(2*Vorteilerwert*F_OUT) -1 = (12Mhz/(2*256*300)-1) = 77,125
	
	for(timer = 0; timer <= 10; timer++)
  aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  ae:	15 c0       	rjmp	.+42     	; 0xda <init_Timer0_CTC+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	8e e9       	ldi	r24, 0x9E	; 158
  b4:	94 e2       	ldi	r25, 0x24	; 36
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <init_Timer0_CTC+0x12>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <init_Timer0_CTC+0x1c>
  c0:	00 00       	nop
	{
		_delay_ms(1000);
		OCR0Var = 77;
  c2:	8d e4       	ldi	r24, 0x4D	; 77
  c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <OCR0Var>
		PORTC ^= (1 << PC1);
  c8:	95 b3       	in	r25, 0x15	; 21
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	89 27       	eor	r24, r25
  ce:	85 bb       	out	0x15, r24	; 21
{
	TCCR0 |= (1 << COM00)|(1 << WGM01)|(1 << CS02)|(1 << CS00);
	
	// OCR = (F_CPU/(2*Vorteilerwert*F_OUT) -1 = (12Mhz/(2*256*300)-1) = 77,125
	
	for(timer = 0; timer <= 10; timer++)
  d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  de:	8b 30       	cpi	r24, 0x0B	; 11
  e0:	38 f3       	brcs	.-50     	; 0xb0 <init_Timer0_CTC+0xc>
		_delay_ms(1000);
		OCR0Var = 77;
		PORTC ^= (1 << PC1);
	}
	
	OCR0 = OCR0Var;
  e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <OCR0Var>
  e6:	8c bf       	out	0x3c, r24	; 60
	TCNT0 = 0;
  e8:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << OCIE0);
  ea:	89 b7       	in	r24, 0x39	; 57
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	89 bf       	out	0x39, r24	; 57
  f0:	08 95       	ret

000000f2 <main>:
}

int main(void)
{
    cli();
  f2:	f8 94       	cli
	init_Ports();
  f4:	0e 94 48 00 	call	0x90	; 0x90 <init_Ports>
	init_Timer0_CTC();
  f8:	0e 94 52 00 	call	0xa4	; 0xa4 <init_Timer0_CTC>
	sei();
  fc:	78 94       	sei
  fe:	ff cf       	rjmp	.-2      	; 0xfe <main+0xc>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>

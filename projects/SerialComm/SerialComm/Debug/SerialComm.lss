
SerialComm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000639  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ac  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	// Set up the USART in asynchronous mode
	// Set baud rate to 9600
	UBRRH = 0;
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;
  6e:	8c e0       	ldi	r24, 0x0C	; 12
  70:	89 b9       	out	0x09, r24	; 9
	
	// Enable transmitter and receiver
	UCSRB = (1 << TXEN) | (1 << RXEN);
  72:	88 e1       	ldi	r24, 0x18	; 24
  74:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 9 data bits, 1 stop bit
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  76:	86 e8       	ldi	r24, 0x86	; 134
  78:	80 bd       	out	0x20, r24	; 32
	
	// Send a string to the serial port
	while(1)
	{
		// Wait until the transmit buffer is empty
		while(!(UCSRA & (1 << UDRE)));
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <main+0xe>
		
		// Put the data into the transmit buffer
		UDR = 'I';
  7e:	89 e4       	ldi	r24, 0x49	; 73
  80:	8c b9       	out	0x0c, r24	; 12
		UDR = 'N';
  82:	8e e4       	ldi	r24, 0x4E	; 78
  84:	8c b9       	out	0x0c, r24	; 12
		UDR = 'P';
  86:	80 e5       	ldi	r24, 0x50	; 80
  88:	8c b9       	out	0x0c, r24	; 12
		UDR = 'U';
  8a:	85 e5       	ldi	r24, 0x55	; 85
  8c:	8c b9       	out	0x0c, r24	; 12
		UDR = 'T';
  8e:	94 e5       	ldi	r25, 0x54	; 84
  90:	9c b9       	out	0x0c, r25	; 12
		UDR = ',';
  92:	8c e2       	ldi	r24, 0x2C	; 44
  94:	8c b9       	out	0x0c, r24	; 12
		UDR = ' ';
  96:	80 e2       	ldi	r24, 0x20	; 32
  98:	8c b9       	out	0x0c, r24	; 12
		UDR = 'D';
  9a:	84 e4       	ldi	r24, 0x44	; 68
  9c:	8c b9       	out	0x0c, r24	; 12
		UDR = 'A';
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	8c b9       	out	0x0c, r24	; 12
		UDR = 'T';
  a2:	9c b9       	out	0x0c, r25	; 12
		UDR = 'A';
  a4:	8c b9       	out	0x0c, r24	; 12
		UDR = '*';
  a6:	8a e2       	ldi	r24, 0x2A	; 42
  a8:	8c b9       	out	0x0c, r24	; 12
		UDR = '!';
  aa:	81 e2       	ldi	r24, 0x21	; 33
  ac:	8c b9       	out	0x0c, r24	; 12
		UDR = '\n';
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f e7       	ldi	r18, 0x7F	; 127
  b4:	8f e4       	ldi	r24, 0x4F	; 79
  b6:	92 e1       	ldi	r25, 0x12	; 18
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
  c4:	da cf       	rjmp	.-76     	; 0x7a <main+0xe>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>

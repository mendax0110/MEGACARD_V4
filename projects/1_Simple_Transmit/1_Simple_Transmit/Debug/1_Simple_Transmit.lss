
1_Simple_Transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000148  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000973  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000720  00000000  00000000  00000b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000579  00000000  00000000  000012bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054c  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
}

//Empfang eines Bytes 
//****************************************************************************************
ISR(USART_RXC_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	bt_rec = UDR;
  88:	8c b1       	in	r24, 0x0c	; 12
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <initPorts>:

#include "bluetooth.h"

void initPorts()
{
	DDRD |= (1 << PD1);		// TxD - Transmit -> Ausgang
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << PD0);	// RxD - Recevice -> Eingang
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	81 bb       	out	0x11, r24	; 17
  a6:	08 95       	ret

000000a8 <initUart>:
}

void initUart()
{
	UBRRH = 0x00;	// define Baudrate	-> https://wormfood.net/avrbaudcalc.php
  a8:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x4D;
  aa:	8d e4       	ldi	r24, 0x4D	; 77
  ac:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << TXEN)|(1 << RXEN);	// transmission and recevive activate
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	88 61       	ori	r24, 0x18	; 24
  b2:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << UCSZ1)|(1 << UCSZ0);	// parity disabled, Asynchroner Mode 8 Datenbits pro Packet
  b4:	80 b5       	in	r24, 0x20	; 32
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 bd       	out	0x20, r24	; 32
  ba:	08 95       	ret

000000bc <main>:
		// Protokoll definieren
}

int main(void)
{
	initPorts();
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <initPorts>
    initUart();
  c0:	0e 94 54 00 	call	0xa8	; 0xa8 <initUart>
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0xe>
	while (1) 
    {
		while (!(UCSRA & (1 << UDRE)))	// UDRE = 1 sobald die Übertragung fertig ist
		{
			UDR = 'A';	// or UDR = 65
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	8c b9       	out	0x0c, r24	; 12
{
	initPorts();
    initUart();
	while (1) 
    {
		while (!(UCSRA & (1 << UDRE)))	// UDRE = 1 sobald die Übertragung fertig ist
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <main+0xa>
  ce:	fd cf       	rjmp	.-6      	; 0xca <main+0xe>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

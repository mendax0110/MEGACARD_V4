
TestUebungTimerCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000609  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000576  00000000  00000000  000007d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00000d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_9>:
#include <avr/portpins.h>
#include <avr/interrupt.h>
#include <util/delay.h>

ISR(TIMER0_OVF_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	TCNT0 = 200;
  7a:	88 ec       	ldi	r24, 0xC8	; 200
  7c:	82 bf       	out	0x32, r24	; 50
	PORTC ^= (1 << PC3);
  7e:	95 b3       	in	r25, 0x15	; 21
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	89 27       	eor	r24, r25
  84:	85 bb       	out	0x15, r24	; 21
}
  86:	9f 91       	pop	r25
  88:	8f 91       	pop	r24
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <init_ports>:

void init_ports()
{
	DDRC = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7);	// LED inidcator
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	87 bb       	out	0x17, r24	; 23
  a4:	08 95       	ret

000000a6 <init_timer0>:
}

void init_timer0()
{
	TCCR0 &= ~(WGM00);								// normal mode
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	89 7f       	andi	r24, 0xF9	; 249
  aa:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(WGM01);
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	8c 7f       	andi	r24, 0xFC	; 252
  b0:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM00)|(1 << CS01)|(1 << CS00);	// Toggle OCR0
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	83 61       	ori	r24, 0x13	; 19
  b6:	83 bf       	out	0x33, r24	; 51
	
	TCNT0 = 200;
  b8:	88 ec       	ldi	r24, 0xC8	; 200
  ba:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1 << TOIE0);
  bc:	89 b7       	in	r24, 0x39	; 57
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	89 bf       	out	0x39, r24	; 57
  c2:	08 95       	ret

000000c4 <main>:
}


int main(void)
{
	cli();
  c4:	f8 94       	cli
	init_ports();
  c6:	0e 94 4a 00 	call	0x94	; 0x94 <init_ports>
	init_timer0();
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <init_timer0>
	sei();
  ce:	78 94       	sei
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0xc>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

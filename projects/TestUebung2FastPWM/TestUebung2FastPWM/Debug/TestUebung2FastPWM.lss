
TestUebung2FastPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000753  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e7  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  000016af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001787  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  74:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_Ports>:
volatile uint8_t OCR0Var = 0;
volatile uint8_t timer = 0;

void init_Ports()
{
	DDRC = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC0);	// Indicator LED init ports
  80:	85 b3       	in	r24, 0x15	; 21
  82:	81 60       	ori	r24, 0x01	; 1
  84:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);		// signal on PB3
  86:	87 b3       	in	r24, 0x17	; 23
  88:	88 60       	ori	r24, 0x08	; 8
  8a:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB3);	
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	87 7f       	andi	r24, 0xF7	; 247
  90:	88 bb       	out	0x18, r24	; 24
  92:	08 95       	ret

00000094 <init_Fast_PWM>:
}

void init_Fast_PWM()
{
	TCCR0 |= (1 << WGM00)|(1 << COM01)|(1 << WGM01)|(1 << CS01)|(1 < CS00);	// inverting mode
  94:	83 b7       	in	r24, 0x33	; 51
  96:	8a 66       	ori	r24, 0x6A	; 106
  98:	83 bf       	out	0x33, r24	; 51
	
	
	while(1)
	{
		for(timer = 0; timer <= 10; timer++)
  9a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  9e:	15 c0       	rjmp	.+42     	; 0xca <init_Fast_PWM+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	8e e9       	ldi	r24, 0x9E	; 158
  a4:	94 e2       	ldi	r25, 0x24	; 36
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <init_Fast_PWM+0x12>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <init_Fast_PWM+0x1c>
  b0:	00 00       	nop
		{
			_delay_ms(1000);
			PORTC ^= (1 << PC1);
  b2:	95 b3       	in	r25, 0x15	; 21
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	89 27       	eor	r24, r25
  b8:	85 bb       	out	0x15, r24	; 21
			OCR0Var = 150;
  ba:	86 e9       	ldi	r24, 0x96	; 150
  bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <OCR0Var>
	TCCR0 |= (1 << WGM00)|(1 << COM01)|(1 << WGM01)|(1 << CS01)|(1 < CS00);	// inverting mode
	
	
	while(1)
	{
		for(timer = 0; timer <= 10; timer++)
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	8b 30       	cpi	r24, 0x0B	; 11
  d0:	38 f3       	brcs	.-50     	; 0xa0 <init_Fast_PWM+0xc>
			_delay_ms(1000);
			PORTC ^= (1 << PC1);
			OCR0Var = 150;
		}
		
		OCR0 = OCR0Var;
  d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <OCR0Var>
  d6:	8c bf       	out	0x3c, r24	; 60
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	8a e1       	ldi	r24, 0x1A	; 26
  dc:	97 eb       	ldi	r25, 0xB7	; 183
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <init_Fast_PWM+0x4a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <init_Fast_PWM+0x54>
  e8:	00 00       	nop
		_delay_ms(5000);
		
		for(timer = 0; timer <= 10; timer++)
  ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	15 c0       	rjmp	.+42     	; 0x11a <init_Fast_PWM+0x86>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	8e e9       	ldi	r24, 0x9E	; 158
  f4:	94 e2       	ldi	r25, 0x24	; 36
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <init_Fast_PWM+0x62>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <init_Fast_PWM+0x6c>
 100:	00 00       	nop
		{
			_delay_ms(1000);
			PORTC ^= (1 << PC2);
 102:	95 b3       	in	r25, 0x15	; 21
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	89 27       	eor	r24, r25
 108:	85 bb       	out	0x15, r24	; 21
			OCR0Var = 50;
 10a:	82 e3       	ldi	r24, 0x32	; 50
 10c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <OCR0Var>
		}
		
		OCR0 = OCR0Var;
		_delay_ms(5000);
		
		for(timer = 0; timer <= 10; timer++)
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11e:	8b 30       	cpi	r24, 0x0B	; 11
 120:	38 f3       	brcs	.-50     	; 0xf0 <init_Fast_PWM+0x5c>
			_delay_ms(1000);
			PORTC ^= (1 << PC2);
			OCR0Var = 50;
		}
		
		OCR0 = OCR0Var;
 122:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <OCR0Var>
 126:	8c bf       	out	0x3c, r24	; 60
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	8a e1       	ldi	r24, 0x1A	; 26
 12c:	97 eb       	ldi	r25, 0xB7	; 183
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <init_Fast_PWM+0x9a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <init_Fast_PWM+0xa4>
 138:	00 00       	nop
 13a:	af cf       	rjmp	.-162    	; 0x9a <init_Fast_PWM+0x6>

0000013c <main>:
	}
}

int main(void)
{
    cli();
 13c:	f8 94       	cli
	init_Ports();
 13e:	0e 94 3e 00 	call	0x7c	; 0x7c <init_Ports>
	init_Fast_PWM();
 142:	0e 94 4a 00 	call	0x94	; 0x94 <init_Fast_PWM>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>

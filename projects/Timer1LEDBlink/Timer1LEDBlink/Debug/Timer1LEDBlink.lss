
Timer1LEDBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ec  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061f  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030b  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b8  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 88 00 	call	0x110	; 0x110 <main>
  74:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initPorts>:
volatile uint8_t timerCount = 0;
volatile uint8_t blinkState = 0;

void initPorts()
{
    DDRC |= 0xFF;  // Port C als Ausgang
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	84 bb       	out	0x14, r24	; 20
    PORTC = 0x00; // Alle LEDs ausschalten
  82:	15 ba       	out	0x15, r1	; 21
	
    // for S0 and S1
    DDRA &= ~((1 << PA0) | (1 << PA1));
  84:	8a b3       	in	r24, 0x1a	; 26
  86:	8c 7f       	andi	r24, 0xFC	; 252
  88:	8a bb       	out	0x1a, r24	; 26
    PORTA |= ((1 << PA0) | (1 << PA1));
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	08 95       	ret

00000092 <initTimer1>:
}

void initTimer1()
{
    TCCR1B |= (1 << CS10) | (1 << CS11); // Prescaler 64
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	83 60       	ori	r24, 0x03	; 3
  96:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1 << TOIE1); // Overflow Interrupt aktivieren
  98:	89 b7       	in	r24, 0x39	; 57
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	89 bf       	out	0x39, r24	; 57
  9e:	08 95       	ret

000000a0 <setBlinkSpeed>:
}

void setBlinkSpeed()
{
    uint8_t switchState = PINA & ((1 << PA1) | (1 << PA0));
  a0:	89 b3       	in	r24, 0x19	; 25
  a2:	83 70       	andi	r24, 0x03	; 3

    if (switchState == 0x00) 
  a4:	21 f4       	brne	.+8      	; 0xae <setBlinkSpeed+0xe>
	{
        // S0 und S1 aus
        TCCR1B |= (1 << CS10) | (1 << CS11); // Prescaler 64
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	8e bd       	out	0x2e, r24	; 46
  ac:	08 95       	ret
    } 
	else if (switchState == (1 << PA0)) 
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	39 f4       	brne	.+14     	; 0xc0 <setBlinkSpeed+0x20>
	{
        // S0 an, S1 aus
        TCCR1B |= (1 << CS11); // Prescaler 8
  b2:	8e b5       	in	r24, 0x2e	; 46
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	8e bd       	out	0x2e, r24	; 46
        TCCR1B &= ~(1 << CS10);
  b8:	8e b5       	in	r24, 0x2e	; 46
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	8e bd       	out	0x2e, r24	; 46
  be:	08 95       	ret
    } 
	else if (switchState == (1 << PA1)) 
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	39 f4       	brne	.+14     	; 0xd2 <setBlinkSpeed+0x32>
	{
        // S0 aus, S1 an
        TCCR1B |= (1 << CS10); // Prescaler 1
  c4:	8e b5       	in	r24, 0x2e	; 46
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	8e bd       	out	0x2e, r24	; 46
        TCCR1B &= ~(1 << CS11);
  ca:	8e b5       	in	r24, 0x2e	; 46
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	8e bd       	out	0x2e, r24	; 46
  d0:	08 95       	ret
    } 
	else if (switchState == (1 << PA1) | (1 << PA0))
	{
        // S0 und S1 an
        TCCR1B |= (1 << CS10); // Prescaler 1
  d2:	8e b5       	in	r24, 0x2e	; 46
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8e bd       	out	0x2e, r24	; 46
        TCCR1B |= (1 << CS11); // Prescaler 8
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	8e bd       	out	0x2e, r24	; 46
  de:	08 95       	ret

000000e0 <__vector_8>:
    }
}

ISR(TIMER1_OVF_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
    timerCount++; // Timer erhöhen
  ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timerCount>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timerCount>

    if (timerCount == 60)
  f6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timerCount>
  fa:	8c 33       	cpi	r24, 0x3C	; 60
  fc:	19 f4       	brne	.+6      	; 0x104 <__vector_8+0x24>
	{
        blinkState = 1; // Blinken aktivieren
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    }
}
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void)
{
    initPorts();
 110:	0e 94 3e 00 	call	0x7c	; 0x7c <initPorts>
    initTimer1();
 114:	0e 94 49 00 	call	0x92	; 0x92 <initTimer1>
    sei(); // Interrupts aktivieren
 118:	78 94       	sei

    while (1)
    {
        setBlinkSpeed();
 11a:	0e 94 50 00 	call	0xa0	; 0xa0 <setBlinkSpeed>

        if (blinkState)
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 122:	88 23       	and	r24, r24
 124:	69 f0       	breq	.+26     	; 0x140 <main+0x30>
        {
            PORTC ^= 0xFF; // Alle LEDs umschalten
 126:	85 b3       	in	r24, 0x15	; 21
 128:	80 95       	com	r24
 12a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f e7       	ldi	r18, 0x7F	; 127
 12e:	8f e4       	ldi	r24, 0x4F	; 79
 130:	92 e1       	ldi	r25, 0x12	; 18
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x22>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x2c>
 13c:	00 00       	nop
 13e:	ed cf       	rjmp	.-38     	; 0x11a <main+0xa>
            _delay_ms(500);
        }
        else
        {
            PORTC = 0xFF; // Alle LEDs ausschalten
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	85 bb       	out	0x15, r24	; 21
 144:	ea cf       	rjmp	.-44     	; 0x11a <main+0xa>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>


RotateOppositeLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000259  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001426  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define TASTER PA0
#define	T_PRELL	20 // debounce time for button in ms

int main(void)
{
	DDRA = 0x00;	// button port: input
  6c:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x0F;	// enable pull-ups for buttons S0, S1, S2, S3
  6e:	8f e0       	ldi	r24, 0x0F	; 15
  70:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;	// LED port: output
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x01;	// turn on LED0, turn off LED1..7
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	85 bb       	out	0x15, r24	; 21
	
	while(1)
	{
		if(!(PINA & (1 << TASTER)))
  7a:	c8 99       	sbic	0x19, 0	; 25
  7c:	19 c0       	rjmp	.+50     	; 0xb0 <main+0x44>
		{
			// button Sx is pressed
			PORTC = (PORTC >> 1) | (PORTC << 7);	// rotate LED status on bit to the right
  7e:	25 b3       	in	r18, 0x15	; 21
  80:	95 b3       	in	r25, 0x15	; 21
  82:	30 e8       	ldi	r19, 0x80	; 128
  84:	93 9f       	mul	r25, r19
  86:	c0 01       	movw	r24, r0
  88:	11 24       	eor	r1, r1
  8a:	92 2f       	mov	r25, r18
  8c:	96 95       	lsr	r25
  8e:	89 2b       	or	r24, r25
  90:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e5       	ldi	r24, 0x5F	; 95
  94:	9a ee       	ldi	r25, 0xEA	; 234
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x2a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
			_delay_ms(T_PRELL);	// debounce for button closing
			
			while(!(PINA & (1 << TASTER)));	// wait while button Sx is pressed
  9e:	c8 9b       	sbis	0x19, 0	; 25
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x32>
  a2:	8f e5       	ldi	r24, 0x5F	; 95
  a4:	9a ee       	ldi	r25, 0xEA	; 234
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
  ae:	e5 cf       	rjmp	.-54     	; 0x7a <main+0xe>
  b0:	9f e7       	ldi	r25, 0x7F	; 127
  b2:	29 ea       	ldi	r18, 0xA9	; 169
  b4:	33 e0       	ldi	r19, 0x03	; 3
  b6:	91 50       	subi	r25, 0x01	; 1
  b8:	20 40       	sbci	r18, 0x00	; 0
  ba:	30 40       	sbci	r19, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
  c2:	db cf       	rjmp	.-74     	; 0x7a <main+0xe>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>


ADCFreeRunningMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000160  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000060e  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000578  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000242  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000356  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initPorts>:

volatile uint8_t ADC_value = 0;

void initPorts()
{
	DDRA &= ~(1 << PA0);
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1 << PA0);
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	8b bb       	out	0x1b, r24	; 27
	
	DDRC |= 0xFF;
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7);
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	80 68       	ori	r24, 0x80	; 128
  92:	85 bb       	out	0x15, r24	; 21
  94:	08 95       	ret

00000096 <initADC>:
}

void initADC()
{
	ADCSRA |= (1 << ADEN); // enable ADC
  96:	86 b1       	in	r24, 0x06	; 6
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADATE); // tigger source on
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2); // Prescaler 128 -> Teilung fck/128 -> clk 93,75
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	87 60       	ori	r24, 0x07	; 7
  a6:	86 b9       	out	0x06, r24	; 6
	
	SFIOR &= ~(1 << ADTS0)&~(1 << ADTS1)&~(1 << ADTS2);
  a8:	80 b7       	in	r24, 0x30	; 48
  aa:	8f 71       	andi	r24, 0x1F	; 31
  ac:	80 bf       	out	0x30, r24	; 48
	
	ADMUX |= (1 << MUX0); // set channel 0
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << REFS0); // ser external ref for voltage AVCC
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << ADLAR); //  presentation of the bits in the ADC reg
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	87 b9       	out	0x07, r24	; 7
  c0:	08 95       	ret

000000c2 <main>:
}

int main(void)
{
	cli();
  c2:	f8 94       	cli
	initPorts();
  c4:	0e 94 3e 00 	call	0x7c	; 0x7c <initPorts>
	initADC();
  c8:	0e 94 4b 00 	call	0x96	; 0x96 <initADC>
	sei();
  cc:	78 94       	sei
	
	ADCSRA |= (1 << ADSC); //start meas- free running mode
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	86 b9       	out	0x06, r24	; 6
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <main+0x20>
	
	while(1)
	{
		while(ADCSRA & (1 << ADIF))
		{
			ADC_value = ADCH;
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			PORTC = ADC_value;
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	85 bb       	out	0x15, r24	; 21
	
	ADCSRA |= (1 << ADSC); //start meas- free running mode
	
	while(1)
	{
		while(ADCSRA & (1 << ADIF))
  e2:	34 99       	sbic	0x06, 4	; 6
  e4:	f8 cf       	rjmp	.-16     	; 0xd6 <main+0x14>
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <main+0x20>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

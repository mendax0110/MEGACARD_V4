
rectangleSingal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000701  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f9  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e5  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000127  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  64:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_9>:
#include <avr/portpins.h>
#include <avr/interrupt.h>
#include <util/delay.h>

ISR(TIMER0_OVF_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	5f 93       	push	r21
  7a:	6f 93       	push	r22
  7c:	7f 93       	push	r23
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
  82:	af 93       	push	r26
  84:	bf 93       	push	r27
	TCNT0 = 0xFF - (255 * OCR0) / 100;
  86:	8c b7       	in	r24, 0x3c	; 60
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	82 9f       	mul	r24, r18
  8c:	c0 01       	movw	r24, r0
  8e:	11 24       	eor	r1, r1
  90:	64 e6       	ldi	r22, 0x64	; 100
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	0e 94 a4 00 	call	0x148	; 0x148 <__divmodhi4>
  98:	60 95       	com	r22
  9a:	62 bf       	out	0x32, r22	; 50
	PORTB ^= (1<<PB3);
  9c:	98 b3       	in	r25, 0x18	; 24
  9e:	88 e0       	ldi	r24, 0x08	; 8
  a0:	89 27       	eor	r24, r25
  a2:	88 bb       	out	0x18, r24	; 24
}
  a4:	bf 91       	pop	r27
  a6:	af 91       	pop	r26
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	7f 91       	pop	r23
  ae:	6f 91       	pop	r22
  b0:	5f 91       	pop	r21
  b2:	2f 91       	pop	r18
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <init_timer0>:

void init_timer0()
{
	TCCR0 |= (1 << WGM00) | (1 << WGM01);	// Fast PWM Mode
  be:	83 b7       	in	r24, 0x33	; 51
  c0:	88 64       	ori	r24, 0x48	; 72
  c2:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);					// Clear OC0 on compare match, set OC0 at BOTTOM
  c4:	83 b7       	in	r24, 0x33	; 51
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS02) | (1 << CS00);		// F_CPU: 1024
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	85 60       	ori	r24, 0x05	; 5
  ce:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = 25;								// 25% duty cycle
  d0:	89 e1       	ldi	r24, 0x19	; 25
  d2:	8c bf       	out	0x3c, r24	; 60
	TCNT0 = 0xFF - (255 * OCR0) / 100;		// set initial timer value
  d4:	8c b7       	in	r24, 0x3c	; 60
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	82 9f       	mul	r24, r18
  da:	c0 01       	movw	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	64 e6       	ldi	r22, 0x64	; 100
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	0e 94 a4 00 	call	0x148	; 0x148 <__divmodhi4>
  e6:	60 95       	com	r22
  e8:	62 bf       	out	0x32, r22	; 50
	TIMSK |= (1 << TOIE0);					// Overflow Interrupts enabled
  ea:	89 b7       	in	r24, 0x39	; 57
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	89 bf       	out	0x39, r24	; 57
  f0:	08 95       	ret

000000f2 <init_ports>:
}

void init_ports()
{
	DDRB = (1 << PB3);		// PB3 - Ausgang Toggle
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	08 95       	ret

000000f8 <main>:
}

int main(void)
{	
	cli();			// lock	
  f8:	f8 94       	cli
	init_ports();	// init the ports
  fa:	0e 94 79 00 	call	0xf2	; 0xf2 <init_ports>
	init_timer0();	// init the timer
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <init_timer0>
	sei();			// enable global interrupts
 102:	78 94       	sei
	
	while (1) 
	{
		// cycle through different duty cycles
		OCR0 = 25;
 104:	89 e1       	ldi	r24, 0x19	; 25
 106:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	8e e9       	ldi	r24, 0x9E	; 158
 10c:	94 e2       	ldi	r25, 0x24	; 36
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x16>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x20>
 118:	00 00       	nop
		_delay_ms(1000);
		OCR0 = 50;
 11a:	82 e3       	ldi	r24, 0x32	; 50
 11c:	8c bf       	out	0x3c, r24	; 60
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	8e e9       	ldi	r24, 0x9E	; 158
 122:	94 e2       	ldi	r25, 0x24	; 36
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x2c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x36>
 12e:	00 00       	nop
		_delay_ms(1000);
		OCR0 = 75;
 130:	8b e4       	ldi	r24, 0x4B	; 75
 132:	8c bf       	out	0x3c, r24	; 60
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	8e e9       	ldi	r24, 0x9E	; 158
 138:	94 e2       	ldi	r25, 0x24	; 36
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x42>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x4c>
 144:	00 00       	nop
 146:	de cf       	rjmp	.-68     	; 0x104 <main+0xc>

00000148 <__divmodhi4>:
 148:	97 fb       	bst	r25, 7
 14a:	07 2e       	mov	r0, r23
 14c:	16 f4       	brtc	.+4      	; 0x152 <__divmodhi4+0xa>
 14e:	00 94       	com	r0
 150:	07 d0       	rcall	.+14     	; 0x160 <__divmodhi4_neg1>
 152:	77 fd       	sbrc	r23, 7
 154:	09 d0       	rcall	.+18     	; 0x168 <__divmodhi4_neg2>
 156:	0e 94 b8 00 	call	0x170	; 0x170 <__udivmodhi4>
 15a:	07 fc       	sbrc	r0, 7
 15c:	05 d0       	rcall	.+10     	; 0x168 <__divmodhi4_neg2>
 15e:	3e f4       	brtc	.+14     	; 0x16e <__divmodhi4_exit>

00000160 <__divmodhi4_neg1>:
 160:	90 95       	com	r25
 162:	81 95       	neg	r24
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	08 95       	ret

00000168 <__divmodhi4_neg2>:
 168:	70 95       	com	r23
 16a:	61 95       	neg	r22
 16c:	7f 4f       	sbci	r23, 0xFF	; 255

0000016e <__divmodhi4_exit>:
 16e:	08 95       	ret

00000170 <__udivmodhi4>:
 170:	aa 1b       	sub	r26, r26
 172:	bb 1b       	sub	r27, r27
 174:	51 e1       	ldi	r21, 0x11	; 17
 176:	07 c0       	rjmp	.+14     	; 0x186 <__udivmodhi4_ep>

00000178 <__udivmodhi4_loop>:
 178:	aa 1f       	adc	r26, r26
 17a:	bb 1f       	adc	r27, r27
 17c:	a6 17       	cp	r26, r22
 17e:	b7 07       	cpc	r27, r23
 180:	10 f0       	brcs	.+4      	; 0x186 <__udivmodhi4_ep>
 182:	a6 1b       	sub	r26, r22
 184:	b7 0b       	sbc	r27, r23

00000186 <__udivmodhi4_ep>:
 186:	88 1f       	adc	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	a9 f7       	brne	.-22     	; 0x178 <__udivmodhi4_loop>
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>

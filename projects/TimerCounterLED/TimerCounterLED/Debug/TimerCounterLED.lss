
TimerCounterLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000016a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005de  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000564  00000000  00000000  000007de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000214  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034b  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  000012f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define TEILER_SW_2 5859     // Software pre-scaler divisor factor (kS) for 0.25s blink rate
#define TEILER_SW_3 2930     // Software pre-scaler divisor factor (kS) for 0.125s blink rate

int main( void )  // *** Main program ***
{
	DDRC  = 0xFF; // Configure LED port as output
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00; // Turn off all LEDs
  80:	15 ba       	out	0x15, r1	; 21
	TCCR0 = 0x02; // Set hardware pre-scaler factor: kH = 1/8
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	83 bf       	out	0x33, r24	; 51

	TIMSK |= (1 << TOIE0); // Enable individual Timer0 Overflow interrupt
  86:	89 b7       	in	r24, 0x39	; 57
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	89 bf       	out	0x39, r24	; 57
	sei();        // Enable global interrupts
  8c:	78 94       	sei
  8e:	ff cf       	rjmp	.-2      	; 0x8e <main+0x12>

00000090 <__vector_9>:
	while(1) {}   // Endless loop without action
} // End of main

ISR(TIMER0_OVF_vect) // *** ISR for Timer0 Overflow ***
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	static unsigned int count_sw = 0; // Declare software counter as static
	// => variable value remains after leaving the ISR
	count_sw++; // Increment software counter
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(count_sw >= TEILER_SW_1)  // Maximal value reached for 0.5s blink rate?
  b2:	87 3c       	cpi	r24, 0xC7	; 199
  b4:	2d e2       	ldi	r18, 0x2D	; 45
  b6:	92 07       	cpc	r25, r18
  b8:	40 f0       	brcs	.+16     	; 0xca <__vector_9+0x3a>
	{
		count_sw = 0;     // Reset software counter
  ba:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC ^= 0xFF;	  // Toggle all LEDs
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	80 95       	com	r24
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <__vector_9+0x52>
	}
	else if(count_sw >= TEILER_SW_2) // Maximal value reached for 0.25s blink rate?
  ca:	83 3e       	cpi	r24, 0xE3	; 227
  cc:	26 e1       	ldi	r18, 0x16	; 22
  ce:	92 07       	cpc	r25, r18
  d0:	18 f0       	brcs	.+6      	; 0xd8 <__vector_9+0x48>
	{
		PORTC = 0xAA;     // Turn on odd numbered LEDs
  d2:	8a ea       	ldi	r24, 0xAA	; 170
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <__vector_9+0x52>
	}
	else if(count_sw >= TEILER_SW_3) // Maximal value reached for 0.125s blink rate?
  d8:	82 37       	cpi	r24, 0x72	; 114
  da:	9b 40       	sbci	r25, 0x0B	; 11
  dc:	10 f0       	brcs	.+4      	; 0xe2 <__vector_9+0x52>
	{
		PORTC = 0x55;     // Turn on even numbered LEDs
  de:	85 e5       	ldi	r24, 0x55	; 85
  e0:	85 bb       	out	0x15, r24	; 21
	}
} // End of ISR
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	2f 91       	pop	r18
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>

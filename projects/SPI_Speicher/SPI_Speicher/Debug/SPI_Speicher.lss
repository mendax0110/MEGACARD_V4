
SPI_Speicher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000158  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d1  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005cd  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026a  00000000  00000000  00000e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000001f  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000014ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_ports>:

unsigned char SPDR_Content = 0;

void init_ports()
{
	DDRC |= (1<<PC7); //indikator LED setzen
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC7); //LED on
  82:	85 b3       	in	r24, 0x15	; 21
  84:	80 68       	ori	r24, 0x80	; 128
  86:	85 bb       	out	0x15, r24	; 21
	DDRB |= (1<<PB7) | (1<<PB5); //SPI - SCK, MOSI
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	80 6a       	ori	r24, 0xA0	; 160
  8c:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<PD7); //SPI - ChipSelect
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	80 68       	ori	r24, 0x80	; 128
  92:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6); //SPI - MISO
  94:	87 b3       	in	r24, 0x17	; 23
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	87 bb       	out	0x17, r24	; 23
  9a:	08 95       	ret

0000009c <init_SPI>:
}

void init_SPI()
{
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0); // SPI - Enable, MSTR, fosc = fcpu/8
  9c:	8d b1       	in	r24, 0x0d	; 13
  9e:	81 65       	ori	r24, 0x51	; 81
  a0:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1<<SPI2X);
  a2:	8e b1       	in	r24, 0x0e	; 14
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8e b9       	out	0x0e, r24	; 14
	SPDR_Content = 0x00; // Dateninhalt setzen
  a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  ac:	08 95       	ret

000000ae <SPI_Transmit>:
}

char SPI_Transmit(unsigned char value)
{
	SPDR = value;		//Write to and Update register
  ae:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & (1<<SPIF)));	//wait until send is completed
  b0:	77 9b       	sbis	0x0e, 7	; 14
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <SPI_Transmit+0x2>
	return SPDR;					// DAtenblatt Seite 140 Hilfe
  b4:	8f b1       	in	r24, 0x0f	; 15
}
  b6:	08 95       	ret

000000b8 <main>:

int main(void)
{
	unsigned char dummy1, dummy2, dummy3, dummy4, dummy5;
	
	init_ports();
  b8:	0e 94 3e 00 	call	0x7c	; 0x7c <init_ports>
	init_SPI();
  bc:	0e 94 4e 00 	call	0x9c	; 0x9c <init_SPI>
	
	while (1)
	{
		//SPDR = 0x10;									// SPI - Datenregister ->0x10
		dummy1 = SPI_Transmit(EEPROM_M95M01_WRITE);		// Write to and Update Register
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 57 00 	call	0xae	; 0xae <SPI_Transmit>
		dummy2 = SPI_Transmit(0x00);					// Write to Address 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 57 00 	call	0xae	; 0xae <SPI_Transmit>
		dummy3 = SPI_Transmit(0x00);					// Write to Address 0
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 57 00 	call	0xae	; 0xae <SPI_Transmit>
		dummy4 = SPI_Transmit(0x00);					// Write to Address 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 57 00 	call	0xae	; 0xae <SPI_Transmit>
		dummy5 = SPI_Transmit(0xAA);					// Write content AA to address 00
  d8:	8a ea       	ldi	r24, 0xAA	; 170
  da:	0e 94 57 00 	call	0xae	; 0xae <SPI_Transmit>
  de:	f0 cf       	rjmp	.-32     	; 0xc0 <main+0x8>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>

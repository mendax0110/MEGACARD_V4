
TestUebung3TimerCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c6  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061f  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000324  00000000  00000000  00001099  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bd  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ec  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  74:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <util/delay.h>

volatile uint8_t TCNT0Var = 0;

ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	TCNT0 = TCNT0Var;
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	82 bf       	out	0x32, r24	; 50
	
	PORTC ^= (1 << PC7);
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	80 58       	subi	r24, 0x80	; 128
  92:	85 bb       	out	0x15, r24	; 21
}
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <init_Ports>:

void init_Ports()
{
	DDRC = 0xFF;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC ^= (1 << PC6);	// inicator LED for init Ports
  a4:	95 b3       	in	r25, 0x15	; 21
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	89 27       	eor	r24, r25
  aa:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);
  ac:	87 b3       	in	r24, 0x17	; 23
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	08 95       	ret

000000b4 <init_Timer0>:
}

void init_Timer0()
{
	TCCR0 &= ~(1 << WGM00);		// normal mode
  b4:	83 b7       	in	r24, 0x33	; 51
  b6:	8f 7b       	andi	r24, 0xBF	; 191
  b8:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << WGM01);
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	87 7f       	andi	r24, 0xF7	; 247
  be:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM00)|(1 << CS01)|(1 << CS00);	// toggle mode
  c0:	83 b7       	in	r24, 0x33	; 51
  c2:	83 61       	ori	r24, 0x13	; 19
  c4:	83 bf       	out	0x33, r24	; 51
	
	
	for(TCNT0Var = 0; TCNT0Var <= 10; TCNT0Var++)
  c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  ca:	53 c0       	rjmp	.+166    	; 0x172 <init_Timer0+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f e7       	ldi	r18, 0x7F	; 127
  ce:	8f e4       	ldi	r24, 0x4F	; 79
  d0:	92 e1       	ldi	r25, 0x12	; 18
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <init_Timer0+0x1e>
  da:	00 c0       	rjmp	.+0      	; 0xdc <init_Timer0+0x28>
  dc:	00 00       	nop
	{
		_delay_ms(500);
		PORTC ^= (1 << PC5);	// inidcator LED for ISR
  de:	95 b3       	in	r25, 0x15	; 21
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	89 27       	eor	r24, r25
  e4:	85 bb       	out	0x15, r24	; 21
  e6:	2f e7       	ldi	r18, 0x7F	; 127
  e8:	8f e4       	ldi	r24, 0x4F	; 79
  ea:	92 e1       	ldi	r25, 0x12	; 18
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <init_Timer0+0x38>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <init_Timer0+0x42>
  f6:	00 00       	nop
		_delay_ms(500);
		PORTC ^= (1 << PC4);
  f8:	95 b3       	in	r25, 0x15	; 21
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	89 27       	eor	r24, r25
  fe:	85 bb       	out	0x15, r24	; 21
 100:	2f e7       	ldi	r18, 0x7F	; 127
 102:	8f e4       	ldi	r24, 0x4F	; 79
 104:	92 e1       	ldi	r25, 0x12	; 18
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <init_Timer0+0x52>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <init_Timer0+0x5c>
 110:	00 00       	nop
		_delay_ms(500);
		PORTC ^= (1 << PC3);
 112:	95 b3       	in	r25, 0x15	; 21
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	89 27       	eor	r24, r25
 118:	85 bb       	out	0x15, r24	; 21
 11a:	2f e7       	ldi	r18, 0x7F	; 127
 11c:	8f e4       	ldi	r24, 0x4F	; 79
 11e:	92 e1       	ldi	r25, 0x12	; 18
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <init_Timer0+0x6c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <init_Timer0+0x76>
 12a:	00 00       	nop
		_delay_ms(500);
		PORTC ^= (1 << PC2);
 12c:	95 b3       	in	r25, 0x15	; 21
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	89 27       	eor	r24, r25
 132:	85 bb       	out	0x15, r24	; 21
 134:	2f e7       	ldi	r18, 0x7F	; 127
 136:	8f e4       	ldi	r24, 0x4F	; 79
 138:	92 e1       	ldi	r25, 0x12	; 18
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <init_Timer0+0x86>
 142:	00 c0       	rjmp	.+0      	; 0x144 <init_Timer0+0x90>
 144:	00 00       	nop
		_delay_ms(500);
		PORTC ^= (1 << PC1);
 146:	95 b3       	in	r25, 0x15	; 21
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	89 27       	eor	r24, r25
 14c:	85 bb       	out	0x15, r24	; 21
 14e:	2f e7       	ldi	r18, 0x7F	; 127
 150:	8f e4       	ldi	r24, 0x4F	; 79
 152:	92 e1       	ldi	r25, 0x12	; 18
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <init_Timer0+0xa0>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <init_Timer0+0xaa>
 15e:	00 00       	nop
		_delay_ms(500);
		PORTC ^= (1 << PC0);
 160:	95 b3       	in	r25, 0x15	; 21
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	89 27       	eor	r24, r25
 166:	85 bb       	out	0x15, r24	; 21
	TCCR0 &= ~(1 << WGM00);		// normal mode
	TCCR0 &= ~(1 << WGM01);
	TCCR0 |= (1 << COM00)|(1 << CS01)|(1 << CS00);	// toggle mode
	
	
	for(TCNT0Var = 0; TCNT0Var <= 10; TCNT0Var++)
 168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 172:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 176:	8b 30       	cpi	r24, 0x0B	; 11
 178:	08 f4       	brcc	.+2      	; 0x17c <init_Timer0+0xc8>
 17a:	a8 cf       	rjmp	.-176    	; 0xcc <init_Timer0+0x18>
		PORTC ^= (1 << PC1);
		_delay_ms(500);
		PORTC ^= (1 << PC0);
	}
	
	TCNT0 = TCNT0Var;
 17c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 180:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1 << TOIE0);
 182:	89 b7       	in	r24, 0x39	; 57
 184:	81 60       	ori	r24, 0x01	; 1
 186:	89 bf       	out	0x39, r24	; 57
 188:	08 95       	ret

0000018a <main>:
}

int main(void)
{
	cli();
 18a:	f8 94       	cli
	init_Ports();
 18c:	0e 94 50 00 	call	0xa0	; 0xa0 <init_Ports>
	init_Timer0();
 190:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_Timer0>
	sei();
 194:	78 94       	sei
 196:	ff cf       	rjmp	.-2      	; 0x196 <main+0xc>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>

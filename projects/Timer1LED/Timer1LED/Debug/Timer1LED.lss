
Timer1LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000316  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  0000038a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000768  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000613  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031d  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e0  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001de  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  74:	0c 94 89 01 	jmp	0x312	; 0x312 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_5>:
long int Time = 0;

volatile long int Timer1Counter = 0;

ISR(TIMER1_CAPT_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 92       	push	r8
  88:	9f 92       	push	r9
  8a:	af 92       	push	r10
  8c:	bf 92       	push	r11
  8e:	cf 92       	push	r12
  90:	df 92       	push	r13
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	2f 93       	push	r18
  98:	3f 93       	push	r19
  9a:	4f 93       	push	r20
  9c:	5f 93       	push	r21
  9e:	6f 93       	push	r22
  a0:	7f 93       	push	r23
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	af 93       	push	r26
  a8:	bf 93       	push	r27
  aa:	ef 93       	push	r30
  ac:	ff 93       	push	r31
	ending_edge = 256 * ICR1H + ICR1L;
  ae:	c7 b4       	in	r12, 0x27	; 39
  b0:	d1 2c       	mov	r13, r1
  b2:	dc 2c       	mov	r13, r12
  b4:	cc 24       	eor	r12, r12
  b6:	86 b5       	in	r24, 0x26	; 38
  b8:	c8 0e       	add	r12, r24
  ba:	d1 1c       	adc	r13, r1
  bc:	0d 2c       	mov	r0, r13
  be:	00 0c       	add	r0, r0
  c0:	ee 08       	sbc	r14, r14
  c2:	ff 08       	sbc	r15, r15
  c4:	c0 92 70 00 	sts	0x0070, r12	; 0x800070 <ending_edge>
  c8:	d0 92 71 00 	sts	0x0071, r13	; 0x800071 <ending_edge+0x1>
  cc:	e0 92 72 00 	sts	0x0072, r14	; 0x800072 <ending_edge+0x2>
  d0:	f0 92 73 00 	sts	0x0073, r15	; 0x800073 <ending_edge+0x3>
	clocks = ending_edge - starting_edge + Timer1Counter * 65535;
  d4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <starting_edge>
  d8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <starting_edge+0x1>
  dc:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <starting_edge+0x2>
  e0:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <starting_edge+0x3>
  e4:	46 01       	movw	r8, r12
  e6:	57 01       	movw	r10, r14
  e8:	88 1a       	sub	r8, r24
  ea:	99 0a       	sbc	r9, r25
  ec:	aa 0a       	sbc	r10, r26
  ee:	bb 0a       	sbc	r11, r27
  f0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  fc:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 100:	af ef       	ldi	r26, 0xFF	; 255
 102:	bf ef       	ldi	r27, 0xFF	; 255
 104:	0e 94 4d 01 	call	0x29a	; 0x29a <__muluhisi3>
 108:	68 0d       	add	r22, r8
 10a:	79 1d       	adc	r23, r9
 10c:	8a 1d       	adc	r24, r10
 10e:	9b 1d       	adc	r25, r11
 110:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <clocks>
 114:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <clocks+0x1>
 118:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <clocks+0x2>
 11c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <clocks+0x3>
	Time = clocks / 1500; // Timer in ms (12Mhz/8) -> 1 500 000 / 1500 -> 1000Hz, das entspricht 1 ms
 120:	2c ed       	ldi	r18, 0xDC	; 220
 122:	35 e0       	ldi	r19, 0x05	; 5
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	0e 94 2e 01 	call	0x25c	; 0x25c <__divmodsi4>
 12c:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <Time>
 130:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <Time+0x1>
 134:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <Time+0x2>
 138:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <Time+0x3>
	Timer1Counter = 0;
 13c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 140:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 144:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 148:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	starting_edge = ending_edge;
 14c:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <starting_edge>
 150:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <starting_edge+0x1>
 154:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <starting_edge+0x2>
 158:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <starting_edge+0x3>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	df 90       	pop	r13
 17a:	cf 90       	pop	r12
 17c:	bf 90       	pop	r11
 17e:	af 90       	pop	r10
 180:	9f 90       	pop	r9
 182:	8f 90       	pop	r8
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
	Timer1Counter++;
 1a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a8:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ac:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	a1 1d       	adc	r26, r1
 1b4:	b1 1d       	adc	r27, r1
 1b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1be:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1c2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <initPorts>:

void initPorts()
{
	DDRC |= 0xFF; // portc output
 1d8:	84 b3       	in	r24, 0x14	; 20
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF; // all led dark
 1de:	85 bb       	out	0x15, r24	; 21

	DDRA &= ~(1 << PA0); // for S0
 1e0:	8a b3       	in	r24, 0x1a	; 26
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0); // for S0
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	8b bb       	out	0x1b, r24	; 27

	DDRD &= ~(1 << PD6); // ICP Input Capture
 1ec:	81 b3       	in	r24, 0x11	; 17
 1ee:	8f 7b       	andi	r24, 0xBF	; 191
 1f0:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1 << PD6); // Hi-Z, cuz connected to PA0 (Pull up)
 1f2:	82 b3       	in	r24, 0x12	; 18
 1f4:	8f 7b       	andi	r24, 0xBF	; 191
 1f6:	82 bb       	out	0x12, r24	; 18
	
	DDRC |= (1 << PC0);   // Set PC0 as output
 1f8:	84 b3       	in	r24, 0x14	; 20
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC0);  // Set PC0 high initially
 1fe:	85 b3       	in	r24, 0x15	; 21
 200:	81 60       	ori	r24, 0x01	; 1
 202:	85 bb       	out	0x15, r24	; 21
 204:	08 95       	ret

00000206 <initTimer1>:
}

void initTimer1()
{
	TCCR1A = 0x00;                         // normal mode
 206:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << ICNC1) | (1 << CS11);  // prescaler 8bit, noise canceller -> 1.5Mhz -> 0.66us -> Zeiteinheit
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	82 68       	ori	r24, 0x82	; 130
 20c:	8e bd       	out	0x2e, r24	; 46
 20e:	08 95       	ret

00000210 <toggleLEDs>:
}

void toggleLEDs()
{
	PORTC ^= 0xFF;  // Toggle all LEDs
 210:	85 b3       	in	r24, 0x15	; 21
 212:	80 95       	com	r24
 214:	85 bb       	out	0x15, r24	; 21
 216:	08 95       	ret

00000218 <main>:
}


int main(void)
{
	cli();
 218:	f8 94       	cli
	initPorts();
 21a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <initPorts>
	initTimer1();
 21e:	0e 94 03 01 	call	0x206	; 0x206 <initTimer1>
	sei();
 222:	78 94       	sei

	while (1)
	{
		if (!(PINA & (1 << PA0)))  // Check if S0 button is pressed
 224:	c8 99       	sbic	0x19, 0	; 25
 226:	0c c0       	rjmp	.+24     	; 0x240 <main+0x28>
		{
			toggleLEDs();
 228:	0e 94 08 01 	call	0x210	; 0x210 <toggleLEDs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	2f e7       	ldi	r18, 0x7F	; 127
 22e:	89 ea       	ldi	r24, 0xA9	; 169
 230:	93 e0       	ldi	r25, 0x03	; 3
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x1a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x24>
 23c:	00 00       	nop
 23e:	f2 cf       	rjmp	.-28     	; 0x224 <main+0xc>
			_delay_ms(100);  // Debounce delay
		}
		else if (!(PINA & (1 << PA1)))  // Check if S1 button is pressed
 240:	c9 99       	sbic	0x19, 1	; 25
 242:	f0 cf       	rjmp	.-32     	; 0x224 <main+0xc>
		{
			toggleLEDs();
 244:	0e 94 08 01 	call	0x210	; 0x210 <toggleLEDs>
 248:	2f e7       	ldi	r18, 0x7F	; 127
 24a:	89 ea       	ldi	r24, 0xA9	; 169
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x36>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x40>
 258:	00 00       	nop
 25a:	e4 cf       	rjmp	.-56     	; 0x224 <main+0xc>

0000025c <__divmodsi4>:
 25c:	05 2e       	mov	r0, r21
 25e:	97 fb       	bst	r25, 7
 260:	1e f4       	brtc	.+6      	; 0x268 <__divmodsi4+0xc>
 262:	00 94       	com	r0
 264:	0e 94 45 01 	call	0x28a	; 0x28a <__negsi2>
 268:	57 fd       	sbrc	r21, 7
 26a:	07 d0       	rcall	.+14     	; 0x27a <__divmodsi4_neg2>
 26c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__udivmodsi4>
 270:	07 fc       	sbrc	r0, 7
 272:	03 d0       	rcall	.+6      	; 0x27a <__divmodsi4_neg2>
 274:	4e f4       	brtc	.+18     	; 0x288 <__divmodsi4_exit>
 276:	0c 94 45 01 	jmp	0x28a	; 0x28a <__negsi2>

0000027a <__divmodsi4_neg2>:
 27a:	50 95       	com	r21
 27c:	40 95       	com	r20
 27e:	30 95       	com	r19
 280:	21 95       	neg	r18
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	4f 4f       	sbci	r20, 0xFF	; 255
 286:	5f 4f       	sbci	r21, 0xFF	; 255

00000288 <__divmodsi4_exit>:
 288:	08 95       	ret

0000028a <__negsi2>:
 28a:	90 95       	com	r25
 28c:	80 95       	com	r24
 28e:	70 95       	com	r23
 290:	61 95       	neg	r22
 292:	7f 4f       	sbci	r23, 0xFF	; 255
 294:	8f 4f       	sbci	r24, 0xFF	; 255
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	08 95       	ret

0000029a <__muluhisi3>:
 29a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__umulhisi3>
 29e:	a5 9f       	mul	r26, r21
 2a0:	90 0d       	add	r25, r0
 2a2:	b4 9f       	mul	r27, r20
 2a4:	90 0d       	add	r25, r0
 2a6:	a4 9f       	mul	r26, r20
 2a8:	80 0d       	add	r24, r0
 2aa:	91 1d       	adc	r25, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	08 95       	ret

000002b0 <__udivmodsi4>:
 2b0:	a1 e2       	ldi	r26, 0x21	; 33
 2b2:	1a 2e       	mov	r1, r26
 2b4:	aa 1b       	sub	r26, r26
 2b6:	bb 1b       	sub	r27, r27
 2b8:	fd 01       	movw	r30, r26
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <__udivmodsi4_ep>

000002bc <__udivmodsi4_loop>:
 2bc:	aa 1f       	adc	r26, r26
 2be:	bb 1f       	adc	r27, r27
 2c0:	ee 1f       	adc	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	a2 17       	cp	r26, r18
 2c6:	b3 07       	cpc	r27, r19
 2c8:	e4 07       	cpc	r30, r20
 2ca:	f5 07       	cpc	r31, r21
 2cc:	20 f0       	brcs	.+8      	; 0x2d6 <__udivmodsi4_ep>
 2ce:	a2 1b       	sub	r26, r18
 2d0:	b3 0b       	sbc	r27, r19
 2d2:	e4 0b       	sbc	r30, r20
 2d4:	f5 0b       	sbc	r31, r21

000002d6 <__udivmodsi4_ep>:
 2d6:	66 1f       	adc	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	88 1f       	adc	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	1a 94       	dec	r1
 2e0:	69 f7       	brne	.-38     	; 0x2bc <__udivmodsi4_loop>
 2e2:	60 95       	com	r22
 2e4:	70 95       	com	r23
 2e6:	80 95       	com	r24
 2e8:	90 95       	com	r25
 2ea:	9b 01       	movw	r18, r22
 2ec:	ac 01       	movw	r20, r24
 2ee:	bd 01       	movw	r22, r26
 2f0:	cf 01       	movw	r24, r30
 2f2:	08 95       	ret

000002f4 <__umulhisi3>:
 2f4:	a2 9f       	mul	r26, r18
 2f6:	b0 01       	movw	r22, r0
 2f8:	b3 9f       	mul	r27, r19
 2fa:	c0 01       	movw	r24, r0
 2fc:	a3 9f       	mul	r26, r19
 2fe:	70 0d       	add	r23, r0
 300:	81 1d       	adc	r24, r1
 302:	11 24       	eor	r1, r1
 304:	91 1d       	adc	r25, r1
 306:	b2 9f       	mul	r27, r18
 308:	70 0d       	add	r23, r0
 30a:	81 1d       	adc	r24, r1
 30c:	11 24       	eor	r1, r1
 30e:	91 1d       	adc	r25, r1
 310:	08 95       	ret

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>


TestUebungFastPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f3  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055e  00000000  00000000  000007e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026c  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_ports>:
#include <avr/portpins.h>
#include <avr/interrupt.h>

void init_ports()
{
	DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7);
  70:	85 b3       	in	r24, 0x15	; 21
  72:	80 68       	ori	r24, 0x80	; 128
  74:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);
  76:	87 b3       	in	r24, 0x17	; 23
  78:	88 60       	ori	r24, 0x08	; 8
  7a:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB3);
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	87 7f       	andi	r24, 0xF7	; 247
  80:	88 bb       	out	0x18, r24	; 24
	
	DDRA &= ~((1 << PA0)|(1 << PA1));
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	8c 7f       	andi	r24, 0xFC	; 252
  86:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0)|(1 << PA1));
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	8b bb       	out	0x1b, r24	; 27
  8e:	08 95       	ret

00000090 <init_fast_PMW>:
}

void init_fast_PMW()
{
	TCCR0 |= (1 << WGM00)|(1 << COM01)|(1 << WGM01)|(1 << CS01)|(1 << CS00);
  90:	83 b7       	in	r24, 0x33	; 51
  92:	8b 66       	ori	r24, 0x6B	; 107
  94:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = 150;
  96:	86 e9       	ldi	r24, 0x96	; 150
  98:	8c bf       	out	0x3c, r24	; 60
  9a:	08 95       	ret

0000009c <main>:
}

int main(void)
{
	cli();
  9c:	f8 94       	cli
	init_ports();
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <init_ports>
	init_fast_PMW();
  a2:	0e 94 48 00 	call	0x90	; 0x90 <init_fast_PMW>
	sei();
  a6:	78 94       	sei
	
	while(1)
	{
		if((PINA & (1 << PA0)) == 0)
  a8:	c8 99       	sbic	0x19, 0	; 25
  aa:	09 c0       	rjmp	.+18     	; 0xbe <main+0x22>
		{
			PORTC |= (1 << PC0);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	85 bb       	out	0x15, r24	; 21
			PORTC &= ~(1 << PC1);
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	85 bb       	out	0x15, r24	; 21
			
			OCR0 = 200;
  b8:	88 ec       	ldi	r24, 0xC8	; 200
  ba:	8c bf       	out	0x3c, r24	; 60
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <main+0x36>
		}
		else if((PINA & (1 << PA1)) == 0)
  be:	c9 99       	sbic	0x19, 1	; 25
  c0:	08 c0       	rjmp	.+16     	; 0xd2 <main+0x36>
		{
			PORTC &= ~(1 << PC0);
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	85 bb       	out	0x15, r24	; 21
			PORTC |= (1 << PC1);
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	85 bb       	out	0x15, r24	; 21
			
			OCR0 = 100;
  ce:	84 e6       	ldi	r24, 0x64	; 100
  d0:	8c bf       	out	0x3c, r24	; 60
		}
		
		if(OCR0 == 200)
  d2:	8c b7       	in	r24, 0x3c	; 60
  d4:	88 3c       	cpi	r24, 0xC8	; 200
  d6:	39 f4       	brne	.+14     	; 0xe6 <main+0x4a>
		{
			PORTC |= (1 << PC0);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	85 bb       	out	0x15, r24	; 21
			PORTC &= ~(1 << PC1);
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	e1 cf       	rjmp	.-62     	; 0xa8 <main+0xc>
		}
		else if(OCR0 == 100)
  e6:	8c b7       	in	r24, 0x3c	; 60
  e8:	84 36       	cpi	r24, 0x64	; 100
  ea:	f1 f6       	brne	.-68     	; 0xa8 <main+0xc>
		{
			PORTC &= ~(1 << PC0);
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	8e 7f       	andi	r24, 0xFE	; 254
  f0:	85 bb       	out	0x15, r24	; 21
			PORTC |= (1 << PC1);
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	d7 cf       	rjmp	.-82     	; 0xa8 <main+0xc>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>

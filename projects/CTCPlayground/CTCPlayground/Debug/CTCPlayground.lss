
CTCPlayground.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000609  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000576  00000000  00000000  000007c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000222  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001319  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 00 	call	0xac	; 0xac <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_19>:
#include <avr/portpins.h>
#include <avr/interrupt.h>

// Interrupt service routine for Timer0 compare match A
ISR(TIMER0_COMP_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	// Toggle PB3
	PORTB ^= (1 << PB3);
  7a:	98 b3       	in	r25, 0x18	; 24
  7c:	88 e0       	ldi	r24, 0x08	; 8
  7e:	89 27       	eor	r24, r25
  80:	88 bb       	out	0x18, r24	; 24
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <init_ports>:

void init_ports()
{
	// Set PB3 as output
	DDRB |= (1 << PB3);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	88 60       	ori	r24, 0x08	; 8
  94:	87 bb       	out	0x17, r24	; 23
  96:	08 95       	ret

00000098 <init_timer>:
}

void init_timer()
{
	// Configure Timer0 for CTC mode with prescaler = 64
	TCCR0 = (1 << WGM01);       // CTC mode
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	83 bf       	out	0x33, r24	; 51
	TCCR0 = (1 << CS01) | (1 << CS00);  // Prescaler = 64
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	83 bf       	out	0x33, r24	; 51
	OCR0 = 62;                 // 1 kHz frequency at 16 MHz clock with prescaler = 64
  a0:	8e e3       	ldi	r24, 0x3E	; 62
  a2:	8c bf       	out	0x3c, r24	; 60

	// Enable interrupts
	TIMSK |= (1 << OCIE0);	
  a4:	89 b7       	in	r24, 0x39	; 57
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	89 bf       	out	0x39, r24	; 57
  aa:	08 95       	ret

000000ac <main>:
}

int main(void)
{
	cli();
  ac:	f8 94       	cli
	init_ports();
  ae:	0e 94 48 00 	call	0x90	; 0x90 <init_ports>
	init_timer();
  b2:	0e 94 4c 00 	call	0x98	; 0x98 <init_timer>
	sei();
  b6:	78 94       	sei
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0xc>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>


Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000188  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000066b  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026e  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036e  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001482  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 77 00 	call	0xee	; 0xee <main>
  74:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
volatile uint8_t seconds = 0;
volatile uint8_t s0_Time = 0;
volatile unsigned char s0_Pressed = 0;

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	seconds++;
  88:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <seconds>
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <seconds>
	
	if(s0_Pressed)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	88 23       	and	r24, r24
  98:	29 f0       	breq	.+10     	; 0xa4 <__vector_19+0x28>
	{
		s0_Time++;
  9a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <s0_Time>
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <s0_Time>
	}	
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <init_Timer0>:

void init_Timer0()
{
	TCCR0 |= (1 << WGM01)|(1 << CS02)|(1 << CS00);
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	8d 60       	ori	r24, 0x0D	; 13
  b4:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = 150;
  b6:	86 e9       	ldi	r24, 0x96	; 150
  b8:	8c bf       	out	0x3c, r24	; 60
	
	TIMSK |= (1 << OCIE0);
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	89 bf       	out	0x39, r24	; 57
  c0:	08 95       	ret

000000c2 <updates_leds>:
}

void updates_leds()
{
	if(s0_Pressed)
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	88 23       	and	r24, r24
  c8:	21 f0       	breq	.+8      	; 0xd2 <updates_leds+0x10>
	{
		PORTC |= (1 << PC1);
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	08 95       	ret
	}
	else
	{
		PORTC |= (1 << PC2);
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	08 95       	ret

000000da <init_Ports>:
	}
}

void init_Ports()
{
	DDRC |= (1 << PC1)|(1 << PC2);
  da:	84 b3       	in	r24, 0x14	; 20
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	84 bb       	out	0x14, r24	; 20
	
	DDRA &= ~(1 << PA1);
  e0:	8a b3       	in	r24, 0x1a	; 26
  e2:	8d 7f       	andi	r24, 0xFD	; 253
  e4:	8a bb       	out	0x1a, r24	; 26
	
	PORTA |= (1 << PA1);
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	08 95       	ret

000000ee <main>:
}

int main(void)
{
	cli();
  ee:	f8 94       	cli
	init_Ports();
  f0:	0e 94 6d 00 	call	0xda	; 0xda <init_Ports>
	init_Timer0();
  f4:	0e 94 58 00 	call	0xb0	; 0xb0 <init_Timer0>
	sei();
  f8:	78 94       	sei
	
	while(1)
	{
		updates_leds();
  fa:	0e 94 61 00 	call	0xc2	; 0xc2 <updates_leds>
		
		if(!(PINA & (1 << PA1)))
  fe:	c9 99       	sbic	0x19, 1	; 25
 100:	04 c0       	rjmp	.+8      	; 0x10a <main+0x1c>
		{
			s0_Pressed = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 108:	f8 cf       	rjmp	.-16     	; 0xfa <main+0xc>
		}
		else
		{
			s0_Pressed = 0;
 10a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	f5 cf       	rjmp	.-22     	; 0xfa <main+0xc>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>

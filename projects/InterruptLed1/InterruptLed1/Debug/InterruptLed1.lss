
InterruptLed1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000013e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000606  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  000007e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021e  00000000  00000000  00000d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001332  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_ports>:

volatile uint8_t flag = 0;

void init_ports()
{
	DDRB = 0xFF;		//PORTB als Ausgang
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;		//alle Bits auf 0
  80:	18 ba       	out	0x18, r1	; 24
	
	DDRA = 0x00;		//PORTA als Eingang
  82:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x01;		//PA0 als Pull-up Eingang
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	8b bb       	out	0x1b, r24	; 27

	GICR = (1 << INT0);						//Interrupt 0 aktivieren
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1 << ISC01) | (1 << ISC00);	//Interrupt 0 auf steigende Flanke
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	85 bf       	out	0x35, r24	; 53
	sei();									//Interrupts global aktivieren
  90:	78 94       	sei
  92:	08 95       	ret

00000094 <__vector_1>:
}

//Interrupt Service Routine
ISR(INT0_vect) 
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
	flag = 1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <main>:

int main(void)
{
	//Ports im main initialisieren
	init_ports();
  b2:	0e 94 3e 00 	call	0x7c	; 0x7c <init_ports>
	
	while (1)
	{
		if(flag == 1)
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4>
		{
			PORTB = (1<<PB0);
  be:	88 bb       	out	0x18, r24	; 24
			flag = 0;
  c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	f8 cf       	rjmp	.-16     	; 0xb6 <main+0x4>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>


TestUebeungCTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a0  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000316  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001be  00000000  00000000  00001797  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  74:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:

volatile uint8_t divider = 0;
volatile uint8_t OCR0Var = 0;

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	for(divider = 0; divider <= 10; divider++)
  8c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <divider>
  90:	3d c0       	rjmp	.+122    	; 0x10c <__vector_19+0x90>
	{
		if(divider == 10)
  92:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <divider>
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	a1 f5       	brne	.+104    	; 0x102 <__vector_19+0x86>
		{
			PORTC ^= (1 << PC0);
  9a:	95 b3       	in	r25, 0x15	; 21
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	89 27       	eor	r24, r25
  a0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f e7       	ldi	r18, 0x7F	; 127
  a4:	8f e4       	ldi	r24, 0x4F	; 79
  a6:	92 e1       	ldi	r25, 0x12	; 18
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__vector_19+0x2c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <__vector_19+0x36>
  b2:	00 00       	nop
			_delay_ms(500);
			PORTC ^= (1 << PC1);
  b4:	95 b3       	in	r25, 0x15	; 21
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	89 27       	eor	r24, r25
  ba:	85 bb       	out	0x15, r24	; 21
  bc:	2f e7       	ldi	r18, 0x7F	; 127
  be:	8f e4       	ldi	r24, 0x4F	; 79
  c0:	92 e1       	ldi	r25, 0x12	; 18
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__vector_19+0x46>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <__vector_19+0x50>
  cc:	00 00       	nop
			_delay_ms(500);
			PORTC ^= (1 << PC2);
  ce:	95 b3       	in	r25, 0x15	; 21
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	89 27       	eor	r24, r25
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	92 e1       	ldi	r25, 0x12	; 18
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <__vector_19+0x60>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__vector_19+0x6a>
  e6:	00 00       	nop
			_delay_ms(500);
			PORTC ^= (1 << PC3);
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	89 27       	eor	r24, r25
  ee:	85 bb       	out	0x15, r24	; 21
  f0:	2f e7       	ldi	r18, 0x7F	; 127
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	92 e1       	ldi	r25, 0x12	; 18
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <__vector_19+0x7a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__vector_19+0x84>
 100:	00 00       	nop
volatile uint8_t divider = 0;
volatile uint8_t OCR0Var = 0;

ISR(TIMER0_COMP_vect)
{
	for(divider = 0; divider <= 10; divider++)
 102:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <divider>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <divider>
 10c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <divider>
 110:	8b 30       	cpi	r24, 0x0B	; 11
 112:	08 f4       	brcc	.+2      	; 0x116 <__vector_19+0x9a>
 114:	be cf       	rjmp	.-132    	; 0x92 <__vector_19+0x16>
			_delay_ms(500);
			PORTC ^= (1 << PC3);
			_delay_ms(500);
		}
	}
}
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <init_Ports>:

void init_Ports()
{
	DDRC = 0xFF;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	84 bb       	out	0x14, r24	; 20
	
	DDRB |= (1 << PB3);
 12a:	87 b3       	in	r24, 0x17	; 23
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret

00000132 <init_Timer0_CTC>:
}

void init_Timer0_CTC()
{
	TCCR0 |= (1 << COM00)|(1 << WGM01)|(1 << CS01)|(1 << CS00);
 132:	83 b7       	in	r24, 0x33	; 51
 134:	8b 61       	ori	r24, 0x1B	; 27
 136:	83 bf       	out	0x33, r24	; 51
	OCR0 = OCR0Var;
 138:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	8c bf       	out	0x3c, r24	; 60
	
	for(OCR0Var = 0; OCR0Var <= 58; OCR0Var++)
 13e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	0b c0       	rjmp	.+22     	; 0x15a <init_Timer0_CTC+0x28>
 144:	8f e2       	ldi	r24, 0x2F	; 47
 146:	95 e7       	ldi	r25, 0x75	; 117
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <init_Timer0_CTC+0x16>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <init_Timer0_CTC+0x1c>
 14e:	00 00       	nop
 150:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 15a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15e:	8b 33       	cpi	r24, 0x3B	; 59
 160:	88 f3       	brcs	.-30     	; 0x144 <init_Timer0_CTC+0x12>
	{
		_delay_ms(10);
	}
	TCNT0 = 0;
 162:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << OCIE0);
 164:	89 b7       	in	r24, 0x39	; 57
 166:	82 60       	ori	r24, 0x02	; 2
 168:	89 bf       	out	0x39, r24	; 57
 16a:	08 95       	ret

0000016c <main>:
}

int main(void)
{
	cli();
 16c:	f8 94       	cli
	init_Ports();
 16e:	0e 94 93 00 	call	0x126	; 0x126 <init_Ports>
	init_Timer0_CTC();
 172:	0e 94 99 00 	call	0x132	; 0x132 <init_Timer0_CTC>
	sei();
 176:	78 94       	sei
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0xc>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>

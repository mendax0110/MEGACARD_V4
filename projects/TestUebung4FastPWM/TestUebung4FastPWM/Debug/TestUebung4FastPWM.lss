
TestUebung4FastPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa7  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000607  00000000  00000000  00000e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000416  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000558  00000000  00000000  00001c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000218f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  74:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_Ports>:
volatile uint8_t OCR0Var = 0;
volatile uint8_t timer = 0;

void init_Ports()
{
	DDRC = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	
	DDRB |= (1 << PB3);
  80:	87 b3       	in	r24, 0x17	; 23
  82:	88 60       	ori	r24, 0x08	; 8
  84:	87 bb       	out	0x17, r24	; 23
	
	DDRA &= ~((1 << PA0)|(1 << PA1));
  86:	8a b3       	in	r24, 0x1a	; 26
  88:	8c 7f       	andi	r24, 0xFC	; 252
  8a:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0)|(1 << PA1));
  8c:	8b b3       	in	r24, 0x1b	; 27
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	8b bb       	out	0x1b, r24	; 27
  92:	08 95       	ret

00000094 <init_fast_PWM>:
}

void init_fast_PWM()
{
	TCCR0 |= (1 << WGM00)|(1 << COM01)|(1 << COM00)|(1 << WGM01)|(1 << CS01)|(1 << CS00);
  94:	83 b7       	in	r24, 0x33	; 51
  96:	8b 67       	ori	r24, 0x7B	; 123
  98:	83 bf       	out	0x33, r24	; 51
	
	for(OCR0Var = 0; OCR0Var <= 200; OCR0Var++)
  9a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <OCR0Var>
  9e:	5a c0       	rjmp	.+180    	; 0x154 <init_fast_PWM+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e2       	ldi	r24, 0x2F	; 47
  a2:	95 e7       	ldi	r25, 0x75	; 117
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <init_fast_PWM+0x10>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <init_fast_PWM+0x16>
  aa:	00 00       	nop
	{
		_delay_ms(10);
		PORTC ^= (1 << PC0);
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	89 27       	eor	r24, r25
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	8f e2       	ldi	r24, 0x2F	; 47
  b6:	95 e7       	ldi	r25, 0x75	; 117
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <init_fast_PWM+0x24>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <init_fast_PWM+0x2a>
  be:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC1);
  c0:	95 b3       	in	r25, 0x15	; 21
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	89 27       	eor	r24, r25
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	8f e2       	ldi	r24, 0x2F	; 47
  ca:	95 e7       	ldi	r25, 0x75	; 117
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <init_fast_PWM+0x38>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <init_fast_PWM+0x3e>
  d2:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC2);
  d4:	95 b3       	in	r25, 0x15	; 21
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	89 27       	eor	r24, r25
  da:	85 bb       	out	0x15, r24	; 21
  dc:	8f e2       	ldi	r24, 0x2F	; 47
  de:	95 e7       	ldi	r25, 0x75	; 117
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <init_fast_PWM+0x4c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <init_fast_PWM+0x52>
  e6:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC3);
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	89 27       	eor	r24, r25
  ee:	85 bb       	out	0x15, r24	; 21
  f0:	8f e2       	ldi	r24, 0x2F	; 47
  f2:	95 e7       	ldi	r25, 0x75	; 117
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <init_fast_PWM+0x60>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <init_fast_PWM+0x66>
  fa:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC4);
  fc:	95 b3       	in	r25, 0x15	; 21
  fe:	80 e1       	ldi	r24, 0x10	; 16
 100:	89 27       	eor	r24, r25
 102:	85 bb       	out	0x15, r24	; 21
 104:	8f e2       	ldi	r24, 0x2F	; 47
 106:	95 e7       	ldi	r25, 0x75	; 117
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <init_fast_PWM+0x74>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <init_fast_PWM+0x7a>
 10e:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC5);
 110:	95 b3       	in	r25, 0x15	; 21
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	89 27       	eor	r24, r25
 116:	85 bb       	out	0x15, r24	; 21
 118:	8f e2       	ldi	r24, 0x2F	; 47
 11a:	95 e7       	ldi	r25, 0x75	; 117
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <init_fast_PWM+0x88>
 120:	00 c0       	rjmp	.+0      	; 0x122 <init_fast_PWM+0x8e>
 122:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC6);
 124:	95 b3       	in	r25, 0x15	; 21
 126:	80 e4       	ldi	r24, 0x40	; 64
 128:	89 27       	eor	r24, r25
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	8f e2       	ldi	r24, 0x2F	; 47
 12e:	95 e7       	ldi	r25, 0x75	; 117
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <init_fast_PWM+0x9c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <init_fast_PWM+0xa2>
 136:	00 00       	nop
		_delay_ms(10);
		PORTC ^= (1 << PC7);
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	80 58       	subi	r24, 0x80	; 128
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	8f e2       	ldi	r24, 0x2F	; 47
 140:	95 e7       	ldi	r25, 0x75	; 117
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <init_fast_PWM+0xae>
 146:	00 c0       	rjmp	.+0      	; 0x148 <init_fast_PWM+0xb4>
 148:	00 00       	nop

void init_fast_PWM()
{
	TCCR0 |= (1 << WGM00)|(1 << COM01)|(1 << COM00)|(1 << WGM01)|(1 << CS01)|(1 << CS00);
	
	for(OCR0Var = 0; OCR0Var <= 200; OCR0Var++)
 14a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <OCR0Var>
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <OCR0Var>
 154:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <OCR0Var>
 158:	89 3c       	cpi	r24, 0xC9	; 201
 15a:	08 f4       	brcc	.+2      	; 0x15e <init_fast_PWM+0xca>
 15c:	a1 cf       	rjmp	.-190    	; 0xa0 <init_fast_PWM+0xc>
		PORTC ^= (1 << PC7);
		_delay_ms(10);
	}
	
	
	OCR0 = OCR0Var;
 15e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <OCR0Var>
 162:	8c bf       	out	0x3c, r24	; 60
 164:	08 95       	ret

00000166 <main>:
}

int main(void)
{
	cli();
 166:	f8 94       	cli
	init_Ports();
 168:	0e 94 3e 00 	call	0x7c	; 0x7c <init_Ports>
	init_fast_PWM();
 16c:	0e 94 4a 00 	call	0x94	; 0x94 <init_fast_PWM>
	sei();
 170:	78 94       	sei
	
	while(1)
	{
		if((PINA & (1 << PA0)) == 0)
 172:	c8 99       	sbic	0x19, 0	; 25
 174:	3d c0       	rjmp	.+122    	; 0x1f0 <main+0x8a>
		{
			for(timer = 0; timer <= 8; timer++)
 176:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 17a:	33 c0       	rjmp	.+102    	; 0x1e2 <main+0x7c>
 17c:	8f e2       	ldi	r24, 0x2F	; 47
 17e:	95 e7       	ldi	r25, 0x75	; 117
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x1a>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x20>
 186:	00 00       	nop
			{
				_delay_ms(10);
				PORTC ^= (1 << PC0);
 188:	95 b3       	in	r25, 0x15	; 21
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	89 27       	eor	r24, r25
 18e:	85 bb       	out	0x15, r24	; 21
 190:	8f e2       	ldi	r24, 0x2F	; 47
 192:	95 e7       	ldi	r25, 0x75	; 117
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x2e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x34>
 19a:	00 00       	nop
				_delay_ms(10);
				PORTC ^= (1 << PC2);
 19c:	95 b3       	in	r25, 0x15	; 21
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	89 27       	eor	r24, r25
 1a2:	85 bb       	out	0x15, r24	; 21
 1a4:	8f e2       	ldi	r24, 0x2F	; 47
 1a6:	95 e7       	ldi	r25, 0x75	; 117
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x42>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x48>
 1ae:	00 00       	nop
				_delay_ms(10);
				PORTC ^= (1 << PC4);
 1b0:	95 b3       	in	r25, 0x15	; 21
 1b2:	80 e1       	ldi	r24, 0x10	; 16
 1b4:	89 27       	eor	r24, r25
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	8f e2       	ldi	r24, 0x2F	; 47
 1ba:	95 e7       	ldi	r25, 0x75	; 117
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x56>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x5c>
 1c2:	00 00       	nop
				_delay_ms(10);
				PORTC ^= (1 << PC6);
 1c4:	95 b3       	in	r25, 0x15	; 21
 1c6:	80 e4       	ldi	r24, 0x40	; 64
 1c8:	89 27       	eor	r24, r25
 1ca:	85 bb       	out	0x15, r24	; 21
 1cc:	8f e2       	ldi	r24, 0x2F	; 47
 1ce:	95 e7       	ldi	r25, 0x75	; 117
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x6a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x70>
 1d6:	00 00       	nop
	
	while(1)
	{
		if((PINA & (1 << PA0)) == 0)
		{
			for(timer = 0; timer <= 8; timer++)
 1d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e6:	89 30       	cpi	r24, 0x09	; 9
 1e8:	48 f2       	brcs	.-110    	; 0x17c <main+0x16>
				_delay_ms(10);
				PORTC ^= (1 << PC6);
				_delay_ms(10);
			}
			
			OCR0 = 50;
 1ea:	82 e3       	ldi	r24, 0x32	; 50
 1ec:	8c bf       	out	0x3c, r24	; 60
 1ee:	c1 cf       	rjmp	.-126    	; 0x172 <main+0xc>
		}
		else if((PINA & (1 << PA1)) == 0)
 1f0:	c9 99       	sbic	0x19, 1	; 25
 1f2:	bf cf       	rjmp	.-130    	; 0x172 <main+0xc>
		{
			for(timer = 0; timer <= 8; timer++)
 1f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f8:	32 c0       	rjmp	.+100    	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 1fa:	8f e2       	ldi	r24, 0x2F	; 47
 1fc:	95 e7       	ldi	r25, 0x75	; 117
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x98>
 202:	00 c0       	rjmp	.+0      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 204:	00 00       	nop
			{
				_delay_ms(10);
				PORTC ^= (1 << PC1);
 206:	95 b3       	in	r25, 0x15	; 21
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	89 27       	eor	r24, r25
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	8f e2       	ldi	r24, 0x2F	; 47
 210:	95 e7       	ldi	r25, 0x75	; 117
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 216:	00 c0       	rjmp	.+0      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 218:	00 00       	nop
				_delay_ms(10);
				PORTC ^= (1 << PC3);
 21a:	95 b3       	in	r25, 0x15	; 21
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	89 27       	eor	r24, r25
 220:	85 bb       	out	0x15, r24	; 21
 222:	8f e2       	ldi	r24, 0x2F	; 47
 224:	95 e7       	ldi	r25, 0x75	; 117
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 22c:	00 00       	nop
				_delay_ms(10);
				PORTC ^= (1 << PC5);
 22e:	95 b3       	in	r25, 0x15	; 21
 230:	80 e2       	ldi	r24, 0x20	; 32
 232:	89 27       	eor	r24, r25
 234:	85 bb       	out	0x15, r24	; 21
 236:	8f e2       	ldi	r24, 0x2F	; 47
 238:	95 e7       	ldi	r25, 0x75	; 117
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 240:	00 00       	nop
				_delay_ms(10);
				PORTC ^= (1 << PC7);
 242:	85 b3       	in	r24, 0x15	; 21
 244:	80 58       	subi	r24, 0x80	; 128
 246:	85 bb       	out	0x15, r24	; 21
 248:	8f e2       	ldi	r24, 0x2F	; 47
 24a:	95 e7       	ldi	r25, 0x75	; 117
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 250:	00 c0       	rjmp	.+0      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 252:	00 00       	nop
			
			OCR0 = 50;
		}
		else if((PINA & (1 << PA1)) == 0)
		{
			for(timer = 0; timer <= 8; timer++)
 254:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 25e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 262:	89 30       	cpi	r24, 0x09	; 9
 264:	50 f2       	brcs	.-108    	; 0x1fa <main+0x94>
				_delay_ms(10);
				PORTC ^= (1 << PC7);
				_delay_ms(10);
			}
			
			OCR0 = 100;
 266:	84 e6       	ldi	r24, 0x64	; 100
 268:	8c bf       	out	0x3c, r24	; 60
 26a:	83 cf       	rjmp	.-250    	; 0x172 <main+0xc>

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>

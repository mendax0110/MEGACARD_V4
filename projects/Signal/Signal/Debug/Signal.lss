
Signal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000609  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000576  00000000  00000000  000007e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000347  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001357  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_9>:
#include <avr/interrupt.h>

#define F_CPU 12000000UL

ISR(TIMER0_OVF_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	TCNT0 = 245;
  7a:	85 ef       	ldi	r24, 0xF5	; 245
  7c:	82 bf       	out	0x32, r24	; 50
	PORTC ^= (1 << PC6);    // Toggle output on PC6
  7e:	95 b3       	in	r25, 0x15	; 21
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	89 27       	eor	r24, r25
  84:	85 bb       	out	0x15, r24	; 21
	PORTB ^= (1 << PB3);    // Toggle output on PB3
  86:	98 b3       	in	r25, 0x18	; 24
  88:	88 e0       	ldi	r24, 0x08	; 8
  8a:	89 27       	eor	r24, r25
  8c:	88 bb       	out	0x18, r24	; 24
	PORTB ^= (1 << PB4);    // Toggle output on PB4
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	80 e1       	ldi	r24, 0x10	; 16
  92:	89 27       	eor	r24, r25
  94:	88 bb       	out	0x18, r24	; 24
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <init_timer0>:

void init_timer0()
{
	TCCR0 &= ~(1 << WGM00);                             // Normal Mode
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	8f 7b       	andi	r24, 0xBF	; 191
  a8:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << WGM01);
  aa:	83 b7       	in	r24, 0x33	; 51
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM00) | (1 << CS02) | (CS00);    // Toggle - OC0, F_CPU: 1024
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	84 61       	ori	r24, 0x14	; 20
  b4:	83 bf       	out	0x33, r24	; 51
	
	TCNT0 = 245;                                    // Preload - 245 => Out = F_CPU:1024:10
  b6:	85 ef       	ldi	r24, 0xF5	; 245
  b8:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1 << TOIE0);                        // Overflow Interrupts enabled
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	89 bf       	out	0x39, r24	; 57
  c0:	08 95       	ret

000000c2 <init_ports>:
}

void init_ports()
{
	DDRC = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7);    // Set LED Indicator
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3) | (1 << PB4);    // Set PB3 and PB4 as output
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	88 61       	ori	r24, 0x18	; 24
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	08 95       	ret

000000d4 <main>:
}

int main(void)
{
	cli();          // lock
  d4:	f8 94       	cli
	init_ports();   // init the ports
  d6:	0e 94 61 00 	call	0xc2	; 0xc2 <init_ports>
	init_timer0();  // init the timer
  da:	0e 94 52 00 	call	0xa4	; 0xa4 <init_timer0>
	sei();          // enable global interrupts
  de:	78 94       	sei
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0xc>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>

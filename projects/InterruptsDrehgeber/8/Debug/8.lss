
8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000a14  00000aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080006c  0080006c  00000ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001460  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000929  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b7  00000000  00000000  00002989  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00003340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  0000368c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016eb  00000000  00000000  00003b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000526d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 79 01 	call	0x2f2	; 0x2f2 <main>
  8a:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 87 04 	call	0x90e	; 0x90e <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <InitPorts>:

// Initialize ports
void InitPorts()
{
    // Port D: CLK-Pin und DIR-Pin als Eingänge
    DDRD &= ~(1 << CLK_PIN);
 1e6:	81 b3       	in	r24, 0x11	; 17
 1e8:	87 7f       	andi	r24, 0xF7	; 247
 1ea:	81 bb       	out	0x11, r24	; 17
    DDRD &= ~(1 << DIR_PIN);
 1ec:	81 b3       	in	r24, 0x11	; 17
 1ee:	8b 7f       	andi	r24, 0xFB	; 251
 1f0:	81 bb       	out	0x11, r24	; 17

    // Port C: LEDs als Ausgänge
    DDRC = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	84 bb       	out	0x14, r24	; 20
 1f6:	08 95       	ret

000001f8 <__vector_2>:
}

// INT1 ISR
ISR(INT1_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
    impulsesPerRotation++;
 21a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <impulsesPerRotation>
 21e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <impulsesPerRotation+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <impulsesPerRotation+0x1>
 228:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <impulsesPerRotation>
    
    // Apply software prescaler to reduce sensitivity
    if (impulsesPerRotation % SOFTWARE_PRESCALER == 0)
 22c:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <impulsesPerRotation>
 230:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <impulsesPerRotation+0x1>
 234:	9a 01       	movw	r18, r20
 236:	ad ec       	ldi	r26, 0xCD	; 205
 238:	bc ec       	ldi	r27, 0xCC	; 204
 23a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__umulhisi3>
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	9c 01       	movw	r18, r24
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	82 0f       	add	r24, r18
 25e:	93 1f       	adc	r25, r19
 260:	48 17       	cp	r20, r24
 262:	59 07       	cpc	r21, r25
 264:	a9 f5       	brne	.+106    	; 0x2d0 <__EEPROM_REGION_LENGTH__+0xd0>
    {
        impulsesForSingleRotation++;
 266:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <impulsesForSingleRotation>
 26a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <impulsesForSingleRotation+0x1>
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <impulsesForSingleRotation+0x1>
 274:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <impulsesForSingleRotation>
        
        // Check for maximum impulses in a single rotation
        if (impulsesForSingleRotation > maxImpulsesForSingleRotation)
 278:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <impulsesForSingleRotation>
 27c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <impulsesForSingleRotation+0x1>
 280:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <maxImpulsesForSingleRotation>
 284:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <maxImpulsesForSingleRotation+0x1>
 288:	82 17       	cp	r24, r18
 28a:	93 07       	cpc	r25, r19
 28c:	40 f4       	brcc	.+16     	; 0x29e <__EEPROM_REGION_LENGTH__+0x9e>
        {
            maxImpulsesForSingleRotation = impulsesForSingleRotation;
 28e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <impulsesForSingleRotation>
 292:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <impulsesForSingleRotation+0x1>
 296:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <maxImpulsesForSingleRotation+0x1>
 29a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <maxImpulsesForSingleRotation>
        }
        
        PORTC = impulsesForSingleRotation;
 29e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <impulsesForSingleRotation>
 2a2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <impulsesForSingleRotation+0x1>
 2a6:	85 bb       	out	0x15, r24	; 21
        // Print the impulses in real-time
        lcd_pos(0, 1);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
        printf("Impulse: %d", impulsesForSingleRotation);
 2b0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <impulsesForSingleRotation>
 2b4:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <impulsesForSingleRotation+0x1>
 2b8:	9f 93       	push	r25
 2ba:	8f 93       	push	r24
 2bc:	80 e6       	ldi	r24, 0x60	; 96
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	9f 93       	push	r25
 2c2:	8f 93       	push	r24
 2c4:	0e 94 90 04 	call	0x920	; 0x920 <tfp_printf>
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
    }
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <main>:

int main(void)
{
    InitPorts();
 2f2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <InitPorts>
    lcd_init();
 2f6:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>

    cli();
 2fa:	f8 94       	cli
    MCUCR |= (1 << ISC11) | (1 << ISC10); // Rising edge generates interrupt
 2fc:	85 b7       	in	r24, 0x35	; 53
 2fe:	8c 60       	ori	r24, 0x0C	; 12
 300:	85 bf       	out	0x35, r24	; 53
    GICR |= (1 << INT1); // Enable INT1 interrupt
 302:	8b b7       	in	r24, 0x3b	; 59
 304:	80 68       	ori	r24, 0x80	; 128
 306:	8b bf       	out	0x3b, r24	; 59
    sei(); // Enable global interrupts
 308:	78 94       	sei

    while (1)
    {
        if (rotationCompleted)
 30a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 30e:	88 23       	and	r24, r24
 310:	e1 f3       	breq	.-8      	; 0x30a <main+0x18>
        {
            rotationCompleted = 0;
 312:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
            impulsesForSingleRotation = 0;
 316:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <impulsesForSingleRotation+0x1>
 31a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <impulsesForSingleRotation>
 31e:	f5 cf       	rjmp	.-22     	; 0x30a <main+0x18>

00000320 <uli2a>:
	va_end(va);
}

static void putcp(void* p,char c)
{
	*(*((char**)p))++ = c;
 320:	2f 92       	push	r2
 322:	3f 92       	push	r3
 324:	4f 92       	push	r4
 326:	5f 92       	push	r5
 328:	6f 92       	push	r6
 32a:	7f 92       	push	r7
 32c:	8f 92       	push	r8
 32e:	9f 92       	push	r9
 330:	af 92       	push	r10
 332:	bf 92       	push	r11
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	00 d0       	rcall	.+0      	; 0x346 <uli2a+0x26>
 346:	00 d0       	rcall	.+0      	; 0x348 <uli2a+0x28>
 348:	1f 92       	push	r1
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	6c 83       	std	Y+4, r22	; 0x04
 350:	7d 83       	std	Y+5, r23	; 0x05
 352:	98 2e       	mov	r9, r24
 354:	89 2e       	mov	r8, r25
 356:	5a 01       	movw	r10, r20
 358:	3b 83       	std	Y+3, r19	; 0x03
 35a:	2a 83       	std	Y+2, r18	; 0x02
 35c:	c1 2c       	mov	r12, r1
 35e:	d1 2c       	mov	r13, r1
 360:	76 01       	movw	r14, r12
 362:	c3 94       	inc	r12
 364:	08 c0       	rjmp	.+16     	; 0x376 <uli2a+0x56>
 366:	a7 01       	movw	r20, r14
 368:	96 01       	movw	r18, r12
 36a:	c3 01       	movw	r24, r6
 36c:	b2 01       	movw	r22, r4
 36e:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsi3>
 372:	6b 01       	movw	r12, r22
 374:	7c 01       	movw	r14, r24
 376:	6c 81       	ldd	r22, Y+4	; 0x04
 378:	7d 81       	ldd	r23, Y+5	; 0x05
 37a:	89 2d       	mov	r24, r9
 37c:	98 2d       	mov	r25, r8
 37e:	a7 01       	movw	r20, r14
 380:	96 01       	movw	r18, r12
 382:	0e 94 cc 04 	call	0x998	; 0x998 <__udivmodsi4>
 386:	25 01       	movw	r4, r10
 388:	61 2c       	mov	r6, r1
 38a:	71 2c       	mov	r7, r1
 38c:	24 15       	cp	r18, r4
 38e:	35 05       	cpc	r19, r5
 390:	46 05       	cpc	r20, r6
 392:	57 05       	cpc	r21, r7
 394:	40 f7       	brcc	.-48     	; 0x366 <uli2a+0x46>
 396:	a1 2c       	mov	r10, r1
 398:	b1 2c       	mov	r11, r1
 39a:	39 c0       	rjmp	.+114    	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 39c:	6c 81       	ldd	r22, Y+4	; 0x04
 39e:	7d 81       	ldd	r23, Y+5	; 0x05
 3a0:	89 2d       	mov	r24, r9
 3a2:	98 2d       	mov	r25, r8
 3a4:	a7 01       	movw	r20, r14
 3a6:	96 01       	movw	r18, r12
 3a8:	0e 94 cc 04 	call	0x998	; 0x998 <__udivmodsi4>
 3ac:	29 83       	std	Y+1, r18	; 0x01
 3ae:	42 2f       	mov	r20, r18
 3b0:	24 2e       	mov	r2, r20
 3b2:	33 2e       	mov	r3, r19
 3b4:	6c 83       	std	Y+4, r22	; 0x04
 3b6:	7d 83       	std	Y+5, r23	; 0x05
 3b8:	98 2e       	mov	r9, r24
 3ba:	89 2e       	mov	r8, r25
 3bc:	c7 01       	movw	r24, r14
 3be:	b6 01       	movw	r22, r12
 3c0:	a3 01       	movw	r20, r6
 3c2:	92 01       	movw	r18, r4
 3c4:	0e 94 cc 04 	call	0x998	; 0x998 <__udivmodsi4>
 3c8:	69 01       	movw	r12, r18
 3ca:	7a 01       	movw	r14, r20
 3cc:	a1 14       	cp	r10, r1
 3ce:	b1 04       	cpc	r11, r1
 3d0:	39 f4       	brne	.+14     	; 0x3e0 <uli2a+0xc0>
 3d2:	12 14       	cp	r1, r2
 3d4:	13 04       	cpc	r1, r3
 3d6:	24 f0       	brlt	.+8      	; 0x3e0 <uli2a+0xc0>
 3d8:	23 2b       	or	r18, r19
 3da:	24 2b       	or	r18, r20
 3dc:	25 2b       	or	r18, r21
 3de:	b9 f4       	brne	.+46     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 3e0:	c8 01       	movw	r24, r16
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	2a e0       	ldi	r18, 0x0A	; 10
 3e6:	22 16       	cp	r2, r18
 3e8:	31 04       	cpc	r3, r1
 3ea:	34 f0       	brlt	.+12     	; 0x3f8 <uli2a+0xd8>
 3ec:	ea 81       	ldd	r30, Y+2	; 0x02
 3ee:	fb 81       	ldd	r31, Y+3	; 0x03
 3f0:	ef 2b       	or	r30, r31
 3f2:	21 f0       	breq	.+8      	; 0x3fc <uli2a+0xdc>
 3f4:	27 e3       	ldi	r18, 0x37	; 55
 3f6:	03 c0       	rjmp	.+6      	; 0x3fe <uli2a+0xde>
 3f8:	20 e3       	ldi	r18, 0x30	; 48
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <uli2a+0xde>
 3fc:	27 e5       	ldi	r18, 0x57	; 87
 3fe:	39 80       	ldd	r3, Y+1	; 0x01
 400:	32 0e       	add	r3, r18
 402:	f8 01       	movw	r30, r16
 404:	30 82       	st	Z, r3
 406:	ff ef       	ldi	r31, 0xFF	; 255
 408:	af 1a       	sub	r10, r31
 40a:	bf 0a       	sbc	r11, r31
 40c:	8c 01       	movw	r16, r24
 40e:	c1 14       	cp	r12, r1
 410:	d1 04       	cpc	r13, r1
 412:	e1 04       	cpc	r14, r1
 414:	f1 04       	cpc	r15, r1
 416:	11 f6       	brne	.-124    	; 0x39c <uli2a+0x7c>
 418:	f8 01       	movw	r30, r16
 41a:	10 82       	st	Z, r1
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	df 90       	pop	r13
 434:	cf 90       	pop	r12
 436:	bf 90       	pop	r11
 438:	af 90       	pop	r10
 43a:	9f 90       	pop	r9
 43c:	8f 90       	pop	r8
 43e:	7f 90       	pop	r7
 440:	6f 90       	pop	r6
 442:	5f 90       	pop	r5
 444:	4f 90       	pop	r4
 446:	3f 90       	pop	r3
 448:	2f 90       	pop	r2
 44a:	08 95       	ret

0000044c <li2a>:
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	99 23       	and	r25, r25
 452:	64 f4       	brge	.+24     	; 0x46c <__stack+0xd>
 454:	90 95       	com	r25
 456:	80 95       	com	r24
 458:	70 95       	com	r23
 45a:	61 95       	neg	r22
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	2d e2       	ldi	r18, 0x2D	; 45
 464:	fa 01       	movw	r30, r20
 466:	20 83       	st	Z, r18
 468:	4f 5f       	subi	r20, 0xFF	; 255
 46a:	5f 4f       	sbci	r21, 0xFF	; 255
 46c:	8a 01       	movw	r16, r20
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	4a e0       	ldi	r20, 0x0A	; 10
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	0e 94 90 01 	call	0x320	; 0x320 <uli2a>
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	08 95       	ret

00000480 <ui2a>:
 480:	8f 92       	push	r8
 482:	9f 92       	push	r9
 484:	af 92       	push	r10
 486:	bf 92       	push	r11
 488:	cf 92       	push	r12
 48a:	df 92       	push	r13
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	c8 2f       	mov	r28, r24
 49a:	d9 2f       	mov	r29, r25
 49c:	8b 01       	movw	r16, r22
 49e:	6a 01       	movw	r12, r20
 4a0:	79 01       	movw	r14, r18
 4a2:	e1 e0       	ldi	r30, 0x01	; 1
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <ui2a+0x38>
 4a8:	cf 01       	movw	r24, r30
 4aa:	80 9f       	mul	r24, r16
 4ac:	f0 01       	movw	r30, r0
 4ae:	81 9f       	mul	r24, r17
 4b0:	f0 0d       	add	r31, r0
 4b2:	90 9f       	mul	r25, r16
 4b4:	f0 0d       	add	r31, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	8c 2f       	mov	r24, r28
 4ba:	9d 2f       	mov	r25, r29
 4bc:	bf 01       	movw	r22, r30
 4be:	0e 94 b8 04 	call	0x970	; 0x970 <__udivmodhi4>
 4c2:	60 17       	cp	r22, r16
 4c4:	71 07       	cpc	r23, r17
 4c6:	80 f7       	brcc	.-32     	; 0x4a8 <ui2a+0x28>
 4c8:	a1 2c       	mov	r10, r1
 4ca:	b1 2c       	mov	r11, r1
 4cc:	2c c0       	rjmp	.+88     	; 0x526 <ui2a+0xa6>
 4ce:	8c 2f       	mov	r24, r28
 4d0:	9d 2f       	mov	r25, r29
 4d2:	bf 01       	movw	r22, r30
 4d4:	0e 94 b8 04 	call	0x970	; 0x970 <__udivmodhi4>
 4d8:	36 2f       	mov	r19, r22
 4da:	86 2e       	mov	r8, r22
 4dc:	97 2e       	mov	r9, r23
 4de:	c8 2f       	mov	r28, r24
 4e0:	d9 2f       	mov	r29, r25
 4e2:	cf 01       	movw	r24, r30
 4e4:	b8 01       	movw	r22, r16
 4e6:	0e 94 b8 04 	call	0x970	; 0x970 <__udivmodhi4>
 4ea:	fb 01       	movw	r30, r22
 4ec:	a1 14       	cp	r10, r1
 4ee:	b1 04       	cpc	r11, r1
 4f0:	29 f4       	brne	.+10     	; 0x4fc <ui2a+0x7c>
 4f2:	18 14       	cp	r1, r8
 4f4:	19 04       	cpc	r1, r9
 4f6:	14 f0       	brlt	.+4      	; 0x4fc <ui2a+0x7c>
 4f8:	30 97       	sbiw	r30, 0x00	; 0
 4fa:	a9 f4       	brne	.+42     	; 0x526 <ui2a+0xa6>
 4fc:	c7 01       	movw	r24, r14
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	aa e0       	ldi	r26, 0x0A	; 10
 502:	8a 16       	cp	r8, r26
 504:	91 04       	cpc	r9, r1
 506:	2c f0       	brlt	.+10     	; 0x512 <ui2a+0x92>
 508:	c1 14       	cp	r12, r1
 50a:	d1 04       	cpc	r13, r1
 50c:	21 f0       	breq	.+8      	; 0x516 <ui2a+0x96>
 50e:	27 e3       	ldi	r18, 0x37	; 55
 510:	03 c0       	rjmp	.+6      	; 0x518 <ui2a+0x98>
 512:	20 e3       	ldi	r18, 0x30	; 48
 514:	01 c0       	rjmp	.+2      	; 0x518 <ui2a+0x98>
 516:	27 e5       	ldi	r18, 0x57	; 87
 518:	32 0f       	add	r19, r18
 51a:	d7 01       	movw	r26, r14
 51c:	3c 93       	st	X, r19
 51e:	bf ef       	ldi	r27, 0xFF	; 255
 520:	ab 1a       	sub	r10, r27
 522:	bb 0a       	sbc	r11, r27
 524:	7c 01       	movw	r14, r24
 526:	30 97       	sbiw	r30, 0x00	; 0
 528:	91 f6       	brne	.-92     	; 0x4ce <ui2a+0x4e>
 52a:	f7 01       	movw	r30, r14
 52c:	10 82       	st	Z, r1
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	ff 90       	pop	r15
 538:	ef 90       	pop	r14
 53a:	df 90       	pop	r13
 53c:	cf 90       	pop	r12
 53e:	bf 90       	pop	r11
 540:	af 90       	pop	r10
 542:	9f 90       	pop	r9
 544:	8f 90       	pop	r8
 546:	08 95       	ret

00000548 <i2a>:
 548:	9b 01       	movw	r18, r22
 54a:	99 23       	and	r25, r25
 54c:	44 f4       	brge	.+16     	; 0x55e <i2a+0x16>
 54e:	91 95       	neg	r25
 550:	81 95       	neg	r24
 552:	91 09       	sbc	r25, r1
 554:	4d e2       	ldi	r20, 0x2D	; 45
 556:	fb 01       	movw	r30, r22
 558:	40 83       	st	Z, r20
 55a:	2f 5f       	subi	r18, 0xFF	; 255
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	6a e0       	ldi	r22, 0x0A	; 10
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	0e 94 40 02 	call	0x480	; 0x480 <ui2a>
 56a:	08 95       	ret

0000056c <a2d>:
 56c:	90 ed       	ldi	r25, 0xD0	; 208
 56e:	98 0f       	add	r25, r24
 570:	9a 30       	cpi	r25, 0x0A	; 10
 572:	18 f4       	brcc	.+6      	; 0x57a <a2d+0xe>
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	c0 97       	sbiw	r24, 0x30	; 48
 578:	08 95       	ret
 57a:	9f e9       	ldi	r25, 0x9F	; 159
 57c:	98 0f       	add	r25, r24
 57e:	96 30       	cpi	r25, 0x06	; 6
 580:	20 f4       	brcc	.+8      	; 0x58a <a2d+0x1e>
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	87 55       	subi	r24, 0x57	; 87
 586:	91 09       	sbc	r25, r1
 588:	08 95       	ret
 58a:	9f eb       	ldi	r25, 0xBF	; 191
 58c:	98 0f       	add	r25, r24
 58e:	96 30       	cpi	r25, 0x06	; 6
 590:	18 f4       	brcc	.+6      	; 0x598 <a2d+0x2c>
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	c7 97       	sbiw	r24, 0x37	; 55
 596:	08 95       	ret
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	9f ef       	ldi	r25, 0xFF	; 255
 59c:	08 95       	ret

0000059e <a2i>:
 59e:	9f 92       	push	r9
 5a0:	af 92       	push	r10
 5a2:	bf 92       	push	r11
 5a4:	cf 92       	push	r12
 5a6:	df 92       	push	r13
 5a8:	ef 92       	push	r14
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	98 2e       	mov	r9, r24
 5b6:	5b 01       	movw	r10, r22
 5b8:	7a 01       	movw	r14, r20
 5ba:	69 01       	movw	r12, r18
 5bc:	fb 01       	movw	r30, r22
 5be:	c0 81       	ld	r28, Z
 5c0:	d1 81       	ldd	r29, Z+1	; 0x01
 5c2:	00 e0       	ldi	r16, 0x00	; 0
 5c4:	10 e0       	ldi	r17, 0x00	; 0
 5c6:	0f c0       	rjmp	.+30     	; 0x5e6 <a2i+0x48>
 5c8:	e8 16       	cp	r14, r24
 5ca:	f9 06       	cpc	r15, r25
 5cc:	8c f0       	brlt	.+34     	; 0x5f0 <a2i+0x52>
 5ce:	0e 9d       	mul	r16, r14
 5d0:	90 01       	movw	r18, r0
 5d2:	0f 9d       	mul	r16, r15
 5d4:	30 0d       	add	r19, r0
 5d6:	1e 9d       	mul	r17, r14
 5d8:	30 0d       	add	r19, r0
 5da:	11 24       	eor	r1, r1
 5dc:	8c 01       	movw	r16, r24
 5de:	02 0f       	add	r16, r18
 5e0:	13 1f       	adc	r17, r19
 5e2:	98 80       	ld	r9, Y
 5e4:	21 96       	adiw	r28, 0x01	; 1
 5e6:	89 2d       	mov	r24, r9
 5e8:	0e 94 b6 02 	call	0x56c	; 0x56c <a2d>
 5ec:	99 23       	and	r25, r25
 5ee:	64 f7       	brge	.-40     	; 0x5c8 <a2i+0x2a>
 5f0:	f5 01       	movw	r30, r10
 5f2:	d1 83       	std	Z+1, r29	; 0x01
 5f4:	c0 83       	st	Z, r28
 5f6:	f6 01       	movw	r30, r12
 5f8:	11 83       	std	Z+1, r17	; 0x01
 5fa:	00 83       	st	Z, r16
 5fc:	89 2d       	mov	r24, r9
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	df 90       	pop	r13
 60c:	cf 90       	pop	r12
 60e:	bf 90       	pop	r11
 610:	af 90       	pop	r10
 612:	9f 90       	pop	r9
 614:	08 95       	ret

00000616 <putchw>:
 616:	bf 92       	push	r11
 618:	cf 92       	push	r12
 61a:	df 92       	push	r13
 61c:	ef 92       	push	r14
 61e:	ff 92       	push	r15
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	6c 01       	movw	r12, r24
 62a:	7b 01       	movw	r14, r22
 62c:	e8 01       	movw	r28, r16
 62e:	22 23       	and	r18, r18
 630:	29 f0       	breq	.+10     	; 0x63c <putchw+0x26>
 632:	0f 2e       	mov	r0, r31
 634:	f0 e3       	ldi	r31, 0x30	; 48
 636:	bf 2e       	mov	r11, r31
 638:	f0 2d       	mov	r31, r0
 63a:	03 c0       	rjmp	.+6      	; 0x642 <putchw+0x2c>
 63c:	68 94       	set
 63e:	bb 24       	eor	r11, r11
 640:	b5 f8       	bld	r11, 5
 642:	fe 01       	movw	r30, r28
 644:	03 c0       	rjmp	.+6      	; 0x64c <putchw+0x36>
 646:	41 50       	subi	r20, 0x01	; 1
 648:	51 09       	sbc	r21, r1
 64a:	f9 01       	movw	r30, r18
 64c:	9f 01       	movw	r18, r30
 64e:	2f 5f       	subi	r18, 0xFF	; 255
 650:	3f 4f       	sbci	r19, 0xFF	; 255
 652:	80 81       	ld	r24, Z
 654:	88 23       	and	r24, r24
 656:	49 f0       	breq	.+18     	; 0x66a <putchw+0x54>
 658:	14 16       	cp	r1, r20
 65a:	15 06       	cpc	r1, r21
 65c:	a4 f3       	brlt	.-24     	; 0x646 <putchw+0x30>
 65e:	05 c0       	rjmp	.+10     	; 0x66a <putchw+0x54>
 660:	6b 2d       	mov	r22, r11
 662:	c6 01       	movw	r24, r12
 664:	f7 01       	movw	r30, r14
 666:	09 95       	icall
 668:	a8 01       	movw	r20, r16
 66a:	8a 01       	movw	r16, r20
 66c:	01 50       	subi	r16, 0x01	; 1
 66e:	11 09       	sbc	r17, r1
 670:	14 16       	cp	r1, r20
 672:	15 06       	cpc	r1, r21
 674:	ac f3       	brlt	.-22     	; 0x660 <putchw+0x4a>
 676:	04 c0       	rjmp	.+8      	; 0x680 <putchw+0x6a>
 678:	c6 01       	movw	r24, r12
 67a:	f7 01       	movw	r30, r14
 67c:	09 95       	icall
 67e:	e8 01       	movw	r28, r16
 680:	8e 01       	movw	r16, r28
 682:	0f 5f       	subi	r16, 0xFF	; 255
 684:	1f 4f       	sbci	r17, 0xFF	; 255
 686:	68 81       	ld	r22, Y
 688:	61 11       	cpse	r22, r1
 68a:	f6 cf       	rjmp	.-20     	; 0x678 <putchw+0x62>
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	df 90       	pop	r13
 69a:	cf 90       	pop	r12
 69c:	bf 90       	pop	r11
 69e:	08 95       	ret

000006a0 <tfp_format>:
	while ((ch= *bf++))
	putf(putp,ch);
}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
{
 6a0:	7f 92       	push	r7
 6a2:	8f 92       	push	r8
 6a4:	9f 92       	push	r9
 6a6:	af 92       	push	r10
 6a8:	bf 92       	push	r11
 6aa:	cf 92       	push	r12
 6ac:	df 92       	push	r13
 6ae:	ef 92       	push	r14
 6b0:	ff 92       	push	r15
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	60 97       	sbiw	r28, 0x10	; 16
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	f8 94       	cli
 6c4:	de bf       	out	0x3e, r29	; 62
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	cd bf       	out	0x3d, r28	; 61
 6ca:	5c 01       	movw	r10, r24
 6cc:	6b 01       	movw	r12, r22
 6ce:	58 8b       	std	Y+16, r21	; 0x10
 6d0:	4f 87       	std	Y+15, r20	; 0x0f
 6d2:	79 01       	movw	r14, r18
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 6d4:	ff c0       	rjmp	.+510    	; 0x8d4 <tfp_format+0x234>
		if (ch!='%')
 6d6:	65 32       	cpi	r22, 0x25	; 37
 6d8:	21 f0       	breq	.+8      	; 0x6e2 <tfp_format+0x42>
		putf(putp,ch);
 6da:	c5 01       	movw	r24, r10
 6dc:	f6 01       	movw	r30, r12
 6de:	09 95       	icall
 6e0:	f9 c0       	rjmp	.+498    	; 0x8d4 <tfp_format+0x234>
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
			#endif
			int w=0;
 6e2:	1e 86       	std	Y+14, r1	; 0x0e
 6e4:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 6e6:	9d 01       	movw	r18, r26
 6e8:	2f 5f       	subi	r18, 0xFF	; 255
 6ea:	3f 4f       	sbci	r19, 0xFF	; 255
 6ec:	38 8b       	std	Y+16, r19	; 0x10
 6ee:	2f 87       	std	Y+15, r18	; 0x0f
 6f0:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 6f2:	80 33       	cpi	r24, 0x30	; 48
 6f4:	49 f4       	brne	.+18     	; 0x708 <tfp_format+0x68>
				ch=*(fmt++);
 6f6:	2f 5f       	subi	r18, 0xFF	; 255
 6f8:	3f 4f       	sbci	r19, 0xFF	; 255
 6fa:	38 8b       	std	Y+16, r19	; 0x10
 6fc:	2f 87       	std	Y+15, r18	; 0x0f
 6fe:	11 96       	adiw	r26, 0x01	; 1
 700:	8c 91       	ld	r24, X
				lz=1;
 702:	77 24       	eor	r7, r7
 704:	73 94       	inc	r7
 706:	01 c0       	rjmp	.+2      	; 0x70a <tfp_format+0x6a>

	while ((ch=*(fmt++))) {
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
 708:	71 2c       	mov	r7, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
			}
			if (ch>='0' && ch<='9') {
 70a:	90 ed       	ldi	r25, 0xD0	; 208
 70c:	98 0f       	add	r25, r24
 70e:	9a 30       	cpi	r25, 0x0A	; 10
 710:	50 f4       	brcc	.+20     	; 0x726 <tfp_format+0x86>
				ch=a2i(ch,&fmt,10,&w);
 712:	9e 01       	movw	r18, r28
 714:	23 5f       	subi	r18, 0xF3	; 243
 716:	3f 4f       	sbci	r19, 0xFF	; 255
 718:	4a e0       	ldi	r20, 0x0A	; 10
 71a:	50 e0       	ldi	r21, 0x00	; 0
 71c:	be 01       	movw	r22, r28
 71e:	61 5f       	subi	r22, 0xF1	; 241
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	0e 94 cf 02 	call	0x59e	; 0x59e <a2i>
			}
			#ifdef 	PRINTF_LONG_SUPPORT
			if (ch=='l') {
 726:	8c 36       	cpi	r24, 0x6C	; 108
 728:	49 f4       	brne	.+18     	; 0x73c <tfp_format+0x9c>
				ch=*(fmt++);
 72a:	ef 85       	ldd	r30, Y+15	; 0x0f
 72c:	f8 89       	ldd	r31, Y+16	; 0x10
 72e:	cf 01       	movw	r24, r30
 730:	01 96       	adiw	r24, 0x01	; 1
 732:	98 8b       	std	Y+16, r25	; 0x10
 734:	8f 87       	std	Y+15, r24	; 0x0f
 736:	80 81       	ld	r24, Z
				lng=1;
 738:	91 e0       	ldi	r25, 0x01	; 1
 73a:	01 c0       	rjmp	.+2      	; 0x73e <tfp_format+0x9e>
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
 73c:	90 e0       	ldi	r25, 0x00	; 0
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
			#endif
			switch (ch) {
 73e:	83 36       	cpi	r24, 0x63	; 99
 740:	09 f4       	brne	.+2      	; 0x744 <tfp_format+0xa4>
 742:	aa c0       	rjmp	.+340    	; 0x898 <tfp_format+0x1f8>
 744:	50 f4       	brcc	.+20     	; 0x75a <tfp_format+0xba>
 746:	85 32       	cpi	r24, 0x25	; 37
 748:	09 f4       	brne	.+2      	; 0x74c <tfp_format+0xac>
 74a:	c0 c0       	rjmp	.+384    	; 0x8cc <tfp_format+0x22c>
 74c:	88 35       	cpi	r24, 0x58	; 88
 74e:	09 f4       	brne	.+2      	; 0x752 <tfp_format+0xb2>
 750:	6a c0       	rjmp	.+212    	; 0x826 <tfp_format+0x186>
 752:	88 23       	and	r24, r24
 754:	09 f4       	brne	.+2      	; 0x758 <tfp_format+0xb8>
 756:	c7 c0       	rjmp	.+398    	; 0x8e6 <tfp_format+0x246>
 758:	bd c0       	rjmp	.+378    	; 0x8d4 <tfp_format+0x234>
 75a:	83 37       	cpi	r24, 0x73	; 115
 75c:	09 f4       	brne	.+2      	; 0x760 <tfp_format+0xc0>
 75e:	a6 c0       	rjmp	.+332    	; 0x8ac <tfp_format+0x20c>
 760:	18 f4       	brcc	.+6      	; 0x768 <tfp_format+0xc8>
 762:	84 36       	cpi	r24, 0x64	; 100
 764:	c1 f1       	breq	.+112    	; 0x7d6 <tfp_format+0x136>
 766:	b6 c0       	rjmp	.+364    	; 0x8d4 <tfp_format+0x234>
 768:	85 37       	cpi	r24, 0x75	; 117
 76a:	21 f0       	breq	.+8      	; 0x774 <tfp_format+0xd4>
 76c:	88 37       	cpi	r24, 0x78	; 120
 76e:	09 f4       	brne	.+2      	; 0x772 <tfp_format+0xd2>
 770:	5a c0       	rjmp	.+180    	; 0x826 <tfp_format+0x186>
 772:	b0 c0       	rjmp	.+352    	; 0x8d4 <tfp_format+0x234>
				case 0:
				goto abort;
				case 'u' : {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
 774:	99 23       	and	r25, r25
 776:	a1 f0       	breq	.+40     	; 0x7a0 <tfp_format+0x100>
					uli2a(va_arg(va, unsigned long int),10,0,bf);
 778:	47 01       	movw	r8, r14
 77a:	f4 e0       	ldi	r31, 0x04	; 4
 77c:	8f 0e       	add	r8, r31
 77e:	91 1c       	adc	r9, r1
 780:	f7 01       	movw	r30, r14
 782:	60 81       	ld	r22, Z
 784:	71 81       	ldd	r23, Z+1	; 0x01
 786:	82 81       	ldd	r24, Z+2	; 0x02
 788:	93 81       	ldd	r25, Z+3	; 0x03
 78a:	8e 01       	movw	r16, r28
 78c:	0f 5f       	subi	r16, 0xFF	; 255
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	4a e0       	ldi	r20, 0x0A	; 10
 796:	50 e0       	ldi	r21, 0x00	; 0
 798:	0e 94 90 01 	call	0x320	; 0x320 <uli2a>
 79c:	74 01       	movw	r14, r8
 79e:	10 c0       	rjmp	.+32     	; 0x7c0 <tfp_format+0x120>
					else
					#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 7a0:	87 01       	movw	r16, r14
 7a2:	0e 5f       	subi	r16, 0xFE	; 254
 7a4:	1f 4f       	sbci	r17, 0xFF	; 255
 7a6:	9e 01       	movw	r18, r28
 7a8:	2f 5f       	subi	r18, 0xFF	; 255
 7aa:	3f 4f       	sbci	r19, 0xFF	; 255
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	50 e0       	ldi	r21, 0x00	; 0
 7b0:	6a e0       	ldi	r22, 0x0A	; 10
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	f7 01       	movw	r30, r14
 7b6:	80 81       	ld	r24, Z
 7b8:	91 81       	ldd	r25, Z+1	; 0x01
 7ba:	0e 94 40 02 	call	0x480	; 0x480 <ui2a>
 7be:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 7c0:	4d 85       	ldd	r20, Y+13	; 0x0d
 7c2:	5e 85       	ldd	r21, Y+14	; 0x0e
 7c4:	8e 01       	movw	r16, r28
 7c6:	0f 5f       	subi	r16, 0xFF	; 255
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	27 2d       	mov	r18, r7
 7cc:	b6 01       	movw	r22, r12
 7ce:	c5 01       	movw	r24, r10
 7d0:	0e 94 0b 03 	call	0x616	; 0x616 <putchw>
					break;
 7d4:	7f c0       	rjmp	.+254    	; 0x8d4 <tfp_format+0x234>
				}
				case 'd' :  {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng){
 7d6:	99 23       	and	r25, r25
 7d8:	79 f0       	breq	.+30     	; 0x7f8 <tfp_format+0x158>
						//						li2a(va_arg(va, unsigned long int),bf);
						li2a(va_arg(va, long int),bf);
 7da:	87 01       	movw	r16, r14
 7dc:	0c 5f       	subi	r16, 0xFC	; 252
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	f7 01       	movw	r30, r14
 7e2:	60 81       	ld	r22, Z
 7e4:	71 81       	ldd	r23, Z+1	; 0x01
 7e6:	82 81       	ldd	r24, Z+2	; 0x02
 7e8:	93 81       	ldd	r25, Z+3	; 0x03
 7ea:	ae 01       	movw	r20, r28
 7ec:	4f 5f       	subi	r20, 0xFF	; 255
 7ee:	5f 4f       	sbci	r21, 0xFF	; 255
 7f0:	0e 94 26 02 	call	0x44c	; 0x44c <li2a>
 7f4:	78 01       	movw	r14, r16
 7f6:	0c c0       	rjmp	.+24     	; 0x810 <tfp_format+0x170>
					else
					#endif



					i2a(va_arg(va, int),bf);
 7f8:	87 01       	movw	r16, r14
 7fa:	0e 5f       	subi	r16, 0xFE	; 254
 7fc:	1f 4f       	sbci	r17, 0xFF	; 255
 7fe:	be 01       	movw	r22, r28
 800:	6f 5f       	subi	r22, 0xFF	; 255
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	f7 01       	movw	r30, r14
 806:	80 81       	ld	r24, Z
 808:	91 81       	ldd	r25, Z+1	; 0x01
 80a:	0e 94 a4 02 	call	0x548	; 0x548 <i2a>
 80e:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 810:	4d 85       	ldd	r20, Y+13	; 0x0d
 812:	5e 85       	ldd	r21, Y+14	; 0x0e
 814:	8e 01       	movw	r16, r28
 816:	0f 5f       	subi	r16, 0xFF	; 255
 818:	1f 4f       	sbci	r17, 0xFF	; 255
 81a:	27 2d       	mov	r18, r7
 81c:	b6 01       	movw	r22, r12
 81e:	c5 01       	movw	r24, r10
 820:	0e 94 0b 03 	call	0x616	; 0x616 <putchw>
					break;
 824:	57 c0       	rjmp	.+174    	; 0x8d4 <tfp_format+0x234>
				}
				case 'x': case 'X' :
				#ifdef 	PRINTF_LONG_SUPPORT
				if (lng)
 826:	99 23       	and	r25, r25
 828:	c1 f0       	breq	.+48     	; 0x85a <tfp_format+0x1ba>
				uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
 82a:	47 01       	movw	r8, r14
 82c:	f4 e0       	ldi	r31, 0x04	; 4
 82e:	8f 0e       	add	r8, r31
 830:	91 1c       	adc	r9, r1
 832:	21 e0       	ldi	r18, 0x01	; 1
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	88 35       	cpi	r24, 0x58	; 88
 838:	11 f0       	breq	.+4      	; 0x83e <tfp_format+0x19e>
 83a:	20 e0       	ldi	r18, 0x00	; 0
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	f7 01       	movw	r30, r14
 840:	60 81       	ld	r22, Z
 842:	71 81       	ldd	r23, Z+1	; 0x01
 844:	82 81       	ldd	r24, Z+2	; 0x02
 846:	93 81       	ldd	r25, Z+3	; 0x03
 848:	8e 01       	movw	r16, r28
 84a:	0f 5f       	subi	r16, 0xFF	; 255
 84c:	1f 4f       	sbci	r17, 0xFF	; 255
 84e:	40 e1       	ldi	r20, 0x10	; 16
 850:	50 e0       	ldi	r21, 0x00	; 0
 852:	0e 94 90 01 	call	0x320	; 0x320 <uli2a>
 856:	74 01       	movw	r14, r8
 858:	14 c0       	rjmp	.+40     	; 0x882 <tfp_format+0x1e2>
				else
				#endif
				ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 85a:	87 01       	movw	r16, r14
 85c:	0e 5f       	subi	r16, 0xFE	; 254
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
 860:	41 e0       	ldi	r20, 0x01	; 1
 862:	50 e0       	ldi	r21, 0x00	; 0
 864:	88 35       	cpi	r24, 0x58	; 88
 866:	11 f0       	breq	.+4      	; 0x86c <tfp_format+0x1cc>
 868:	40 e0       	ldi	r20, 0x00	; 0
 86a:	50 e0       	ldi	r21, 0x00	; 0
 86c:	9e 01       	movw	r18, r28
 86e:	2f 5f       	subi	r18, 0xFF	; 255
 870:	3f 4f       	sbci	r19, 0xFF	; 255
 872:	60 e1       	ldi	r22, 0x10	; 16
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	f7 01       	movw	r30, r14
 878:	80 81       	ld	r24, Z
 87a:	91 81       	ldd	r25, Z+1	; 0x01
 87c:	0e 94 40 02 	call	0x480	; 0x480 <ui2a>
 880:	78 01       	movw	r14, r16
				putchw(putp,putf,w,lz,bf);
 882:	4d 85       	ldd	r20, Y+13	; 0x0d
 884:	5e 85       	ldd	r21, Y+14	; 0x0e
 886:	8e 01       	movw	r16, r28
 888:	0f 5f       	subi	r16, 0xFF	; 255
 88a:	1f 4f       	sbci	r17, 0xFF	; 255
 88c:	27 2d       	mov	r18, r7
 88e:	b6 01       	movw	r22, r12
 890:	c5 01       	movw	r24, r10
 892:	0e 94 0b 03 	call	0x616	; 0x616 <putchw>
				break;
 896:	1e c0       	rjmp	.+60     	; 0x8d4 <tfp_format+0x234>
				case 'c' :
				putf(putp,(char)(va_arg(va, int)));
 898:	87 01       	movw	r16, r14
 89a:	0e 5f       	subi	r16, 0xFE	; 254
 89c:	1f 4f       	sbci	r17, 0xFF	; 255
 89e:	f7 01       	movw	r30, r14
 8a0:	60 81       	ld	r22, Z
 8a2:	c5 01       	movw	r24, r10
 8a4:	f6 01       	movw	r30, r12
 8a6:	09 95       	icall
 8a8:	78 01       	movw	r14, r16
				break;
 8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <tfp_format+0x234>
				case 's' :
				putchw(putp,putf,w,0,va_arg(va, char*));
 8ac:	47 01       	movw	r8, r14
 8ae:	f2 e0       	ldi	r31, 0x02	; 2
 8b0:	8f 0e       	add	r8, r31
 8b2:	91 1c       	adc	r9, r1
 8b4:	f7 01       	movw	r30, r14
 8b6:	00 81       	ld	r16, Z
 8b8:	11 81       	ldd	r17, Z+1	; 0x01
 8ba:	4d 85       	ldd	r20, Y+13	; 0x0d
 8bc:	5e 85       	ldd	r21, Y+14	; 0x0e
 8be:	20 e0       	ldi	r18, 0x00	; 0
 8c0:	b6 01       	movw	r22, r12
 8c2:	c5 01       	movw	r24, r10
 8c4:	0e 94 0b 03 	call	0x616	; 0x616 <putchw>
 8c8:	74 01       	movw	r14, r8
				break;
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <tfp_format+0x234>
				case '%' :
				putf(putp,ch);
 8cc:	68 2f       	mov	r22, r24
 8ce:	c5 01       	movw	r24, r10
 8d0:	f6 01       	movw	r30, r12
 8d2:	09 95       	icall
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 8d4:	ef 85       	ldd	r30, Y+15	; 0x0f
 8d6:	f8 89       	ldd	r31, Y+16	; 0x10
 8d8:	df 01       	movw	r26, r30
 8da:	11 96       	adiw	r26, 0x01	; 1
 8dc:	b8 8b       	std	Y+16, r27	; 0x10
 8de:	af 87       	std	Y+15, r26	; 0x0f
 8e0:	60 81       	ld	r22, Z
 8e2:	61 11       	cpse	r22, r1
 8e4:	f8 ce       	rjmp	.-528    	; 0x6d6 <tfp_format+0x36>
				break;
			}
		}
	}
	abort:;
}
 8e6:	60 96       	adiw	r28, 0x10	; 16
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	f8 94       	cli
 8ec:	de bf       	out	0x3e, r29	; 62
 8ee:	0f be       	out	0x3f, r0	; 63
 8f0:	cd bf       	out	0x3d, r28	; 61
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	1f 91       	pop	r17
 8f8:	0f 91       	pop	r16
 8fa:	ff 90       	pop	r15
 8fc:	ef 90       	pop	r14
 8fe:	df 90       	pop	r13
 900:	cf 90       	pop	r12
 902:	bf 90       	pop	r11
 904:	af 90       	pop	r10
 906:	9f 90       	pop	r9
 908:	8f 90       	pop	r8
 90a:	7f 90       	pop	r7
 90c:	08 95       	ret

0000090e <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
{
	stdout_putf=putf;
 90e:	70 93 76 00 	sts	0x0076, r23	; 0x800076 <stdout_putf+0x1>
 912:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <stdout_putf>
	stdout_putp=putp;
 916:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <stdout_putp+0x1>
 91a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <stdout_putp>
 91e:	08 95       	ret

00000920 <tfp_printf>:
}

void tfp_printf(char *fmt, ...)
{
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	9e 01       	movw	r18, r28
 92a:	2b 5f       	subi	r18, 0xFB	; 251
 92c:	3f 4f       	sbci	r19, 0xFF	; 255
 92e:	f9 01       	movw	r30, r18
 930:	41 91       	ld	r20, Z+
 932:	51 91       	ld	r21, Z+
 934:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 936:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <stdout_putf>
 93a:	70 91 76 00 	lds	r23, 0x0076	; 0x800076 <stdout_putf+0x1>
 93e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <stdout_putp>
 942:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <stdout_putp+0x1>
 946:	0e 94 50 03 	call	0x6a0	; 0x6a0 <tfp_format>
	va_end(va);
}
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	08 95       	ret

00000950 <__mulsi3>:
 950:	db 01       	movw	r26, r22
 952:	8f 93       	push	r24
 954:	9f 93       	push	r25
 956:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__muluhisi3>
 95a:	bf 91       	pop	r27
 95c:	af 91       	pop	r26
 95e:	a2 9f       	mul	r26, r18
 960:	80 0d       	add	r24, r0
 962:	91 1d       	adc	r25, r1
 964:	a3 9f       	mul	r26, r19
 966:	90 0d       	add	r25, r0
 968:	b2 9f       	mul	r27, r18
 96a:	90 0d       	add	r25, r0
 96c:	11 24       	eor	r1, r1
 96e:	08 95       	ret

00000970 <__udivmodhi4>:
 970:	aa 1b       	sub	r26, r26
 972:	bb 1b       	sub	r27, r27
 974:	51 e1       	ldi	r21, 0x11	; 17
 976:	07 c0       	rjmp	.+14     	; 0x986 <__udivmodhi4_ep>

00000978 <__udivmodhi4_loop>:
 978:	aa 1f       	adc	r26, r26
 97a:	bb 1f       	adc	r27, r27
 97c:	a6 17       	cp	r26, r22
 97e:	b7 07       	cpc	r27, r23
 980:	10 f0       	brcs	.+4      	; 0x986 <__udivmodhi4_ep>
 982:	a6 1b       	sub	r26, r22
 984:	b7 0b       	sbc	r27, r23

00000986 <__udivmodhi4_ep>:
 986:	88 1f       	adc	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	5a 95       	dec	r21
 98c:	a9 f7       	brne	.-22     	; 0x978 <__udivmodhi4_loop>
 98e:	80 95       	com	r24
 990:	90 95       	com	r25
 992:	bc 01       	movw	r22, r24
 994:	cd 01       	movw	r24, r26
 996:	08 95       	ret

00000998 <__udivmodsi4>:
 998:	a1 e2       	ldi	r26, 0x21	; 33
 99a:	1a 2e       	mov	r1, r26
 99c:	aa 1b       	sub	r26, r26
 99e:	bb 1b       	sub	r27, r27
 9a0:	fd 01       	movw	r30, r26
 9a2:	0d c0       	rjmp	.+26     	; 0x9be <__udivmodsi4_ep>

000009a4 <__udivmodsi4_loop>:
 9a4:	aa 1f       	adc	r26, r26
 9a6:	bb 1f       	adc	r27, r27
 9a8:	ee 1f       	adc	r30, r30
 9aa:	ff 1f       	adc	r31, r31
 9ac:	a2 17       	cp	r26, r18
 9ae:	b3 07       	cpc	r27, r19
 9b0:	e4 07       	cpc	r30, r20
 9b2:	f5 07       	cpc	r31, r21
 9b4:	20 f0       	brcs	.+8      	; 0x9be <__udivmodsi4_ep>
 9b6:	a2 1b       	sub	r26, r18
 9b8:	b3 0b       	sbc	r27, r19
 9ba:	e4 0b       	sbc	r30, r20
 9bc:	f5 0b       	sbc	r31, r21

000009be <__udivmodsi4_ep>:
 9be:	66 1f       	adc	r22, r22
 9c0:	77 1f       	adc	r23, r23
 9c2:	88 1f       	adc	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	1a 94       	dec	r1
 9c8:	69 f7       	brne	.-38     	; 0x9a4 <__udivmodsi4_loop>
 9ca:	60 95       	com	r22
 9cc:	70 95       	com	r23
 9ce:	80 95       	com	r24
 9d0:	90 95       	com	r25
 9d2:	9b 01       	movw	r18, r22
 9d4:	ac 01       	movw	r20, r24
 9d6:	bd 01       	movw	r22, r26
 9d8:	cf 01       	movw	r24, r30
 9da:	08 95       	ret

000009dc <__umulhisi3>:
 9dc:	a2 9f       	mul	r26, r18
 9de:	b0 01       	movw	r22, r0
 9e0:	b3 9f       	mul	r27, r19
 9e2:	c0 01       	movw	r24, r0
 9e4:	a3 9f       	mul	r26, r19
 9e6:	70 0d       	add	r23, r0
 9e8:	81 1d       	adc	r24, r1
 9ea:	11 24       	eor	r1, r1
 9ec:	91 1d       	adc	r25, r1
 9ee:	b2 9f       	mul	r27, r18
 9f0:	70 0d       	add	r23, r0
 9f2:	81 1d       	adc	r24, r1
 9f4:	11 24       	eor	r1, r1
 9f6:	91 1d       	adc	r25, r1
 9f8:	08 95       	ret

000009fa <__muluhisi3>:
 9fa:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__umulhisi3>
 9fe:	a5 9f       	mul	r26, r21
 a00:	90 0d       	add	r25, r0
 a02:	b4 9f       	mul	r27, r20
 a04:	90 0d       	add	r25, r0
 a06:	a4 9f       	mul	r26, r20
 a08:	80 0d       	add	r24, r0
 a0a:	91 1d       	adc	r25, r1
 a0c:	11 24       	eor	r1, r1
 a0e:	08 95       	ret

00000a10 <_exit>:
 a10:	f8 94       	cli

00000a12 <__stop_program>:
 a12:	ff cf       	rjmp	.-2      	; 0xa12 <__stop_program>

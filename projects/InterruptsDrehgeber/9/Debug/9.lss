
9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000009ca  00000a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006c  0080006c  00000a6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001463  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091e  00000000  00000000  00002013  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a1  00000000  00000000  00002931  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  000032d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fe  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000167c  00000000  00000000  00003ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00005142  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  8a:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <InitPorts>:

// Initialize ports
void InitPorts()
{
    // Port D: DIR-Pin als Eingang
    DDRD &= ~(1 << DIR_PIN);
 1e6:	81 b3       	in	r24, 0x11	; 17
 1e8:	8b 7f       	andi	r24, 0xFB	; 251
 1ea:	81 bb       	out	0x11, r24	; 17

    // Port C: LEDs als Ausgänge
    DDRC = 0xFF;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	84 bb       	out	0x14, r24	; 20
 1f0:	08 95       	ret

000001f2 <main>:
}

int main(void)
{
    InitPorts();
 1f2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <InitPorts>
    lcd_init();
 1f6:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>

    // Deaktiviere den externen INT1 (PD3 wird als Eingang genutzt)
    GICR &= ~(1 << INT1);
 1fa:	8b b7       	in	r24, 0x3b	; 59
 1fc:	8f 77       	andi	r24, 0x7F	; 127
 1fe:	8b bf       	out	0x3b, r24	; 59

    // PD3 (CLK-Pin) als Eingang mit Pull-Up-Widerstand
    DDRD &= ~(1 << CLK_PIN);
 200:	81 b3       	in	r24, 0x11	; 17
 202:	87 7f       	andi	r24, 0xF7	; 247
 204:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1 << CLK_PIN);
 206:	82 b3       	in	r24, 0x12	; 18
 208:	88 60       	ori	r24, 0x08	; 8
 20a:	82 bb       	out	0x12, r24	; 18

    uint8_t previousState = (PIND & (1 << CLK_PIN)) ? 1 : 0;
 20c:	30 b3       	in	r19, 0x10	; 16
 20e:	33 fb       	bst	r19, 3
 210:	33 27       	eor	r19, r19
 212:	30 f9       	bld	r19, 0
 214:	01 c0       	rjmp	.+2      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
    // Port C: LEDs als Ausgänge
    DDRC = 0xFF;
}

int main(void)
{
 216:	3c 2f       	mov	r19, r28
    uint8_t previousState = (PIND & (1 << CLK_PIN)) ? 1 : 0;
    uint8_t currentState;

    while (1)
    {
        currentState = (PIND & (1 << CLK_PIN)) ? 1 : 0;
 218:	80 b3       	in	r24, 0x10	; 16
 21a:	88 70       	andi	r24, 0x08	; 8
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	09 f4       	brne	.+2      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	c2 2f       	mov	r28, r18

        // Erkenne steigende Flanke (alter Zustand=0 und neuer Zustand=1)
        if (previousState == 0 && currentState == 1)
 228:	31 11       	cpse	r19, r1
 22a:	f5 cf       	rjmp	.-22     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 22c:	89 2b       	or	r24, r25
 22e:	99 f3       	breq	.-26     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
        {
            impulsesForSingleRotation++;
 230:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <impulsesForSingleRotation>
 234:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <impulsesForSingleRotation+0x1>
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <impulsesForSingleRotation+0x1>
 23e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <impulsesForSingleRotation>

            // software vortieler für sensitivität
            if (impulsesForSingleRotation % SOFTWARE_PRESCALER == 0)
 242:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <impulsesForSingleRotation>
 246:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <impulsesForSingleRotation+0x1>
 24a:	9a 01       	movw	r18, r20
 24c:	ad ec       	ldi	r26, 0xCD	; 205
 24e:	bc ec       	ldi	r27, 0xCC	; 204
 250:	0e 94 c9 04 	call	0x992	; 0x992 <__umulhisi3>
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	9c 01       	movw	r18, r24
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	82 0f       	add	r24, r18
 274:	93 1f       	adc	r25, r19
 276:	48 17       	cp	r20, r24
 278:	59 07       	cpc	r21, r25
 27a:	69 f6       	brne	.-102    	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
            {
                // cceckt max impulse
                if (impulsesForSingleRotation > maxImpulsesForSingleRotation)
 27c:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <impulsesForSingleRotation>
 280:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <impulsesForSingleRotation+0x1>
 284:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <maxImpulsesForSingleRotation>
 288:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <maxImpulsesForSingleRotation+0x1>
 28c:	82 17       	cp	r24, r18
 28e:	93 07       	cpc	r25, r19
 290:	40 f4       	brcc	.+16     	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
                {
                    maxImpulsesForSingleRotation = impulsesForSingleRotation;
 292:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <impulsesForSingleRotation>
 296:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <impulsesForSingleRotation+0x1>
 29a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <maxImpulsesForSingleRotation+0x1>
 29e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <maxImpulsesForSingleRotation>
                }

                PORTC = impulsesForSingleRotation;
 2a2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <impulsesForSingleRotation>
 2a6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <impulsesForSingleRotation+0x1>
 2aa:	85 bb       	out	0x15, r24	; 21
                lcd_pos(0, 1);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
                //printf("Impulse: %d", impulsesForSingleRotation);
				printf("Count: %d ", printfCount);
 2b4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 2b8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 2bc:	9f 93       	push	r25
 2be:	8f 93       	push	r24
 2c0:	80 e6       	ldi	r24, 0x60	; 96
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	9f 93       	push	r25
 2c6:	8f 93       	push	r24
 2c8:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <tfp_printf>
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	a0 cf       	rjmp	.-192    	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>

000002d6 <uli2a>:
	va_end(va);
}

static void putcp(void* p,char c)
{
	*(*((char**)p))++ = c;
 2d6:	2f 92       	push	r2
 2d8:	3f 92       	push	r3
 2da:	4f 92       	push	r4
 2dc:	5f 92       	push	r5
 2de:	6f 92       	push	r6
 2e0:	7f 92       	push	r7
 2e2:	8f 92       	push	r8
 2e4:	9f 92       	push	r9
 2e6:	af 92       	push	r10
 2e8:	bf 92       	push	r11
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <uli2a+0x26>
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <uli2a+0x28>
 2fe:	1f 92       	push	r1
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	6c 83       	std	Y+4, r22	; 0x04
 306:	7d 83       	std	Y+5, r23	; 0x05
 308:	98 2e       	mov	r9, r24
 30a:	89 2e       	mov	r8, r25
 30c:	5a 01       	movw	r10, r20
 30e:	3b 83       	std	Y+3, r19	; 0x03
 310:	2a 83       	std	Y+2, r18	; 0x02
 312:	c1 2c       	mov	r12, r1
 314:	d1 2c       	mov	r13, r1
 316:	76 01       	movw	r14, r12
 318:	c3 94       	inc	r12
 31a:	08 c0       	rjmp	.+16     	; 0x32c <uli2a+0x56>
 31c:	a7 01       	movw	r20, r14
 31e:	96 01       	movw	r18, r12
 320:	c3 01       	movw	r24, r6
 322:	b2 01       	movw	r22, r4
 324:	0e 94 83 04 	call	0x906	; 0x906 <__mulsi3>
 328:	6b 01       	movw	r12, r22
 32a:	7c 01       	movw	r14, r24
 32c:	6c 81       	ldd	r22, Y+4	; 0x04
 32e:	7d 81       	ldd	r23, Y+5	; 0x05
 330:	89 2d       	mov	r24, r9
 332:	98 2d       	mov	r25, r8
 334:	a7 01       	movw	r20, r14
 336:	96 01       	movw	r18, r12
 338:	0e 94 a7 04 	call	0x94e	; 0x94e <__udivmodsi4>
 33c:	25 01       	movw	r4, r10
 33e:	61 2c       	mov	r6, r1
 340:	71 2c       	mov	r7, r1
 342:	24 15       	cp	r18, r4
 344:	35 05       	cpc	r19, r5
 346:	46 05       	cpc	r20, r6
 348:	57 05       	cpc	r21, r7
 34a:	40 f7       	brcc	.-48     	; 0x31c <uli2a+0x46>
 34c:	a1 2c       	mov	r10, r1
 34e:	b1 2c       	mov	r11, r1
 350:	39 c0       	rjmp	.+114    	; 0x3c4 <uli2a+0xee>
 352:	6c 81       	ldd	r22, Y+4	; 0x04
 354:	7d 81       	ldd	r23, Y+5	; 0x05
 356:	89 2d       	mov	r24, r9
 358:	98 2d       	mov	r25, r8
 35a:	a7 01       	movw	r20, r14
 35c:	96 01       	movw	r18, r12
 35e:	0e 94 a7 04 	call	0x94e	; 0x94e <__udivmodsi4>
 362:	29 83       	std	Y+1, r18	; 0x01
 364:	42 2f       	mov	r20, r18
 366:	24 2e       	mov	r2, r20
 368:	33 2e       	mov	r3, r19
 36a:	6c 83       	std	Y+4, r22	; 0x04
 36c:	7d 83       	std	Y+5, r23	; 0x05
 36e:	98 2e       	mov	r9, r24
 370:	89 2e       	mov	r8, r25
 372:	c7 01       	movw	r24, r14
 374:	b6 01       	movw	r22, r12
 376:	a3 01       	movw	r20, r6
 378:	92 01       	movw	r18, r4
 37a:	0e 94 a7 04 	call	0x94e	; 0x94e <__udivmodsi4>
 37e:	69 01       	movw	r12, r18
 380:	7a 01       	movw	r14, r20
 382:	a1 14       	cp	r10, r1
 384:	b1 04       	cpc	r11, r1
 386:	39 f4       	brne	.+14     	; 0x396 <uli2a+0xc0>
 388:	12 14       	cp	r1, r2
 38a:	13 04       	cpc	r1, r3
 38c:	24 f0       	brlt	.+8      	; 0x396 <uli2a+0xc0>
 38e:	23 2b       	or	r18, r19
 390:	24 2b       	or	r18, r20
 392:	25 2b       	or	r18, r21
 394:	b9 f4       	brne	.+46     	; 0x3c4 <uli2a+0xee>
 396:	c8 01       	movw	r24, r16
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	2a e0       	ldi	r18, 0x0A	; 10
 39c:	22 16       	cp	r2, r18
 39e:	31 04       	cpc	r3, r1
 3a0:	34 f0       	brlt	.+12     	; 0x3ae <uli2a+0xd8>
 3a2:	ea 81       	ldd	r30, Y+2	; 0x02
 3a4:	fb 81       	ldd	r31, Y+3	; 0x03
 3a6:	ef 2b       	or	r30, r31
 3a8:	21 f0       	breq	.+8      	; 0x3b2 <uli2a+0xdc>
 3aa:	27 e3       	ldi	r18, 0x37	; 55
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <uli2a+0xde>
 3ae:	20 e3       	ldi	r18, 0x30	; 48
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <uli2a+0xde>
 3b2:	27 e5       	ldi	r18, 0x57	; 87
 3b4:	39 80       	ldd	r3, Y+1	; 0x01
 3b6:	32 0e       	add	r3, r18
 3b8:	f8 01       	movw	r30, r16
 3ba:	30 82       	st	Z, r3
 3bc:	ff ef       	ldi	r31, 0xFF	; 255
 3be:	af 1a       	sub	r10, r31
 3c0:	bf 0a       	sbc	r11, r31
 3c2:	8c 01       	movw	r16, r24
 3c4:	c1 14       	cp	r12, r1
 3c6:	d1 04       	cpc	r13, r1
 3c8:	e1 04       	cpc	r14, r1
 3ca:	f1 04       	cpc	r15, r1
 3cc:	11 f6       	brne	.-124    	; 0x352 <uli2a+0x7c>
 3ce:	f8 01       	movw	r30, r16
 3d0:	10 82       	st	Z, r1
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	cf 90       	pop	r12
 3ec:	bf 90       	pop	r11
 3ee:	af 90       	pop	r10
 3f0:	9f 90       	pop	r9
 3f2:	8f 90       	pop	r8
 3f4:	7f 90       	pop	r7
 3f6:	6f 90       	pop	r6
 3f8:	5f 90       	pop	r5
 3fa:	4f 90       	pop	r4
 3fc:	3f 90       	pop	r3
 3fe:	2f 90       	pop	r2
 400:	08 95       	ret

00000402 <li2a>:
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	99 23       	and	r25, r25
 408:	64 f4       	brge	.+24     	; 0x422 <li2a+0x20>
 40a:	90 95       	com	r25
 40c:	80 95       	com	r24
 40e:	70 95       	com	r23
 410:	61 95       	neg	r22
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	2d e2       	ldi	r18, 0x2D	; 45
 41a:	fa 01       	movw	r30, r20
 41c:	20 83       	st	Z, r18
 41e:	4f 5f       	subi	r20, 0xFF	; 255
 420:	5f 4f       	sbci	r21, 0xFF	; 255
 422:	8a 01       	movw	r16, r20
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	4a e0       	ldi	r20, 0x0A	; 10
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <uli2a>
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	08 95       	ret

00000436 <ui2a>:
 436:	8f 92       	push	r8
 438:	9f 92       	push	r9
 43a:	af 92       	push	r10
 43c:	bf 92       	push	r11
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	c8 2f       	mov	r28, r24
 450:	d9 2f       	mov	r29, r25
 452:	8b 01       	movw	r16, r22
 454:	6a 01       	movw	r12, r20
 456:	79 01       	movw	r14, r18
 458:	e1 e0       	ldi	r30, 0x01	; 1
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	08 c0       	rjmp	.+16     	; 0x46e <__stack+0xf>
 45e:	cf 01       	movw	r24, r30
 460:	80 9f       	mul	r24, r16
 462:	f0 01       	movw	r30, r0
 464:	81 9f       	mul	r24, r17
 466:	f0 0d       	add	r31, r0
 468:	90 9f       	mul	r25, r16
 46a:	f0 0d       	add	r31, r0
 46c:	11 24       	eor	r1, r1
 46e:	8c 2f       	mov	r24, r28
 470:	9d 2f       	mov	r25, r29
 472:	bf 01       	movw	r22, r30
 474:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodhi4>
 478:	60 17       	cp	r22, r16
 47a:	71 07       	cpc	r23, r17
 47c:	80 f7       	brcc	.-32     	; 0x45e <ui2a+0x28>
 47e:	a1 2c       	mov	r10, r1
 480:	b1 2c       	mov	r11, r1
 482:	2c c0       	rjmp	.+88     	; 0x4dc <__stack+0x7d>
 484:	8c 2f       	mov	r24, r28
 486:	9d 2f       	mov	r25, r29
 488:	bf 01       	movw	r22, r30
 48a:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodhi4>
 48e:	36 2f       	mov	r19, r22
 490:	86 2e       	mov	r8, r22
 492:	97 2e       	mov	r9, r23
 494:	c8 2f       	mov	r28, r24
 496:	d9 2f       	mov	r29, r25
 498:	cf 01       	movw	r24, r30
 49a:	b8 01       	movw	r22, r16
 49c:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodhi4>
 4a0:	fb 01       	movw	r30, r22
 4a2:	a1 14       	cp	r10, r1
 4a4:	b1 04       	cpc	r11, r1
 4a6:	29 f4       	brne	.+10     	; 0x4b2 <__stack+0x53>
 4a8:	18 14       	cp	r1, r8
 4aa:	19 04       	cpc	r1, r9
 4ac:	14 f0       	brlt	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	30 97       	sbiw	r30, 0x00	; 0
 4b0:	a9 f4       	brne	.+42     	; 0x4dc <__stack+0x7d>
 4b2:	c7 01       	movw	r24, r14
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	aa e0       	ldi	r26, 0x0A	; 10
 4b8:	8a 16       	cp	r8, r26
 4ba:	91 04       	cpc	r9, r1
 4bc:	2c f0       	brlt	.+10     	; 0x4c8 <__stack+0x69>
 4be:	c1 14       	cp	r12, r1
 4c0:	d1 04       	cpc	r13, r1
 4c2:	21 f0       	breq	.+8      	; 0x4cc <__stack+0x6d>
 4c4:	27 e3       	ldi	r18, 0x37	; 55
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__stack+0x6f>
 4c8:	20 e3       	ldi	r18, 0x30	; 48
 4ca:	01 c0       	rjmp	.+2      	; 0x4ce <__stack+0x6f>
 4cc:	27 e5       	ldi	r18, 0x57	; 87
 4ce:	32 0f       	add	r19, r18
 4d0:	d7 01       	movw	r26, r14
 4d2:	3c 93       	st	X, r19
 4d4:	bf ef       	ldi	r27, 0xFF	; 255
 4d6:	ab 1a       	sub	r10, r27
 4d8:	bb 0a       	sbc	r11, r27
 4da:	7c 01       	movw	r14, r24
 4dc:	30 97       	sbiw	r30, 0x00	; 0
 4de:	91 f6       	brne	.-92     	; 0x484 <__stack+0x25>
 4e0:	f7 01       	movw	r30, r14
 4e2:	10 82       	st	Z, r1
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	cf 90       	pop	r12
 4f4:	bf 90       	pop	r11
 4f6:	af 90       	pop	r10
 4f8:	9f 90       	pop	r9
 4fa:	8f 90       	pop	r8
 4fc:	08 95       	ret

000004fe <i2a>:
 4fe:	9b 01       	movw	r18, r22
 500:	99 23       	and	r25, r25
 502:	44 f4       	brge	.+16     	; 0x514 <i2a+0x16>
 504:	91 95       	neg	r25
 506:	81 95       	neg	r24
 508:	91 09       	sbc	r25, r1
 50a:	4d e2       	ldi	r20, 0x2D	; 45
 50c:	fb 01       	movw	r30, r22
 50e:	40 83       	st	Z, r20
 510:	2f 5f       	subi	r18, 0xFF	; 255
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	6a e0       	ldi	r22, 0x0A	; 10
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	0e 94 1b 02 	call	0x436	; 0x436 <ui2a>
 520:	08 95       	ret

00000522 <a2d>:
 522:	90 ed       	ldi	r25, 0xD0	; 208
 524:	98 0f       	add	r25, r24
 526:	9a 30       	cpi	r25, 0x0A	; 10
 528:	18 f4       	brcc	.+6      	; 0x530 <a2d+0xe>
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	c0 97       	sbiw	r24, 0x30	; 48
 52e:	08 95       	ret
 530:	9f e9       	ldi	r25, 0x9F	; 159
 532:	98 0f       	add	r25, r24
 534:	96 30       	cpi	r25, 0x06	; 6
 536:	20 f4       	brcc	.+8      	; 0x540 <a2d+0x1e>
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	87 55       	subi	r24, 0x57	; 87
 53c:	91 09       	sbc	r25, r1
 53e:	08 95       	ret
 540:	9f eb       	ldi	r25, 0xBF	; 191
 542:	98 0f       	add	r25, r24
 544:	96 30       	cpi	r25, 0x06	; 6
 546:	18 f4       	brcc	.+6      	; 0x54e <a2d+0x2c>
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	c7 97       	sbiw	r24, 0x37	; 55
 54c:	08 95       	ret
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	9f ef       	ldi	r25, 0xFF	; 255
 552:	08 95       	ret

00000554 <a2i>:
 554:	9f 92       	push	r9
 556:	af 92       	push	r10
 558:	bf 92       	push	r11
 55a:	cf 92       	push	r12
 55c:	df 92       	push	r13
 55e:	ef 92       	push	r14
 560:	ff 92       	push	r15
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	98 2e       	mov	r9, r24
 56c:	5b 01       	movw	r10, r22
 56e:	7a 01       	movw	r14, r20
 570:	69 01       	movw	r12, r18
 572:	fb 01       	movw	r30, r22
 574:	c0 81       	ld	r28, Z
 576:	d1 81       	ldd	r29, Z+1	; 0x01
 578:	00 e0       	ldi	r16, 0x00	; 0
 57a:	10 e0       	ldi	r17, 0x00	; 0
 57c:	0f c0       	rjmp	.+30     	; 0x59c <a2i+0x48>
 57e:	e8 16       	cp	r14, r24
 580:	f9 06       	cpc	r15, r25
 582:	8c f0       	brlt	.+34     	; 0x5a6 <a2i+0x52>
 584:	0e 9d       	mul	r16, r14
 586:	90 01       	movw	r18, r0
 588:	0f 9d       	mul	r16, r15
 58a:	30 0d       	add	r19, r0
 58c:	1e 9d       	mul	r17, r14
 58e:	30 0d       	add	r19, r0
 590:	11 24       	eor	r1, r1
 592:	8c 01       	movw	r16, r24
 594:	02 0f       	add	r16, r18
 596:	13 1f       	adc	r17, r19
 598:	98 80       	ld	r9, Y
 59a:	21 96       	adiw	r28, 0x01	; 1
 59c:	89 2d       	mov	r24, r9
 59e:	0e 94 91 02 	call	0x522	; 0x522 <a2d>
 5a2:	99 23       	and	r25, r25
 5a4:	64 f7       	brge	.-40     	; 0x57e <a2i+0x2a>
 5a6:	f5 01       	movw	r30, r10
 5a8:	d1 83       	std	Z+1, r29	; 0x01
 5aa:	c0 83       	st	Z, r28
 5ac:	f6 01       	movw	r30, r12
 5ae:	11 83       	std	Z+1, r17	; 0x01
 5b0:	00 83       	st	Z, r16
 5b2:	89 2d       	mov	r24, r9
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	bf 90       	pop	r11
 5c6:	af 90       	pop	r10
 5c8:	9f 90       	pop	r9
 5ca:	08 95       	ret

000005cc <putchw>:
 5cc:	bf 92       	push	r11
 5ce:	cf 92       	push	r12
 5d0:	df 92       	push	r13
 5d2:	ef 92       	push	r14
 5d4:	ff 92       	push	r15
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	6c 01       	movw	r12, r24
 5e0:	7b 01       	movw	r14, r22
 5e2:	e8 01       	movw	r28, r16
 5e4:	22 23       	and	r18, r18
 5e6:	29 f0       	breq	.+10     	; 0x5f2 <putchw+0x26>
 5e8:	0f 2e       	mov	r0, r31
 5ea:	f0 e3       	ldi	r31, 0x30	; 48
 5ec:	bf 2e       	mov	r11, r31
 5ee:	f0 2d       	mov	r31, r0
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <putchw+0x2c>
 5f2:	68 94       	set
 5f4:	bb 24       	eor	r11, r11
 5f6:	b5 f8       	bld	r11, 5
 5f8:	fe 01       	movw	r30, r28
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <putchw+0x36>
 5fc:	41 50       	subi	r20, 0x01	; 1
 5fe:	51 09       	sbc	r21, r1
 600:	f9 01       	movw	r30, r18
 602:	9f 01       	movw	r18, r30
 604:	2f 5f       	subi	r18, 0xFF	; 255
 606:	3f 4f       	sbci	r19, 0xFF	; 255
 608:	80 81       	ld	r24, Z
 60a:	88 23       	and	r24, r24
 60c:	49 f0       	breq	.+18     	; 0x620 <putchw+0x54>
 60e:	14 16       	cp	r1, r20
 610:	15 06       	cpc	r1, r21
 612:	a4 f3       	brlt	.-24     	; 0x5fc <putchw+0x30>
 614:	05 c0       	rjmp	.+10     	; 0x620 <putchw+0x54>
 616:	6b 2d       	mov	r22, r11
 618:	c6 01       	movw	r24, r12
 61a:	f7 01       	movw	r30, r14
 61c:	09 95       	icall
 61e:	a8 01       	movw	r20, r16
 620:	8a 01       	movw	r16, r20
 622:	01 50       	subi	r16, 0x01	; 1
 624:	11 09       	sbc	r17, r1
 626:	14 16       	cp	r1, r20
 628:	15 06       	cpc	r1, r21
 62a:	ac f3       	brlt	.-22     	; 0x616 <putchw+0x4a>
 62c:	04 c0       	rjmp	.+8      	; 0x636 <putchw+0x6a>
 62e:	c6 01       	movw	r24, r12
 630:	f7 01       	movw	r30, r14
 632:	09 95       	icall
 634:	e8 01       	movw	r28, r16
 636:	8e 01       	movw	r16, r28
 638:	0f 5f       	subi	r16, 0xFF	; 255
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	68 81       	ld	r22, Y
 63e:	61 11       	cpse	r22, r1
 640:	f6 cf       	rjmp	.-20     	; 0x62e <putchw+0x62>
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	ff 90       	pop	r15
 64c:	ef 90       	pop	r14
 64e:	df 90       	pop	r13
 650:	cf 90       	pop	r12
 652:	bf 90       	pop	r11
 654:	08 95       	ret

00000656 <tfp_format>:
	while ((ch= *bf++))
	putf(putp,ch);
}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
{
 656:	7f 92       	push	r7
 658:	8f 92       	push	r8
 65a:	9f 92       	push	r9
 65c:	af 92       	push	r10
 65e:	bf 92       	push	r11
 660:	cf 92       	push	r12
 662:	df 92       	push	r13
 664:	ef 92       	push	r14
 666:	ff 92       	push	r15
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	cd b7       	in	r28, 0x3d	; 61
 672:	de b7       	in	r29, 0x3e	; 62
 674:	60 97       	sbiw	r28, 0x10	; 16
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	f8 94       	cli
 67a:	de bf       	out	0x3e, r29	; 62
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	cd bf       	out	0x3d, r28	; 61
 680:	5c 01       	movw	r10, r24
 682:	6b 01       	movw	r12, r22
 684:	58 8b       	std	Y+16, r21	; 0x10
 686:	4f 87       	std	Y+15, r20	; 0x0f
 688:	79 01       	movw	r14, r18
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 68a:	ff c0       	rjmp	.+510    	; 0x88a <tfp_format+0x234>
		if (ch!='%')
 68c:	65 32       	cpi	r22, 0x25	; 37
 68e:	21 f0       	breq	.+8      	; 0x698 <tfp_format+0x42>
		putf(putp,ch);
 690:	c5 01       	movw	r24, r10
 692:	f6 01       	movw	r30, r12
 694:	09 95       	icall
 696:	f9 c0       	rjmp	.+498    	; 0x88a <tfp_format+0x234>
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
			#endif
			int w=0;
 698:	1e 86       	std	Y+14, r1	; 0x0e
 69a:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 69c:	9d 01       	movw	r18, r26
 69e:	2f 5f       	subi	r18, 0xFF	; 255
 6a0:	3f 4f       	sbci	r19, 0xFF	; 255
 6a2:	38 8b       	std	Y+16, r19	; 0x10
 6a4:	2f 87       	std	Y+15, r18	; 0x0f
 6a6:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 6a8:	80 33       	cpi	r24, 0x30	; 48
 6aa:	49 f4       	brne	.+18     	; 0x6be <tfp_format+0x68>
				ch=*(fmt++);
 6ac:	2f 5f       	subi	r18, 0xFF	; 255
 6ae:	3f 4f       	sbci	r19, 0xFF	; 255
 6b0:	38 8b       	std	Y+16, r19	; 0x10
 6b2:	2f 87       	std	Y+15, r18	; 0x0f
 6b4:	11 96       	adiw	r26, 0x01	; 1
 6b6:	8c 91       	ld	r24, X
				lz=1;
 6b8:	77 24       	eor	r7, r7
 6ba:	73 94       	inc	r7
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <tfp_format+0x6a>

	while ((ch=*(fmt++))) {
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
 6be:	71 2c       	mov	r7, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
			}
			if (ch>='0' && ch<='9') {
 6c0:	90 ed       	ldi	r25, 0xD0	; 208
 6c2:	98 0f       	add	r25, r24
 6c4:	9a 30       	cpi	r25, 0x0A	; 10
 6c6:	50 f4       	brcc	.+20     	; 0x6dc <tfp_format+0x86>
				ch=a2i(ch,&fmt,10,&w);
 6c8:	9e 01       	movw	r18, r28
 6ca:	23 5f       	subi	r18, 0xF3	; 243
 6cc:	3f 4f       	sbci	r19, 0xFF	; 255
 6ce:	4a e0       	ldi	r20, 0x0A	; 10
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	be 01       	movw	r22, r28
 6d4:	61 5f       	subi	r22, 0xF1	; 241
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	0e 94 aa 02 	call	0x554	; 0x554 <a2i>
			}
			#ifdef 	PRINTF_LONG_SUPPORT
			if (ch=='l') {
 6dc:	8c 36       	cpi	r24, 0x6C	; 108
 6de:	49 f4       	brne	.+18     	; 0x6f2 <tfp_format+0x9c>
				ch=*(fmt++);
 6e0:	ef 85       	ldd	r30, Y+15	; 0x0f
 6e2:	f8 89       	ldd	r31, Y+16	; 0x10
 6e4:	cf 01       	movw	r24, r30
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	98 8b       	std	Y+16, r25	; 0x10
 6ea:	8f 87       	std	Y+15, r24	; 0x0f
 6ec:	80 81       	ld	r24, Z
				lng=1;
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <tfp_format+0x9e>
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
 6f2:	90 e0       	ldi	r25, 0x00	; 0
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
			#endif
			switch (ch) {
 6f4:	83 36       	cpi	r24, 0x63	; 99
 6f6:	09 f4       	brne	.+2      	; 0x6fa <tfp_format+0xa4>
 6f8:	aa c0       	rjmp	.+340    	; 0x84e <tfp_format+0x1f8>
 6fa:	50 f4       	brcc	.+20     	; 0x710 <tfp_format+0xba>
 6fc:	85 32       	cpi	r24, 0x25	; 37
 6fe:	09 f4       	brne	.+2      	; 0x702 <tfp_format+0xac>
 700:	c0 c0       	rjmp	.+384    	; 0x882 <tfp_format+0x22c>
 702:	88 35       	cpi	r24, 0x58	; 88
 704:	09 f4       	brne	.+2      	; 0x708 <tfp_format+0xb2>
 706:	6a c0       	rjmp	.+212    	; 0x7dc <tfp_format+0x186>
 708:	88 23       	and	r24, r24
 70a:	09 f4       	brne	.+2      	; 0x70e <tfp_format+0xb8>
 70c:	c7 c0       	rjmp	.+398    	; 0x89c <tfp_format+0x246>
 70e:	bd c0       	rjmp	.+378    	; 0x88a <tfp_format+0x234>
 710:	83 37       	cpi	r24, 0x73	; 115
 712:	09 f4       	brne	.+2      	; 0x716 <tfp_format+0xc0>
 714:	a6 c0       	rjmp	.+332    	; 0x862 <tfp_format+0x20c>
 716:	18 f4       	brcc	.+6      	; 0x71e <tfp_format+0xc8>
 718:	84 36       	cpi	r24, 0x64	; 100
 71a:	c1 f1       	breq	.+112    	; 0x78c <tfp_format+0x136>
 71c:	b6 c0       	rjmp	.+364    	; 0x88a <tfp_format+0x234>
 71e:	85 37       	cpi	r24, 0x75	; 117
 720:	21 f0       	breq	.+8      	; 0x72a <tfp_format+0xd4>
 722:	88 37       	cpi	r24, 0x78	; 120
 724:	09 f4       	brne	.+2      	; 0x728 <tfp_format+0xd2>
 726:	5a c0       	rjmp	.+180    	; 0x7dc <tfp_format+0x186>
 728:	b0 c0       	rjmp	.+352    	; 0x88a <tfp_format+0x234>
				case 0:
				goto abort;
				case 'u' : {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
 72a:	99 23       	and	r25, r25
 72c:	a1 f0       	breq	.+40     	; 0x756 <tfp_format+0x100>
					uli2a(va_arg(va, unsigned long int),10,0,bf);
 72e:	47 01       	movw	r8, r14
 730:	f4 e0       	ldi	r31, 0x04	; 4
 732:	8f 0e       	add	r8, r31
 734:	91 1c       	adc	r9, r1
 736:	f7 01       	movw	r30, r14
 738:	60 81       	ld	r22, Z
 73a:	71 81       	ldd	r23, Z+1	; 0x01
 73c:	82 81       	ldd	r24, Z+2	; 0x02
 73e:	93 81       	ldd	r25, Z+3	; 0x03
 740:	8e 01       	movw	r16, r28
 742:	0f 5f       	subi	r16, 0xFF	; 255
 744:	1f 4f       	sbci	r17, 0xFF	; 255
 746:	20 e0       	ldi	r18, 0x00	; 0
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	4a e0       	ldi	r20, 0x0A	; 10
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <uli2a>
 752:	74 01       	movw	r14, r8
 754:	10 c0       	rjmp	.+32     	; 0x776 <tfp_format+0x120>
					else
					#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 756:	87 01       	movw	r16, r14
 758:	0e 5f       	subi	r16, 0xFE	; 254
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	9e 01       	movw	r18, r28
 75e:	2f 5f       	subi	r18, 0xFF	; 255
 760:	3f 4f       	sbci	r19, 0xFF	; 255
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	6a e0       	ldi	r22, 0x0A	; 10
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	f7 01       	movw	r30, r14
 76c:	80 81       	ld	r24, Z
 76e:	91 81       	ldd	r25, Z+1	; 0x01
 770:	0e 94 1b 02 	call	0x436	; 0x436 <ui2a>
 774:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 776:	4d 85       	ldd	r20, Y+13	; 0x0d
 778:	5e 85       	ldd	r21, Y+14	; 0x0e
 77a:	8e 01       	movw	r16, r28
 77c:	0f 5f       	subi	r16, 0xFF	; 255
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	27 2d       	mov	r18, r7
 782:	b6 01       	movw	r22, r12
 784:	c5 01       	movw	r24, r10
 786:	0e 94 e6 02 	call	0x5cc	; 0x5cc <putchw>
					break;
 78a:	7f c0       	rjmp	.+254    	; 0x88a <tfp_format+0x234>
				}
				case 'd' :  {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng){
 78c:	99 23       	and	r25, r25
 78e:	79 f0       	breq	.+30     	; 0x7ae <tfp_format+0x158>
						//						li2a(va_arg(va, unsigned long int),bf);
						li2a(va_arg(va, long int),bf);
 790:	87 01       	movw	r16, r14
 792:	0c 5f       	subi	r16, 0xFC	; 252
 794:	1f 4f       	sbci	r17, 0xFF	; 255
 796:	f7 01       	movw	r30, r14
 798:	60 81       	ld	r22, Z
 79a:	71 81       	ldd	r23, Z+1	; 0x01
 79c:	82 81       	ldd	r24, Z+2	; 0x02
 79e:	93 81       	ldd	r25, Z+3	; 0x03
 7a0:	ae 01       	movw	r20, r28
 7a2:	4f 5f       	subi	r20, 0xFF	; 255
 7a4:	5f 4f       	sbci	r21, 0xFF	; 255
 7a6:	0e 94 01 02 	call	0x402	; 0x402 <li2a>
 7aa:	78 01       	movw	r14, r16
 7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <tfp_format+0x170>
					else
					#endif



					i2a(va_arg(va, int),bf);
 7ae:	87 01       	movw	r16, r14
 7b0:	0e 5f       	subi	r16, 0xFE	; 254
 7b2:	1f 4f       	sbci	r17, 0xFF	; 255
 7b4:	be 01       	movw	r22, r28
 7b6:	6f 5f       	subi	r22, 0xFF	; 255
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ba:	f7 01       	movw	r30, r14
 7bc:	80 81       	ld	r24, Z
 7be:	91 81       	ldd	r25, Z+1	; 0x01
 7c0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <i2a>
 7c4:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 7c6:	4d 85       	ldd	r20, Y+13	; 0x0d
 7c8:	5e 85       	ldd	r21, Y+14	; 0x0e
 7ca:	8e 01       	movw	r16, r28
 7cc:	0f 5f       	subi	r16, 0xFF	; 255
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	27 2d       	mov	r18, r7
 7d2:	b6 01       	movw	r22, r12
 7d4:	c5 01       	movw	r24, r10
 7d6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <putchw>
					break;
 7da:	57 c0       	rjmp	.+174    	; 0x88a <tfp_format+0x234>
				}
				case 'x': case 'X' :
				#ifdef 	PRINTF_LONG_SUPPORT
				if (lng)
 7dc:	99 23       	and	r25, r25
 7de:	c1 f0       	breq	.+48     	; 0x810 <tfp_format+0x1ba>
				uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
 7e0:	47 01       	movw	r8, r14
 7e2:	f4 e0       	ldi	r31, 0x04	; 4
 7e4:	8f 0e       	add	r8, r31
 7e6:	91 1c       	adc	r9, r1
 7e8:	21 e0       	ldi	r18, 0x01	; 1
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	88 35       	cpi	r24, 0x58	; 88
 7ee:	11 f0       	breq	.+4      	; 0x7f4 <tfp_format+0x19e>
 7f0:	20 e0       	ldi	r18, 0x00	; 0
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	f7 01       	movw	r30, r14
 7f6:	60 81       	ld	r22, Z
 7f8:	71 81       	ldd	r23, Z+1	; 0x01
 7fa:	82 81       	ldd	r24, Z+2	; 0x02
 7fc:	93 81       	ldd	r25, Z+3	; 0x03
 7fe:	8e 01       	movw	r16, r28
 800:	0f 5f       	subi	r16, 0xFF	; 255
 802:	1f 4f       	sbci	r17, 0xFF	; 255
 804:	40 e1       	ldi	r20, 0x10	; 16
 806:	50 e0       	ldi	r21, 0x00	; 0
 808:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <uli2a>
 80c:	74 01       	movw	r14, r8
 80e:	14 c0       	rjmp	.+40     	; 0x838 <tfp_format+0x1e2>
				else
				#endif
				ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 810:	87 01       	movw	r16, r14
 812:	0e 5f       	subi	r16, 0xFE	; 254
 814:	1f 4f       	sbci	r17, 0xFF	; 255
 816:	41 e0       	ldi	r20, 0x01	; 1
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	88 35       	cpi	r24, 0x58	; 88
 81c:	11 f0       	breq	.+4      	; 0x822 <tfp_format+0x1cc>
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	50 e0       	ldi	r21, 0x00	; 0
 822:	9e 01       	movw	r18, r28
 824:	2f 5f       	subi	r18, 0xFF	; 255
 826:	3f 4f       	sbci	r19, 0xFF	; 255
 828:	60 e1       	ldi	r22, 0x10	; 16
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	f7 01       	movw	r30, r14
 82e:	80 81       	ld	r24, Z
 830:	91 81       	ldd	r25, Z+1	; 0x01
 832:	0e 94 1b 02 	call	0x436	; 0x436 <ui2a>
 836:	78 01       	movw	r14, r16
				putchw(putp,putf,w,lz,bf);
 838:	4d 85       	ldd	r20, Y+13	; 0x0d
 83a:	5e 85       	ldd	r21, Y+14	; 0x0e
 83c:	8e 01       	movw	r16, r28
 83e:	0f 5f       	subi	r16, 0xFF	; 255
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	27 2d       	mov	r18, r7
 844:	b6 01       	movw	r22, r12
 846:	c5 01       	movw	r24, r10
 848:	0e 94 e6 02 	call	0x5cc	; 0x5cc <putchw>
				break;
 84c:	1e c0       	rjmp	.+60     	; 0x88a <tfp_format+0x234>
				case 'c' :
				putf(putp,(char)(va_arg(va, int)));
 84e:	87 01       	movw	r16, r14
 850:	0e 5f       	subi	r16, 0xFE	; 254
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	f7 01       	movw	r30, r14
 856:	60 81       	ld	r22, Z
 858:	c5 01       	movw	r24, r10
 85a:	f6 01       	movw	r30, r12
 85c:	09 95       	icall
 85e:	78 01       	movw	r14, r16
				break;
 860:	14 c0       	rjmp	.+40     	; 0x88a <tfp_format+0x234>
				case 's' :
				putchw(putp,putf,w,0,va_arg(va, char*));
 862:	47 01       	movw	r8, r14
 864:	f2 e0       	ldi	r31, 0x02	; 2
 866:	8f 0e       	add	r8, r31
 868:	91 1c       	adc	r9, r1
 86a:	f7 01       	movw	r30, r14
 86c:	00 81       	ld	r16, Z
 86e:	11 81       	ldd	r17, Z+1	; 0x01
 870:	4d 85       	ldd	r20, Y+13	; 0x0d
 872:	5e 85       	ldd	r21, Y+14	; 0x0e
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	b6 01       	movw	r22, r12
 878:	c5 01       	movw	r24, r10
 87a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <putchw>
 87e:	74 01       	movw	r14, r8
				break;
 880:	04 c0       	rjmp	.+8      	; 0x88a <tfp_format+0x234>
				case '%' :
				putf(putp,ch);
 882:	68 2f       	mov	r22, r24
 884:	c5 01       	movw	r24, r10
 886:	f6 01       	movw	r30, r12
 888:	09 95       	icall
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 88a:	ef 85       	ldd	r30, Y+15	; 0x0f
 88c:	f8 89       	ldd	r31, Y+16	; 0x10
 88e:	df 01       	movw	r26, r30
 890:	11 96       	adiw	r26, 0x01	; 1
 892:	b8 8b       	std	Y+16, r27	; 0x10
 894:	af 87       	std	Y+15, r26	; 0x0f
 896:	60 81       	ld	r22, Z
 898:	61 11       	cpse	r22, r1
 89a:	f8 ce       	rjmp	.-528    	; 0x68c <tfp_format+0x36>
				break;
			}
		}
	}
	abort:;
}
 89c:	60 96       	adiw	r28, 0x10	; 16
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	f8 94       	cli
 8a2:	de bf       	out	0x3e, r29	; 62
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	cd bf       	out	0x3d, r28	; 61
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	1f 91       	pop	r17
 8ae:	0f 91       	pop	r16
 8b0:	ff 90       	pop	r15
 8b2:	ef 90       	pop	r14
 8b4:	df 90       	pop	r13
 8b6:	cf 90       	pop	r12
 8b8:	bf 90       	pop	r11
 8ba:	af 90       	pop	r10
 8bc:	9f 90       	pop	r9
 8be:	8f 90       	pop	r8
 8c0:	7f 90       	pop	r7
 8c2:	08 95       	ret

000008c4 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
{
	stdout_putf=putf;
 8c4:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <stdout_putf+0x1>
 8c8:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <stdout_putf>
	stdout_putp=putp;
 8cc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <stdout_putp+0x1>
 8d0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <stdout_putp>
 8d4:	08 95       	ret

000008d6 <tfp_printf>:
}

void tfp_printf(char *fmt, ...)
{
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	cd b7       	in	r28, 0x3d	; 61
 8dc:	de b7       	in	r29, 0x3e	; 62
 8de:	9e 01       	movw	r18, r28
 8e0:	2b 5f       	subi	r18, 0xFB	; 251
 8e2:	3f 4f       	sbci	r19, 0xFF	; 255
 8e4:	f9 01       	movw	r30, r18
 8e6:	41 91       	ld	r20, Z+
 8e8:	51 91       	ld	r21, Z+
 8ea:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 8ec:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <stdout_putf>
 8f0:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <stdout_putf+0x1>
 8f4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <stdout_putp>
 8f8:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <stdout_putp+0x1>
 8fc:	0e 94 2b 03 	call	0x656	; 0x656 <tfp_format>
	va_end(va);
}
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	08 95       	ret

00000906 <__mulsi3>:
 906:	db 01       	movw	r26, r22
 908:	8f 93       	push	r24
 90a:	9f 93       	push	r25
 90c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__muluhisi3>
 910:	bf 91       	pop	r27
 912:	af 91       	pop	r26
 914:	a2 9f       	mul	r26, r18
 916:	80 0d       	add	r24, r0
 918:	91 1d       	adc	r25, r1
 91a:	a3 9f       	mul	r26, r19
 91c:	90 0d       	add	r25, r0
 91e:	b2 9f       	mul	r27, r18
 920:	90 0d       	add	r25, r0
 922:	11 24       	eor	r1, r1
 924:	08 95       	ret

00000926 <__udivmodhi4>:
 926:	aa 1b       	sub	r26, r26
 928:	bb 1b       	sub	r27, r27
 92a:	51 e1       	ldi	r21, 0x11	; 17
 92c:	07 c0       	rjmp	.+14     	; 0x93c <__udivmodhi4_ep>

0000092e <__udivmodhi4_loop>:
 92e:	aa 1f       	adc	r26, r26
 930:	bb 1f       	adc	r27, r27
 932:	a6 17       	cp	r26, r22
 934:	b7 07       	cpc	r27, r23
 936:	10 f0       	brcs	.+4      	; 0x93c <__udivmodhi4_ep>
 938:	a6 1b       	sub	r26, r22
 93a:	b7 0b       	sbc	r27, r23

0000093c <__udivmodhi4_ep>:
 93c:	88 1f       	adc	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	5a 95       	dec	r21
 942:	a9 f7       	brne	.-22     	; 0x92e <__udivmodhi4_loop>
 944:	80 95       	com	r24
 946:	90 95       	com	r25
 948:	bc 01       	movw	r22, r24
 94a:	cd 01       	movw	r24, r26
 94c:	08 95       	ret

0000094e <__udivmodsi4>:
 94e:	a1 e2       	ldi	r26, 0x21	; 33
 950:	1a 2e       	mov	r1, r26
 952:	aa 1b       	sub	r26, r26
 954:	bb 1b       	sub	r27, r27
 956:	fd 01       	movw	r30, r26
 958:	0d c0       	rjmp	.+26     	; 0x974 <__udivmodsi4_ep>

0000095a <__udivmodsi4_loop>:
 95a:	aa 1f       	adc	r26, r26
 95c:	bb 1f       	adc	r27, r27
 95e:	ee 1f       	adc	r30, r30
 960:	ff 1f       	adc	r31, r31
 962:	a2 17       	cp	r26, r18
 964:	b3 07       	cpc	r27, r19
 966:	e4 07       	cpc	r30, r20
 968:	f5 07       	cpc	r31, r21
 96a:	20 f0       	brcs	.+8      	; 0x974 <__udivmodsi4_ep>
 96c:	a2 1b       	sub	r26, r18
 96e:	b3 0b       	sbc	r27, r19
 970:	e4 0b       	sbc	r30, r20
 972:	f5 0b       	sbc	r31, r21

00000974 <__udivmodsi4_ep>:
 974:	66 1f       	adc	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	88 1f       	adc	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	1a 94       	dec	r1
 97e:	69 f7       	brne	.-38     	; 0x95a <__udivmodsi4_loop>
 980:	60 95       	com	r22
 982:	70 95       	com	r23
 984:	80 95       	com	r24
 986:	90 95       	com	r25
 988:	9b 01       	movw	r18, r22
 98a:	ac 01       	movw	r20, r24
 98c:	bd 01       	movw	r22, r26
 98e:	cf 01       	movw	r24, r30
 990:	08 95       	ret

00000992 <__umulhisi3>:
 992:	a2 9f       	mul	r26, r18
 994:	b0 01       	movw	r22, r0
 996:	b3 9f       	mul	r27, r19
 998:	c0 01       	movw	r24, r0
 99a:	a3 9f       	mul	r26, r19
 99c:	70 0d       	add	r23, r0
 99e:	81 1d       	adc	r24, r1
 9a0:	11 24       	eor	r1, r1
 9a2:	91 1d       	adc	r25, r1
 9a4:	b2 9f       	mul	r27, r18
 9a6:	70 0d       	add	r23, r0
 9a8:	81 1d       	adc	r24, r1
 9aa:	11 24       	eor	r1, r1
 9ac:	91 1d       	adc	r25, r1
 9ae:	08 95       	ret

000009b0 <__muluhisi3>:
 9b0:	0e 94 c9 04 	call	0x992	; 0x992 <__umulhisi3>
 9b4:	a5 9f       	mul	r26, r21
 9b6:	90 0d       	add	r25, r0
 9b8:	b4 9f       	mul	r27, r20
 9ba:	90 0d       	add	r25, r0
 9bc:	a4 9f       	mul	r26, r20
 9be:	80 0d       	add	r24, r0
 9c0:	91 1d       	adc	r25, r1
 9c2:	11 24       	eor	r1, r1
 9c4:	08 95       	ret

000009c6 <_exit>:
 9c6:	f8 94       	cli

000009c8 <__stop_program>:
 9c8:	ff cf       	rjmp	.-2      	; 0x9c8 <__stop_program>

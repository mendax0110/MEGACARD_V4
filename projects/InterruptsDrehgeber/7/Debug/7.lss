
7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000009cc  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080006c  0080006c  00000a6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000146d  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000927  00000000  00000000  00002025  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b7  00000000  00000000  0000294c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00003304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001698  00000000  00000000  00003b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000051c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 38 01 	call	0x270	; 0x270 <main>
  8a:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <InitPorts>:

// Initialize ports
void InitPorts()
{
    // Port D: CLK-Pin und DIR-Pin als Eingänge
    DDRD &= ~(1 << CLK_PIN);
 1e6:	81 b3       	in	r24, 0x11	; 17
 1e8:	87 7f       	andi	r24, 0xF7	; 247
 1ea:	81 bb       	out	0x11, r24	; 17
    DDRD &= ~(1 << DIR_PIN);
 1ec:	81 b3       	in	r24, 0x11	; 17
 1ee:	8b 7f       	andi	r24, 0xFB	; 251
 1f0:	81 bb       	out	0x11, r24	; 17

    // Port C: LEDs als Ausgänge
    DDRC = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	84 bb       	out	0x14, r24	; 20
 1f6:	08 95       	ret

000001f8 <__vector_2>:
}

// INT1 ISR
ISR(INT1_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
    impulsesPerRotation++;
 20a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <impulsesPerRotation>
 20e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <impulsesPerRotation+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <impulsesPerRotation+0x1>
 218:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <impulsesPerRotation>
    impulsesForSingleRotation++;
 21c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <impulsesForSingleRotation>
 220:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <impulsesForSingleRotation+0x1>
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <impulsesForSingleRotation+0x1>
 22a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <impulsesForSingleRotation>
    
    // Check for maximum impulses in a single rotation
    if (impulsesForSingleRotation > maxImpulsesForSingleRotation)
 22e:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <impulsesForSingleRotation>
 232:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <impulsesForSingleRotation+0x1>
 236:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <maxImpulsesForSingleRotation>
 23a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <maxImpulsesForSingleRotation+0x1>
 23e:	82 17       	cp	r24, r18
 240:	93 07       	cpc	r25, r19
 242:	40 f4       	brcc	.+16     	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
    {
        maxImpulsesForSingleRotation = impulsesForSingleRotation;
 244:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <impulsesForSingleRotation>
 248:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <impulsesForSingleRotation+0x1>
 24c:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <maxImpulsesForSingleRotation+0x1>
 250:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <maxImpulsesForSingleRotation>
    }
    
    PORTC = impulsesForSingleRotation;
 254:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <impulsesForSingleRotation>
 258:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <impulsesForSingleRotation+0x1>
 25c:	85 bb       	out	0x15, r24	; 21
    //lcd_pos(0, 1);
    //printf("Impulse: %d", impulsesForSingleRotation);
}
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <main>:

int main(void)
{
    InitPorts();
 270:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <InitPorts>
    lcd_init();
 274:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>

    cli();
 278:	f8 94       	cli
    MCUCR |= (1 << ISC11) | (1 << ISC10); // Rising edge generates interrupt
 27a:	85 b7       	in	r24, 0x35	; 53
 27c:	8c 60       	ori	r24, 0x0C	; 12
 27e:	85 bf       	out	0x35, r24	; 53
    GICR |= (1 << INT1); // Enable INT1 interrupt
 280:	8b b7       	in	r24, 0x3b	; 59
 282:	80 68       	ori	r24, 0x80	; 128
 284:	8b bf       	out	0x3b, r24	; 59
    sei(); // Enable global interrupts
 286:	78 94       	sei

    while (1)
    {
		lcd_pos(0,1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
		countprintf++;
 290:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 294:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 29e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		printf("X Data %d ", countprintf);	// zeit stoppen, wie hoch es ist, dann weiß ich wie hoch die f ist 1/p = f
 2a2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 2a6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 2aa:	9f 93       	push	r25
 2ac:	8f 93       	push	r24
 2ae:	80 e6       	ldi	r24, 0x60	; 96
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	9f 93       	push	r25
 2b4:	8f 93       	push	r24
 2b6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <tfp_printf>
        if (rotationCompleted)
 2ba:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <rotationCompleted>
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	88 23       	and	r24, r24
 2c8:	f9 f2       	breq	.-66     	; 0x288 <main+0x18>
        {
            rotationCompleted = 0;
 2ca:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <rotationCompleted>
            impulsesForSingleRotation = 0;
 2ce:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <impulsesForSingleRotation+0x1>
 2d2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <impulsesForSingleRotation>
 2d6:	d8 cf       	rjmp	.-80     	; 0x288 <main+0x18>

000002d8 <uli2a>:
	va_end(va);
}

static void putcp(void* p,char c)
{
	*(*((char**)p))++ = c;
 2d8:	2f 92       	push	r2
 2da:	3f 92       	push	r3
 2dc:	4f 92       	push	r4
 2de:	5f 92       	push	r5
 2e0:	6f 92       	push	r6
 2e2:	7f 92       	push	r7
 2e4:	8f 92       	push	r8
 2e6:	9f 92       	push	r9
 2e8:	af 92       	push	r10
 2ea:	bf 92       	push	r11
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <uli2a+0x26>
 2fe:	00 d0       	rcall	.+0      	; 0x300 <uli2a+0x28>
 300:	1f 92       	push	r1
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	6c 83       	std	Y+4, r22	; 0x04
 308:	7d 83       	std	Y+5, r23	; 0x05
 30a:	98 2e       	mov	r9, r24
 30c:	89 2e       	mov	r8, r25
 30e:	5a 01       	movw	r10, r20
 310:	3b 83       	std	Y+3, r19	; 0x03
 312:	2a 83       	std	Y+2, r18	; 0x02
 314:	c1 2c       	mov	r12, r1
 316:	d1 2c       	mov	r13, r1
 318:	76 01       	movw	r14, r12
 31a:	c3 94       	inc	r12
 31c:	08 c0       	rjmp	.+16     	; 0x32e <uli2a+0x56>
 31e:	a7 01       	movw	r20, r14
 320:	96 01       	movw	r18, r12
 322:	c3 01       	movw	r24, r6
 324:	b2 01       	movw	r22, r4
 326:	0e 94 84 04 	call	0x908	; 0x908 <__mulsi3>
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
 32e:	6c 81       	ldd	r22, Y+4	; 0x04
 330:	7d 81       	ldd	r23, Y+5	; 0x05
 332:	89 2d       	mov	r24, r9
 334:	98 2d       	mov	r25, r8
 336:	a7 01       	movw	r20, r14
 338:	96 01       	movw	r18, r12
 33a:	0e 94 a8 04 	call	0x950	; 0x950 <__udivmodsi4>
 33e:	25 01       	movw	r4, r10
 340:	61 2c       	mov	r6, r1
 342:	71 2c       	mov	r7, r1
 344:	24 15       	cp	r18, r4
 346:	35 05       	cpc	r19, r5
 348:	46 05       	cpc	r20, r6
 34a:	57 05       	cpc	r21, r7
 34c:	40 f7       	brcc	.-48     	; 0x31e <uli2a+0x46>
 34e:	a1 2c       	mov	r10, r1
 350:	b1 2c       	mov	r11, r1
 352:	39 c0       	rjmp	.+114    	; 0x3c6 <uli2a+0xee>
 354:	6c 81       	ldd	r22, Y+4	; 0x04
 356:	7d 81       	ldd	r23, Y+5	; 0x05
 358:	89 2d       	mov	r24, r9
 35a:	98 2d       	mov	r25, r8
 35c:	a7 01       	movw	r20, r14
 35e:	96 01       	movw	r18, r12
 360:	0e 94 a8 04 	call	0x950	; 0x950 <__udivmodsi4>
 364:	29 83       	std	Y+1, r18	; 0x01
 366:	42 2f       	mov	r20, r18
 368:	24 2e       	mov	r2, r20
 36a:	33 2e       	mov	r3, r19
 36c:	6c 83       	std	Y+4, r22	; 0x04
 36e:	7d 83       	std	Y+5, r23	; 0x05
 370:	98 2e       	mov	r9, r24
 372:	89 2e       	mov	r8, r25
 374:	c7 01       	movw	r24, r14
 376:	b6 01       	movw	r22, r12
 378:	a3 01       	movw	r20, r6
 37a:	92 01       	movw	r18, r4
 37c:	0e 94 a8 04 	call	0x950	; 0x950 <__udivmodsi4>
 380:	69 01       	movw	r12, r18
 382:	7a 01       	movw	r14, r20
 384:	a1 14       	cp	r10, r1
 386:	b1 04       	cpc	r11, r1
 388:	39 f4       	brne	.+14     	; 0x398 <uli2a+0xc0>
 38a:	12 14       	cp	r1, r2
 38c:	13 04       	cpc	r1, r3
 38e:	24 f0       	brlt	.+8      	; 0x398 <uli2a+0xc0>
 390:	23 2b       	or	r18, r19
 392:	24 2b       	or	r18, r20
 394:	25 2b       	or	r18, r21
 396:	b9 f4       	brne	.+46     	; 0x3c6 <uli2a+0xee>
 398:	c8 01       	movw	r24, r16
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	2a e0       	ldi	r18, 0x0A	; 10
 39e:	22 16       	cp	r2, r18
 3a0:	31 04       	cpc	r3, r1
 3a2:	34 f0       	brlt	.+12     	; 0x3b0 <uli2a+0xd8>
 3a4:	ea 81       	ldd	r30, Y+2	; 0x02
 3a6:	fb 81       	ldd	r31, Y+3	; 0x03
 3a8:	ef 2b       	or	r30, r31
 3aa:	21 f0       	breq	.+8      	; 0x3b4 <uli2a+0xdc>
 3ac:	27 e3       	ldi	r18, 0x37	; 55
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <uli2a+0xde>
 3b0:	20 e3       	ldi	r18, 0x30	; 48
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <uli2a+0xde>
 3b4:	27 e5       	ldi	r18, 0x57	; 87
 3b6:	39 80       	ldd	r3, Y+1	; 0x01
 3b8:	32 0e       	add	r3, r18
 3ba:	f8 01       	movw	r30, r16
 3bc:	30 82       	st	Z, r3
 3be:	ff ef       	ldi	r31, 0xFF	; 255
 3c0:	af 1a       	sub	r10, r31
 3c2:	bf 0a       	sbc	r11, r31
 3c4:	8c 01       	movw	r16, r24
 3c6:	c1 14       	cp	r12, r1
 3c8:	d1 04       	cpc	r13, r1
 3ca:	e1 04       	cpc	r14, r1
 3cc:	f1 04       	cpc	r15, r1
 3ce:	11 f6       	brne	.-124    	; 0x354 <uli2a+0x7c>
 3d0:	f8 01       	movw	r30, r16
 3d2:	10 82       	st	Z, r1
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	ff 90       	pop	r15
 3e8:	ef 90       	pop	r14
 3ea:	df 90       	pop	r13
 3ec:	cf 90       	pop	r12
 3ee:	bf 90       	pop	r11
 3f0:	af 90       	pop	r10
 3f2:	9f 90       	pop	r9
 3f4:	8f 90       	pop	r8
 3f6:	7f 90       	pop	r7
 3f8:	6f 90       	pop	r6
 3fa:	5f 90       	pop	r5
 3fc:	4f 90       	pop	r4
 3fe:	3f 90       	pop	r3
 400:	2f 90       	pop	r2
 402:	08 95       	ret

00000404 <li2a>:
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	99 23       	and	r25, r25
 40a:	64 f4       	brge	.+24     	; 0x424 <li2a+0x20>
 40c:	90 95       	com	r25
 40e:	80 95       	com	r24
 410:	70 95       	com	r23
 412:	61 95       	neg	r22
 414:	7f 4f       	sbci	r23, 0xFF	; 255
 416:	8f 4f       	sbci	r24, 0xFF	; 255
 418:	9f 4f       	sbci	r25, 0xFF	; 255
 41a:	2d e2       	ldi	r18, 0x2D	; 45
 41c:	fa 01       	movw	r30, r20
 41e:	20 83       	st	Z, r18
 420:	4f 5f       	subi	r20, 0xFF	; 255
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	8a 01       	movw	r16, r20
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	4a e0       	ldi	r20, 0x0A	; 10
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <uli2a>
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <ui2a>:
 438:	8f 92       	push	r8
 43a:	9f 92       	push	r9
 43c:	af 92       	push	r10
 43e:	bf 92       	push	r11
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	c8 2f       	mov	r28, r24
 452:	d9 2f       	mov	r29, r25
 454:	8b 01       	movw	r16, r22
 456:	6a 01       	movw	r12, r20
 458:	79 01       	movw	r14, r18
 45a:	e1 e0       	ldi	r30, 0x01	; 1
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	08 c0       	rjmp	.+16     	; 0x470 <__stack+0x11>
 460:	cf 01       	movw	r24, r30
 462:	80 9f       	mul	r24, r16
 464:	f0 01       	movw	r30, r0
 466:	81 9f       	mul	r24, r17
 468:	f0 0d       	add	r31, r0
 46a:	90 9f       	mul	r25, r16
 46c:	f0 0d       	add	r31, r0
 46e:	11 24       	eor	r1, r1
 470:	8c 2f       	mov	r24, r28
 472:	9d 2f       	mov	r25, r29
 474:	bf 01       	movw	r22, r30
 476:	0e 94 94 04 	call	0x928	; 0x928 <__udivmodhi4>
 47a:	60 17       	cp	r22, r16
 47c:	71 07       	cpc	r23, r17
 47e:	80 f7       	brcc	.-32     	; 0x460 <__stack+0x1>
 480:	a1 2c       	mov	r10, r1
 482:	b1 2c       	mov	r11, r1
 484:	2c c0       	rjmp	.+88     	; 0x4de <__stack+0x7f>
 486:	8c 2f       	mov	r24, r28
 488:	9d 2f       	mov	r25, r29
 48a:	bf 01       	movw	r22, r30
 48c:	0e 94 94 04 	call	0x928	; 0x928 <__udivmodhi4>
 490:	36 2f       	mov	r19, r22
 492:	86 2e       	mov	r8, r22
 494:	97 2e       	mov	r9, r23
 496:	c8 2f       	mov	r28, r24
 498:	d9 2f       	mov	r29, r25
 49a:	cf 01       	movw	r24, r30
 49c:	b8 01       	movw	r22, r16
 49e:	0e 94 94 04 	call	0x928	; 0x928 <__udivmodhi4>
 4a2:	fb 01       	movw	r30, r22
 4a4:	a1 14       	cp	r10, r1
 4a6:	b1 04       	cpc	r11, r1
 4a8:	29 f4       	brne	.+10     	; 0x4b4 <__stack+0x55>
 4aa:	18 14       	cp	r1, r8
 4ac:	19 04       	cpc	r1, r9
 4ae:	14 f0       	brlt	.+4      	; 0x4b4 <__stack+0x55>
 4b0:	30 97       	sbiw	r30, 0x00	; 0
 4b2:	a9 f4       	brne	.+42     	; 0x4de <__stack+0x7f>
 4b4:	c7 01       	movw	r24, r14
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	aa e0       	ldi	r26, 0x0A	; 10
 4ba:	8a 16       	cp	r8, r26
 4bc:	91 04       	cpc	r9, r1
 4be:	2c f0       	brlt	.+10     	; 0x4ca <__stack+0x6b>
 4c0:	c1 14       	cp	r12, r1
 4c2:	d1 04       	cpc	r13, r1
 4c4:	21 f0       	breq	.+8      	; 0x4ce <__stack+0x6f>
 4c6:	27 e3       	ldi	r18, 0x37	; 55
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__stack+0x71>
 4ca:	20 e3       	ldi	r18, 0x30	; 48
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <__stack+0x71>
 4ce:	27 e5       	ldi	r18, 0x57	; 87
 4d0:	32 0f       	add	r19, r18
 4d2:	d7 01       	movw	r26, r14
 4d4:	3c 93       	st	X, r19
 4d6:	bf ef       	ldi	r27, 0xFF	; 255
 4d8:	ab 1a       	sub	r10, r27
 4da:	bb 0a       	sbc	r11, r27
 4dc:	7c 01       	movw	r14, r24
 4de:	30 97       	sbiw	r30, 0x00	; 0
 4e0:	91 f6       	brne	.-92     	; 0x486 <__stack+0x27>
 4e2:	f7 01       	movw	r30, r14
 4e4:	10 82       	st	Z, r1
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	df 90       	pop	r13
 4f4:	cf 90       	pop	r12
 4f6:	bf 90       	pop	r11
 4f8:	af 90       	pop	r10
 4fa:	9f 90       	pop	r9
 4fc:	8f 90       	pop	r8
 4fe:	08 95       	ret

00000500 <i2a>:
 500:	9b 01       	movw	r18, r22
 502:	99 23       	and	r25, r25
 504:	44 f4       	brge	.+16     	; 0x516 <i2a+0x16>
 506:	91 95       	neg	r25
 508:	81 95       	neg	r24
 50a:	91 09       	sbc	r25, r1
 50c:	4d e2       	ldi	r20, 0x2D	; 45
 50e:	fb 01       	movw	r30, r22
 510:	40 83       	st	Z, r20
 512:	2f 5f       	subi	r18, 0xFF	; 255
 514:	3f 4f       	sbci	r19, 0xFF	; 255
 516:	40 e0       	ldi	r20, 0x00	; 0
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	6a e0       	ldi	r22, 0x0A	; 10
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	0e 94 1c 02 	call	0x438	; 0x438 <ui2a>
 522:	08 95       	ret

00000524 <a2d>:
 524:	90 ed       	ldi	r25, 0xD0	; 208
 526:	98 0f       	add	r25, r24
 528:	9a 30       	cpi	r25, 0x0A	; 10
 52a:	18 f4       	brcc	.+6      	; 0x532 <a2d+0xe>
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	c0 97       	sbiw	r24, 0x30	; 48
 530:	08 95       	ret
 532:	9f e9       	ldi	r25, 0x9F	; 159
 534:	98 0f       	add	r25, r24
 536:	96 30       	cpi	r25, 0x06	; 6
 538:	20 f4       	brcc	.+8      	; 0x542 <a2d+0x1e>
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	87 55       	subi	r24, 0x57	; 87
 53e:	91 09       	sbc	r25, r1
 540:	08 95       	ret
 542:	9f eb       	ldi	r25, 0xBF	; 191
 544:	98 0f       	add	r25, r24
 546:	96 30       	cpi	r25, 0x06	; 6
 548:	18 f4       	brcc	.+6      	; 0x550 <a2d+0x2c>
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	c7 97       	sbiw	r24, 0x37	; 55
 54e:	08 95       	ret
 550:	8f ef       	ldi	r24, 0xFF	; 255
 552:	9f ef       	ldi	r25, 0xFF	; 255
 554:	08 95       	ret

00000556 <a2i>:
 556:	9f 92       	push	r9
 558:	af 92       	push	r10
 55a:	bf 92       	push	r11
 55c:	cf 92       	push	r12
 55e:	df 92       	push	r13
 560:	ef 92       	push	r14
 562:	ff 92       	push	r15
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	98 2e       	mov	r9, r24
 56e:	5b 01       	movw	r10, r22
 570:	7a 01       	movw	r14, r20
 572:	69 01       	movw	r12, r18
 574:	fb 01       	movw	r30, r22
 576:	c0 81       	ld	r28, Z
 578:	d1 81       	ldd	r29, Z+1	; 0x01
 57a:	00 e0       	ldi	r16, 0x00	; 0
 57c:	10 e0       	ldi	r17, 0x00	; 0
 57e:	0f c0       	rjmp	.+30     	; 0x59e <a2i+0x48>
 580:	e8 16       	cp	r14, r24
 582:	f9 06       	cpc	r15, r25
 584:	8c f0       	brlt	.+34     	; 0x5a8 <a2i+0x52>
 586:	0e 9d       	mul	r16, r14
 588:	90 01       	movw	r18, r0
 58a:	0f 9d       	mul	r16, r15
 58c:	30 0d       	add	r19, r0
 58e:	1e 9d       	mul	r17, r14
 590:	30 0d       	add	r19, r0
 592:	11 24       	eor	r1, r1
 594:	8c 01       	movw	r16, r24
 596:	02 0f       	add	r16, r18
 598:	13 1f       	adc	r17, r19
 59a:	98 80       	ld	r9, Y
 59c:	21 96       	adiw	r28, 0x01	; 1
 59e:	89 2d       	mov	r24, r9
 5a0:	0e 94 92 02 	call	0x524	; 0x524 <a2d>
 5a4:	99 23       	and	r25, r25
 5a6:	64 f7       	brge	.-40     	; 0x580 <a2i+0x2a>
 5a8:	f5 01       	movw	r30, r10
 5aa:	d1 83       	std	Z+1, r29	; 0x01
 5ac:	c0 83       	st	Z, r28
 5ae:	f6 01       	movw	r30, r12
 5b0:	11 83       	std	Z+1, r17	; 0x01
 5b2:	00 83       	st	Z, r16
 5b4:	89 2d       	mov	r24, r9
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	df 90       	pop	r13
 5c4:	cf 90       	pop	r12
 5c6:	bf 90       	pop	r11
 5c8:	af 90       	pop	r10
 5ca:	9f 90       	pop	r9
 5cc:	08 95       	ret

000005ce <putchw>:
 5ce:	bf 92       	push	r11
 5d0:	cf 92       	push	r12
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	6c 01       	movw	r12, r24
 5e2:	7b 01       	movw	r14, r22
 5e4:	e8 01       	movw	r28, r16
 5e6:	22 23       	and	r18, r18
 5e8:	29 f0       	breq	.+10     	; 0x5f4 <putchw+0x26>
 5ea:	0f 2e       	mov	r0, r31
 5ec:	f0 e3       	ldi	r31, 0x30	; 48
 5ee:	bf 2e       	mov	r11, r31
 5f0:	f0 2d       	mov	r31, r0
 5f2:	03 c0       	rjmp	.+6      	; 0x5fa <putchw+0x2c>
 5f4:	68 94       	set
 5f6:	bb 24       	eor	r11, r11
 5f8:	b5 f8       	bld	r11, 5
 5fa:	fe 01       	movw	r30, r28
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <putchw+0x36>
 5fe:	41 50       	subi	r20, 0x01	; 1
 600:	51 09       	sbc	r21, r1
 602:	f9 01       	movw	r30, r18
 604:	9f 01       	movw	r18, r30
 606:	2f 5f       	subi	r18, 0xFF	; 255
 608:	3f 4f       	sbci	r19, 0xFF	; 255
 60a:	80 81       	ld	r24, Z
 60c:	88 23       	and	r24, r24
 60e:	49 f0       	breq	.+18     	; 0x622 <putchw+0x54>
 610:	14 16       	cp	r1, r20
 612:	15 06       	cpc	r1, r21
 614:	a4 f3       	brlt	.-24     	; 0x5fe <putchw+0x30>
 616:	05 c0       	rjmp	.+10     	; 0x622 <putchw+0x54>
 618:	6b 2d       	mov	r22, r11
 61a:	c6 01       	movw	r24, r12
 61c:	f7 01       	movw	r30, r14
 61e:	09 95       	icall
 620:	a8 01       	movw	r20, r16
 622:	8a 01       	movw	r16, r20
 624:	01 50       	subi	r16, 0x01	; 1
 626:	11 09       	sbc	r17, r1
 628:	14 16       	cp	r1, r20
 62a:	15 06       	cpc	r1, r21
 62c:	ac f3       	brlt	.-22     	; 0x618 <putchw+0x4a>
 62e:	04 c0       	rjmp	.+8      	; 0x638 <putchw+0x6a>
 630:	c6 01       	movw	r24, r12
 632:	f7 01       	movw	r30, r14
 634:	09 95       	icall
 636:	e8 01       	movw	r28, r16
 638:	8e 01       	movw	r16, r28
 63a:	0f 5f       	subi	r16, 0xFF	; 255
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
 63e:	68 81       	ld	r22, Y
 640:	61 11       	cpse	r22, r1
 642:	f6 cf       	rjmp	.-20     	; 0x630 <putchw+0x62>
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	ff 90       	pop	r15
 64e:	ef 90       	pop	r14
 650:	df 90       	pop	r13
 652:	cf 90       	pop	r12
 654:	bf 90       	pop	r11
 656:	08 95       	ret

00000658 <tfp_format>:
	while ((ch= *bf++))
	putf(putp,ch);
}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
{
 658:	7f 92       	push	r7
 65a:	8f 92       	push	r8
 65c:	9f 92       	push	r9
 65e:	af 92       	push	r10
 660:	bf 92       	push	r11
 662:	cf 92       	push	r12
 664:	df 92       	push	r13
 666:	ef 92       	push	r14
 668:	ff 92       	push	r15
 66a:	0f 93       	push	r16
 66c:	1f 93       	push	r17
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	60 97       	sbiw	r28, 0x10	; 16
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	f8 94       	cli
 67c:	de bf       	out	0x3e, r29	; 62
 67e:	0f be       	out	0x3f, r0	; 63
 680:	cd bf       	out	0x3d, r28	; 61
 682:	5c 01       	movw	r10, r24
 684:	6b 01       	movw	r12, r22
 686:	58 8b       	std	Y+16, r21	; 0x10
 688:	4f 87       	std	Y+15, r20	; 0x0f
 68a:	79 01       	movw	r14, r18
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 68c:	ff c0       	rjmp	.+510    	; 0x88c <tfp_format+0x234>
		if (ch!='%')
 68e:	65 32       	cpi	r22, 0x25	; 37
 690:	21 f0       	breq	.+8      	; 0x69a <tfp_format+0x42>
		putf(putp,ch);
 692:	c5 01       	movw	r24, r10
 694:	f6 01       	movw	r30, r12
 696:	09 95       	icall
 698:	f9 c0       	rjmp	.+498    	; 0x88c <tfp_format+0x234>
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
			#endif
			int w=0;
 69a:	1e 86       	std	Y+14, r1	; 0x0e
 69c:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 69e:	9d 01       	movw	r18, r26
 6a0:	2f 5f       	subi	r18, 0xFF	; 255
 6a2:	3f 4f       	sbci	r19, 0xFF	; 255
 6a4:	38 8b       	std	Y+16, r19	; 0x10
 6a6:	2f 87       	std	Y+15, r18	; 0x0f
 6a8:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 6aa:	80 33       	cpi	r24, 0x30	; 48
 6ac:	49 f4       	brne	.+18     	; 0x6c0 <tfp_format+0x68>
				ch=*(fmt++);
 6ae:	2f 5f       	subi	r18, 0xFF	; 255
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	38 8b       	std	Y+16, r19	; 0x10
 6b4:	2f 87       	std	Y+15, r18	; 0x0f
 6b6:	11 96       	adiw	r26, 0x01	; 1
 6b8:	8c 91       	ld	r24, X
				lz=1;
 6ba:	77 24       	eor	r7, r7
 6bc:	73 94       	inc	r7
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <tfp_format+0x6a>

	while ((ch=*(fmt++))) {
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
 6c0:	71 2c       	mov	r7, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
			}
			if (ch>='0' && ch<='9') {
 6c2:	90 ed       	ldi	r25, 0xD0	; 208
 6c4:	98 0f       	add	r25, r24
 6c6:	9a 30       	cpi	r25, 0x0A	; 10
 6c8:	50 f4       	brcc	.+20     	; 0x6de <tfp_format+0x86>
				ch=a2i(ch,&fmt,10,&w);
 6ca:	9e 01       	movw	r18, r28
 6cc:	23 5f       	subi	r18, 0xF3	; 243
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	4a e0       	ldi	r20, 0x0A	; 10
 6d2:	50 e0       	ldi	r21, 0x00	; 0
 6d4:	be 01       	movw	r22, r28
 6d6:	61 5f       	subi	r22, 0xF1	; 241
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	0e 94 ab 02 	call	0x556	; 0x556 <a2i>
			}
			#ifdef 	PRINTF_LONG_SUPPORT
			if (ch=='l') {
 6de:	8c 36       	cpi	r24, 0x6C	; 108
 6e0:	49 f4       	brne	.+18     	; 0x6f4 <tfp_format+0x9c>
				ch=*(fmt++);
 6e2:	ef 85       	ldd	r30, Y+15	; 0x0f
 6e4:	f8 89       	ldd	r31, Y+16	; 0x10
 6e6:	cf 01       	movw	r24, r30
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	98 8b       	std	Y+16, r25	; 0x10
 6ec:	8f 87       	std	Y+15, r24	; 0x0f
 6ee:	80 81       	ld	r24, Z
				lng=1;
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <tfp_format+0x9e>
		if (ch!='%')
		putf(putp,ch);
		else {
			char lz=0;
			#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
 6f4:	90 e0       	ldi	r25, 0x00	; 0
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
			#endif
			switch (ch) {
 6f6:	83 36       	cpi	r24, 0x63	; 99
 6f8:	09 f4       	brne	.+2      	; 0x6fc <tfp_format+0xa4>
 6fa:	aa c0       	rjmp	.+340    	; 0x850 <tfp_format+0x1f8>
 6fc:	50 f4       	brcc	.+20     	; 0x712 <tfp_format+0xba>
 6fe:	85 32       	cpi	r24, 0x25	; 37
 700:	09 f4       	brne	.+2      	; 0x704 <tfp_format+0xac>
 702:	c0 c0       	rjmp	.+384    	; 0x884 <tfp_format+0x22c>
 704:	88 35       	cpi	r24, 0x58	; 88
 706:	09 f4       	brne	.+2      	; 0x70a <tfp_format+0xb2>
 708:	6a c0       	rjmp	.+212    	; 0x7de <tfp_format+0x186>
 70a:	88 23       	and	r24, r24
 70c:	09 f4       	brne	.+2      	; 0x710 <tfp_format+0xb8>
 70e:	c7 c0       	rjmp	.+398    	; 0x89e <tfp_format+0x246>
 710:	bd c0       	rjmp	.+378    	; 0x88c <tfp_format+0x234>
 712:	83 37       	cpi	r24, 0x73	; 115
 714:	09 f4       	brne	.+2      	; 0x718 <tfp_format+0xc0>
 716:	a6 c0       	rjmp	.+332    	; 0x864 <tfp_format+0x20c>
 718:	18 f4       	brcc	.+6      	; 0x720 <tfp_format+0xc8>
 71a:	84 36       	cpi	r24, 0x64	; 100
 71c:	c1 f1       	breq	.+112    	; 0x78e <tfp_format+0x136>
 71e:	b6 c0       	rjmp	.+364    	; 0x88c <tfp_format+0x234>
 720:	85 37       	cpi	r24, 0x75	; 117
 722:	21 f0       	breq	.+8      	; 0x72c <tfp_format+0xd4>
 724:	88 37       	cpi	r24, 0x78	; 120
 726:	09 f4       	brne	.+2      	; 0x72a <tfp_format+0xd2>
 728:	5a c0       	rjmp	.+180    	; 0x7de <tfp_format+0x186>
 72a:	b0 c0       	rjmp	.+352    	; 0x88c <tfp_format+0x234>
				case 0:
				goto abort;
				case 'u' : {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
 72c:	99 23       	and	r25, r25
 72e:	a1 f0       	breq	.+40     	; 0x758 <tfp_format+0x100>
					uli2a(va_arg(va, unsigned long int),10,0,bf);
 730:	47 01       	movw	r8, r14
 732:	f4 e0       	ldi	r31, 0x04	; 4
 734:	8f 0e       	add	r8, r31
 736:	91 1c       	adc	r9, r1
 738:	f7 01       	movw	r30, r14
 73a:	60 81       	ld	r22, Z
 73c:	71 81       	ldd	r23, Z+1	; 0x01
 73e:	82 81       	ldd	r24, Z+2	; 0x02
 740:	93 81       	ldd	r25, Z+3	; 0x03
 742:	8e 01       	movw	r16, r28
 744:	0f 5f       	subi	r16, 0xFF	; 255
 746:	1f 4f       	sbci	r17, 0xFF	; 255
 748:	20 e0       	ldi	r18, 0x00	; 0
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	4a e0       	ldi	r20, 0x0A	; 10
 74e:	50 e0       	ldi	r21, 0x00	; 0
 750:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <uli2a>
 754:	74 01       	movw	r14, r8
 756:	10 c0       	rjmp	.+32     	; 0x778 <tfp_format+0x120>
					else
					#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 758:	87 01       	movw	r16, r14
 75a:	0e 5f       	subi	r16, 0xFE	; 254
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	9e 01       	movw	r18, r28
 760:	2f 5f       	subi	r18, 0xFF	; 255
 762:	3f 4f       	sbci	r19, 0xFF	; 255
 764:	40 e0       	ldi	r20, 0x00	; 0
 766:	50 e0       	ldi	r21, 0x00	; 0
 768:	6a e0       	ldi	r22, 0x0A	; 10
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	f7 01       	movw	r30, r14
 76e:	80 81       	ld	r24, Z
 770:	91 81       	ldd	r25, Z+1	; 0x01
 772:	0e 94 1c 02 	call	0x438	; 0x438 <ui2a>
 776:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 778:	4d 85       	ldd	r20, Y+13	; 0x0d
 77a:	5e 85       	ldd	r21, Y+14	; 0x0e
 77c:	8e 01       	movw	r16, r28
 77e:	0f 5f       	subi	r16, 0xFF	; 255
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	27 2d       	mov	r18, r7
 784:	b6 01       	movw	r22, r12
 786:	c5 01       	movw	r24, r10
 788:	0e 94 e7 02 	call	0x5ce	; 0x5ce <putchw>
					break;
 78c:	7f c0       	rjmp	.+254    	; 0x88c <tfp_format+0x234>
				}
				case 'd' :  {
					#ifdef 	PRINTF_LONG_SUPPORT
					if (lng){
 78e:	99 23       	and	r25, r25
 790:	79 f0       	breq	.+30     	; 0x7b0 <tfp_format+0x158>
						//						li2a(va_arg(va, unsigned long int),bf);
						li2a(va_arg(va, long int),bf);
 792:	87 01       	movw	r16, r14
 794:	0c 5f       	subi	r16, 0xFC	; 252
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	f7 01       	movw	r30, r14
 79a:	60 81       	ld	r22, Z
 79c:	71 81       	ldd	r23, Z+1	; 0x01
 79e:	82 81       	ldd	r24, Z+2	; 0x02
 7a0:	93 81       	ldd	r25, Z+3	; 0x03
 7a2:	ae 01       	movw	r20, r28
 7a4:	4f 5f       	subi	r20, 0xFF	; 255
 7a6:	5f 4f       	sbci	r21, 0xFF	; 255
 7a8:	0e 94 02 02 	call	0x404	; 0x404 <li2a>
 7ac:	78 01       	movw	r14, r16
 7ae:	0c c0       	rjmp	.+24     	; 0x7c8 <tfp_format+0x170>
					else
					#endif



					i2a(va_arg(va, int),bf);
 7b0:	87 01       	movw	r16, r14
 7b2:	0e 5f       	subi	r16, 0xFE	; 254
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	be 01       	movw	r22, r28
 7b8:	6f 5f       	subi	r22, 0xFF	; 255
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	f7 01       	movw	r30, r14
 7be:	80 81       	ld	r24, Z
 7c0:	91 81       	ldd	r25, Z+1	; 0x01
 7c2:	0e 94 80 02 	call	0x500	; 0x500 <i2a>
 7c6:	78 01       	movw	r14, r16
					putchw(putp,putf,w,lz,bf);
 7c8:	4d 85       	ldd	r20, Y+13	; 0x0d
 7ca:	5e 85       	ldd	r21, Y+14	; 0x0e
 7cc:	8e 01       	movw	r16, r28
 7ce:	0f 5f       	subi	r16, 0xFF	; 255
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	27 2d       	mov	r18, r7
 7d4:	b6 01       	movw	r22, r12
 7d6:	c5 01       	movw	r24, r10
 7d8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <putchw>
					break;
 7dc:	57 c0       	rjmp	.+174    	; 0x88c <tfp_format+0x234>
				}
				case 'x': case 'X' :
				#ifdef 	PRINTF_LONG_SUPPORT
				if (lng)
 7de:	99 23       	and	r25, r25
 7e0:	c1 f0       	breq	.+48     	; 0x812 <tfp_format+0x1ba>
				uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
 7e2:	47 01       	movw	r8, r14
 7e4:	f4 e0       	ldi	r31, 0x04	; 4
 7e6:	8f 0e       	add	r8, r31
 7e8:	91 1c       	adc	r9, r1
 7ea:	21 e0       	ldi	r18, 0x01	; 1
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	88 35       	cpi	r24, 0x58	; 88
 7f0:	11 f0       	breq	.+4      	; 0x7f6 <tfp_format+0x19e>
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	f7 01       	movw	r30, r14
 7f8:	60 81       	ld	r22, Z
 7fa:	71 81       	ldd	r23, Z+1	; 0x01
 7fc:	82 81       	ldd	r24, Z+2	; 0x02
 7fe:	93 81       	ldd	r25, Z+3	; 0x03
 800:	8e 01       	movw	r16, r28
 802:	0f 5f       	subi	r16, 0xFF	; 255
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	40 e1       	ldi	r20, 0x10	; 16
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <uli2a>
 80e:	74 01       	movw	r14, r8
 810:	14 c0       	rjmp	.+40     	; 0x83a <tfp_format+0x1e2>
				else
				#endif
				ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 812:	87 01       	movw	r16, r14
 814:	0e 5f       	subi	r16, 0xFE	; 254
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	41 e0       	ldi	r20, 0x01	; 1
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	88 35       	cpi	r24, 0x58	; 88
 81e:	11 f0       	breq	.+4      	; 0x824 <tfp_format+0x1cc>
 820:	40 e0       	ldi	r20, 0x00	; 0
 822:	50 e0       	ldi	r21, 0x00	; 0
 824:	9e 01       	movw	r18, r28
 826:	2f 5f       	subi	r18, 0xFF	; 255
 828:	3f 4f       	sbci	r19, 0xFF	; 255
 82a:	60 e1       	ldi	r22, 0x10	; 16
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	f7 01       	movw	r30, r14
 830:	80 81       	ld	r24, Z
 832:	91 81       	ldd	r25, Z+1	; 0x01
 834:	0e 94 1c 02 	call	0x438	; 0x438 <ui2a>
 838:	78 01       	movw	r14, r16
				putchw(putp,putf,w,lz,bf);
 83a:	4d 85       	ldd	r20, Y+13	; 0x0d
 83c:	5e 85       	ldd	r21, Y+14	; 0x0e
 83e:	8e 01       	movw	r16, r28
 840:	0f 5f       	subi	r16, 0xFF	; 255
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	27 2d       	mov	r18, r7
 846:	b6 01       	movw	r22, r12
 848:	c5 01       	movw	r24, r10
 84a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <putchw>
				break;
 84e:	1e c0       	rjmp	.+60     	; 0x88c <tfp_format+0x234>
				case 'c' :
				putf(putp,(char)(va_arg(va, int)));
 850:	87 01       	movw	r16, r14
 852:	0e 5f       	subi	r16, 0xFE	; 254
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	f7 01       	movw	r30, r14
 858:	60 81       	ld	r22, Z
 85a:	c5 01       	movw	r24, r10
 85c:	f6 01       	movw	r30, r12
 85e:	09 95       	icall
 860:	78 01       	movw	r14, r16
				break;
 862:	14 c0       	rjmp	.+40     	; 0x88c <tfp_format+0x234>
				case 's' :
				putchw(putp,putf,w,0,va_arg(va, char*));
 864:	47 01       	movw	r8, r14
 866:	f2 e0       	ldi	r31, 0x02	; 2
 868:	8f 0e       	add	r8, r31
 86a:	91 1c       	adc	r9, r1
 86c:	f7 01       	movw	r30, r14
 86e:	00 81       	ld	r16, Z
 870:	11 81       	ldd	r17, Z+1	; 0x01
 872:	4d 85       	ldd	r20, Y+13	; 0x0d
 874:	5e 85       	ldd	r21, Y+14	; 0x0e
 876:	20 e0       	ldi	r18, 0x00	; 0
 878:	b6 01       	movw	r22, r12
 87a:	c5 01       	movw	r24, r10
 87c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <putchw>
 880:	74 01       	movw	r14, r8
				break;
 882:	04 c0       	rjmp	.+8      	; 0x88c <tfp_format+0x234>
				case '%' :
				putf(putp,ch);
 884:	68 2f       	mov	r22, r24
 886:	c5 01       	movw	r24, r10
 888:	f6 01       	movw	r30, r12
 88a:	09 95       	icall
	char bf[12];
	
	char ch;


	while ((ch=*(fmt++))) {
 88c:	ef 85       	ldd	r30, Y+15	; 0x0f
 88e:	f8 89       	ldd	r31, Y+16	; 0x10
 890:	df 01       	movw	r26, r30
 892:	11 96       	adiw	r26, 0x01	; 1
 894:	b8 8b       	std	Y+16, r27	; 0x10
 896:	af 87       	std	Y+15, r26	; 0x0f
 898:	60 81       	ld	r22, Z
 89a:	61 11       	cpse	r22, r1
 89c:	f8 ce       	rjmp	.-528    	; 0x68e <tfp_format+0x36>
				break;
			}
		}
	}
	abort:;
}
 89e:	60 96       	adiw	r28, 0x10	; 16
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	1f 91       	pop	r17
 8b0:	0f 91       	pop	r16
 8b2:	ff 90       	pop	r15
 8b4:	ef 90       	pop	r14
 8b6:	df 90       	pop	r13
 8b8:	cf 90       	pop	r12
 8ba:	bf 90       	pop	r11
 8bc:	af 90       	pop	r10
 8be:	9f 90       	pop	r9
 8c0:	8f 90       	pop	r8
 8c2:	7f 90       	pop	r7
 8c4:	08 95       	ret

000008c6 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
{
	stdout_putf=putf;
 8c6:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <stdout_putf+0x1>
 8ca:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <stdout_putf>
	stdout_putp=putp;
 8ce:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <stdout_putp+0x1>
 8d2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <stdout_putp>
 8d6:	08 95       	ret

000008d8 <tfp_printf>:
}

void tfp_printf(char *fmt, ...)
{
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
 8e0:	9e 01       	movw	r18, r28
 8e2:	2b 5f       	subi	r18, 0xFB	; 251
 8e4:	3f 4f       	sbci	r19, 0xFF	; 255
 8e6:	f9 01       	movw	r30, r18
 8e8:	41 91       	ld	r20, Z+
 8ea:	51 91       	ld	r21, Z+
 8ec:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 8ee:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <stdout_putf>
 8f2:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <stdout_putf+0x1>
 8f6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <stdout_putp>
 8fa:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <stdout_putp+0x1>
 8fe:	0e 94 2c 03 	call	0x658	; 0x658 <tfp_format>
	va_end(va);
}
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	08 95       	ret

00000908 <__mulsi3>:
 908:	db 01       	movw	r26, r22
 90a:	8f 93       	push	r24
 90c:	9f 93       	push	r25
 90e:	0e 94 ca 04 	call	0x994	; 0x994 <__muluhisi3>
 912:	bf 91       	pop	r27
 914:	af 91       	pop	r26
 916:	a2 9f       	mul	r26, r18
 918:	80 0d       	add	r24, r0
 91a:	91 1d       	adc	r25, r1
 91c:	a3 9f       	mul	r26, r19
 91e:	90 0d       	add	r25, r0
 920:	b2 9f       	mul	r27, r18
 922:	90 0d       	add	r25, r0
 924:	11 24       	eor	r1, r1
 926:	08 95       	ret

00000928 <__udivmodhi4>:
 928:	aa 1b       	sub	r26, r26
 92a:	bb 1b       	sub	r27, r27
 92c:	51 e1       	ldi	r21, 0x11	; 17
 92e:	07 c0       	rjmp	.+14     	; 0x93e <__udivmodhi4_ep>

00000930 <__udivmodhi4_loop>:
 930:	aa 1f       	adc	r26, r26
 932:	bb 1f       	adc	r27, r27
 934:	a6 17       	cp	r26, r22
 936:	b7 07       	cpc	r27, r23
 938:	10 f0       	brcs	.+4      	; 0x93e <__udivmodhi4_ep>
 93a:	a6 1b       	sub	r26, r22
 93c:	b7 0b       	sbc	r27, r23

0000093e <__udivmodhi4_ep>:
 93e:	88 1f       	adc	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	5a 95       	dec	r21
 944:	a9 f7       	brne	.-22     	; 0x930 <__udivmodhi4_loop>
 946:	80 95       	com	r24
 948:	90 95       	com	r25
 94a:	bc 01       	movw	r22, r24
 94c:	cd 01       	movw	r24, r26
 94e:	08 95       	ret

00000950 <__udivmodsi4>:
 950:	a1 e2       	ldi	r26, 0x21	; 33
 952:	1a 2e       	mov	r1, r26
 954:	aa 1b       	sub	r26, r26
 956:	bb 1b       	sub	r27, r27
 958:	fd 01       	movw	r30, r26
 95a:	0d c0       	rjmp	.+26     	; 0x976 <__udivmodsi4_ep>

0000095c <__udivmodsi4_loop>:
 95c:	aa 1f       	adc	r26, r26
 95e:	bb 1f       	adc	r27, r27
 960:	ee 1f       	adc	r30, r30
 962:	ff 1f       	adc	r31, r31
 964:	a2 17       	cp	r26, r18
 966:	b3 07       	cpc	r27, r19
 968:	e4 07       	cpc	r30, r20
 96a:	f5 07       	cpc	r31, r21
 96c:	20 f0       	brcs	.+8      	; 0x976 <__udivmodsi4_ep>
 96e:	a2 1b       	sub	r26, r18
 970:	b3 0b       	sbc	r27, r19
 972:	e4 0b       	sbc	r30, r20
 974:	f5 0b       	sbc	r31, r21

00000976 <__udivmodsi4_ep>:
 976:	66 1f       	adc	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	1a 94       	dec	r1
 980:	69 f7       	brne	.-38     	; 0x95c <__udivmodsi4_loop>
 982:	60 95       	com	r22
 984:	70 95       	com	r23
 986:	80 95       	com	r24
 988:	90 95       	com	r25
 98a:	9b 01       	movw	r18, r22
 98c:	ac 01       	movw	r20, r24
 98e:	bd 01       	movw	r22, r26
 990:	cf 01       	movw	r24, r30
 992:	08 95       	ret

00000994 <__muluhisi3>:
 994:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__umulhisi3>
 998:	a5 9f       	mul	r26, r21
 99a:	90 0d       	add	r25, r0
 99c:	b4 9f       	mul	r27, r20
 99e:	90 0d       	add	r25, r0
 9a0:	a4 9f       	mul	r26, r20
 9a2:	80 0d       	add	r24, r0
 9a4:	91 1d       	adc	r25, r1
 9a6:	11 24       	eor	r1, r1
 9a8:	08 95       	ret

000009aa <__umulhisi3>:
 9aa:	a2 9f       	mul	r26, r18
 9ac:	b0 01       	movw	r22, r0
 9ae:	b3 9f       	mul	r27, r19
 9b0:	c0 01       	movw	r24, r0
 9b2:	a3 9f       	mul	r26, r19
 9b4:	70 0d       	add	r23, r0
 9b6:	81 1d       	adc	r24, r1
 9b8:	11 24       	eor	r1, r1
 9ba:	91 1d       	adc	r25, r1
 9bc:	b2 9f       	mul	r27, r18
 9be:	70 0d       	add	r23, r0
 9c0:	81 1d       	adc	r24, r1
 9c2:	11 24       	eor	r1, r1
 9c4:	91 1d       	adc	r25, r1
 9c6:	08 95       	ret

000009c8 <_exit>:
 9c8:	f8 94       	cli

000009ca <__stop_program>:
 9ca:	ff cf       	rjmp	.-2      	; 0x9ca <__stop_program>

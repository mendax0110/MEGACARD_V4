
InterruptsDrehgeber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000062d  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005aa  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023a  00000000  00000000  00000e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000363  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a1  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <InitPorts>:

//init ports
void InitPorts()
{
	// Port D: CLK-Pin und DIR-Pin als Eingänge
	DDRD &= ~(1 << CLK_PIN);
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	87 7f       	andi	r24, 0xF7	; 247
  80:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << DIR_PIN);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	8b 7f       	andi	r24, 0xFB	; 251
  86:	81 bb       	out	0x11, r24	; 17

	// Port B: LEDs als Ausgänge
	DDRC = 0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 bb       	out	0x14, r24	; 20
  8c:	08 95       	ret

0000008e <__vector_2>:
}

// INT1 ISR
ISR(INT1_vect)
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	2f 93       	push	r18
  9a:	3f 93       	push	r19
  9c:	4f 93       	push	r20
  9e:	5f 93       	push	r21
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	// steigenden Flanke erhöhen der Zählvariable
	count++;
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	// ouput binät
	for (int i = 0; i < 8; i++)
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	1a c0       	rjmp	.+52     	; 0xf0 <__vector_2+0x62>
	{
		 if (count & (1 << i)) 
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__vector_2+0x3a>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <__vector_2+0x36>
  cc:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d4:	48 23       	and	r20, r24
  d6:	59 23       	and	r21, r25
  d8:	45 2b       	or	r20, r21
  da:	21 f0       	breq	.+8      	; 0xe4 <__vector_2+0x56>
		 {
			 LED_PORT |= (1 << i); // son
  dc:	95 b3       	in	r25, 0x15	; 21
  de:	89 2b       	or	r24, r25
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	04 c0       	rjmp	.+8      	; 0xec <__vector_2+0x5e>
		 } 
		 else 
		 {
			 LED_PORT &= ~(1 << i); // clear
  e4:	95 b3       	in	r25, 0x15	; 21
  e6:	80 95       	com	r24
  e8:	89 23       	and	r24, r25
  ea:	85 bb       	out	0x15, r24	; 21
{
	// steigenden Flanke erhöhen der Zählvariable
	count++;
	
	// ouput binät
	for (int i = 0; i < 8; i++)
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
  f0:	28 30       	cpi	r18, 0x08	; 8
  f2:	31 05       	cpc	r19, r1
  f4:	1c f3       	brlt	.-58     	; 0xbc <__vector_2+0x2e>
		 else 
		 {
			 LED_PORT &= ~(1 << i); // clear
		 }
	 }
}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:

int main(void)
{
	InitPorts();
 10c:	0e 94 3e 00 	call	0x7c	; 0x7c <InitPorts>
	
	cli();
 110:	f8 94       	cli
	MCUCR |= (1 << ISC11) | (1 << ISC10); // steigende Flanke erzeugt Interrupt
 112:	85 b7       	in	r24, 0x35	; 53
 114:	8c 60       	ori	r24, 0x0C	; 12
 116:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1); // INT1 aktivieren
 118:	8b b7       	in	r24, 0x3b	; 59
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8b bf       	out	0x3b, r24	; 59
	sei(); // Globale Interrupts aktivieren
 11e:	78 94       	sei
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0x14>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>


TimerCounterRead.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fe  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000619  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030d  00000000  00000000  00000f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  74:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_timer1>:
volatile uint16_t edge_count = 0;	// Counter for the number of edges
volatile uint8_t timer_overflow = 0;	// Counter for the number of overflows

void init_timer1()
{
	TCCR1A = 0x00;	// Normal mode
  7c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS12)|(1 << CS10);	// Prescaler = 1024
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x7FFF;	// Compare value = 32767
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	9f e7       	ldi	r25, 0x7F	; 127
  86:	9b bd       	out	0x2b, r25	; 43
  88:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A)|(1 << TOIE1);	// Enable compare interrupt
  8a:	89 b7       	in	r24, 0x39	; 57
  8c:	84 61       	ori	r24, 0x14	; 20
  8e:	89 bf       	out	0x39, r24	; 57
  90:	08 95       	ret

00000092 <init_ports>:
}

void init_ports()
{
	DDRB |= (1 << PB3); // Set PB3 as output
  92:	87 b3       	in	r24, 0x17	; 23
  94:	88 60       	ori	r24, 0x08	; 8
  96:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB4); // Set PB4 as input
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PB4); // Enable pull-up resistor
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	08 95       	ret

000000a6 <main>:
}

int main(void)
{
	cli();	// Disable global interrupts
  a6:	f8 94       	cli
	init_ports();
  a8:	0e 94 49 00 	call	0x92	; 0x92 <init_ports>
	init_timer1();
  ac:	0e 94 3e 00 	call	0x7c	; 0x7c <init_timer1>
	sei();	// Enable global interrupts
  b0:	78 94       	sei

	while(1)
	{
		while(!timer_overflow)
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	88 23       	and	r24, r24
  b8:	e1 f3       	breq	.-8      	; 0xb2 <main+0xc>
		{
			// Wait for timer overflow
		}

		// disable interrupts
		cli();
  ba:	f8 94       	cli

		// get the number of edges
		uint16_t count = edge_count;
  bc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <edge_count>
  c0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <edge_count+0x1>

		// reset the counters
		edge_count = 0;
  c4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <edge_count+0x1>
  c8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <edge_count>
		timer_overflow = 0;
  cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

		// enable interrupts
		sei();
  d0:	78 94       	sei

		// output the count to the LED inidcator
		PORTC = count & 0xFF;
  d2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	8e e9       	ldi	r24, 0x9E	; 158
  d8:	94 e2       	ldi	r25, 0x24	; 36
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x34>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x3e>
  e4:	00 00       	nop
  e6:	e5 cf       	rjmp	.-54     	; 0xb2 <main+0xc>

000000e8 <__vector_6>:
		_delay_ms(1000);
	}
}

ISR(TIMER1_COMPA_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
	// toggle on compare match
	PORTB ^= (1 << PB3);
  f6:	98 b3       	in	r25, 0x18	; 24
  f8:	88 e0       	ldi	r24, 0x08	; 8
  fa:	89 27       	eor	r24, r25
  fc:	88 bb       	out	0x18, r24	; 24
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_8>:

ISR(TIMER1_OVF_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
	if((PINB & (1 << PB4)) && !(TIFR & (1 << TOV1)))
 11a:	b4 9b       	sbis	0x16, 4	; 22
 11c:	0c c0       	rjmp	.+24     	; 0x136 <__vector_8+0x2a>
 11e:	08 b6       	in	r0, 0x38	; 56
 120:	02 fc       	sbrc	r0, 2
 122:	09 c0       	rjmp	.+18     	; 0x136 <__vector_8+0x2a>
	{
		// increment the edge count
		edge_count++;
 124:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <edge_count>
 128:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <edge_count+0x1>
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <edge_count+0x1>
 132:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <edge_count>
	}

	// toggle on overflow
	if(TIFR & (1 << TOV1))
 136:	08 b6       	in	r0, 0x38	; 56
 138:	02 fe       	sbrs	r0, 2
 13a:	06 c0       	rjmp	.+12     	; 0x148 <__vector_8+0x3c>
	{
		timer_overflow = 1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		TIFR |= (1 << TOV1);
 142:	88 b7       	in	r24, 0x38	; 56
 144:	84 60       	ori	r24, 0x04	; 4
 146:	88 bf       	out	0x38, r24	; 56
	}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>

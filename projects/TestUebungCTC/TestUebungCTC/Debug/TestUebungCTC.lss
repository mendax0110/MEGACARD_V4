
TestUebungCTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000196  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000624  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000264  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000362  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001467  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 88 00 	call	0x110	; 0x110 <main>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
#include <util/delay.h>

volatile uint8_t freqDiv = 0;

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	freqDiv++;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	8f 5f       	subi	r24, 0xFF	; 255
  90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if(freqDiv == 20)
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	84 31       	cpi	r24, 0x14	; 20
  9a:	11 f5       	brne	.+68     	; 0xe0 <__vector_19+0x64>
	{
		PORTC ^= (1 << PB7);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	80 58       	subi	r24, 0x80	; 128
  a0:	85 bb       	out	0x15, r24	; 21
		PORTC ^= (1 << PB6);
  a2:	95 b3       	in	r25, 0x15	; 21
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	89 27       	eor	r24, r25
  a8:	85 bb       	out	0x15, r24	; 21
		PORTC ^= (1 << PB5);
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	89 27       	eor	r24, r25
  b0:	85 bb       	out	0x15, r24	; 21
		PORTC ^= (1 << PB4);
  b2:	95 b3       	in	r25, 0x15	; 21
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	89 27       	eor	r24, r25
  b8:	85 bb       	out	0x15, r24	; 21
		PORTC ^= (1 << PB3);
  ba:	95 b3       	in	r25, 0x15	; 21
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	89 27       	eor	r24, r25
  c0:	85 bb       	out	0x15, r24	; 21
		PORTC ^= (1 << PB2);
  c2:	95 b3       	in	r25, 0x15	; 21
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	89 27       	eor	r24, r25
  c8:	85 bb       	out	0x15, r24	; 21
		PORTC ^= (1 << PB1);
  ca:	95 b3       	in	r25, 0x15	; 21
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	89 27       	eor	r24, r25
  d0:	85 bb       	out	0x15, r24	; 21
		PORTC ^= (1 << PB0);
  d2:	95 b3       	in	r25, 0x15	; 21
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	89 27       	eor	r24, r25
  d8:	85 bb       	out	0x15, r24	; 21
		
		freqDiv = 5;
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <init_ports>:

void init_ports()
{
	DDRC |= (1 << PC7)|(1 << PC6)|(1 << PC5)|(1 << PC4)|(1 << PC3)|(1 << PC2)|(1 << PC1)|(1 << PC0);
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	84 bb       	out	0x14, r24	; 20

	DDRB |= (1 << PB3);
  f4:	87 b3       	in	r24, 0x17	; 23
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	08 95       	ret

000000fc <init_timer0_ctc>:
}

void init_timer0_ctc()
{
	TCCR0 |= (1 << COM00)|(1 << WGM01)|(1 << CS02)|(1 << CS00);
  fc:	83 b7       	in	r24, 0x33	; 51
  fe:	8d 61       	ori	r24, 0x1D	; 29
 100:	83 bf       	out	0x33, r24	; 51
	OCR0 = 58;
 102:	8a e3       	ldi	r24, 0x3A	; 58
 104:	8c bf       	out	0x3c, r24	; 60
	TCNT0 = 0;
 106:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << OCIE0);
 108:	89 b7       	in	r24, 0x39	; 57
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	89 bf       	out	0x39, r24	; 57
 10e:	08 95       	ret

00000110 <main>:
}


int main(void)
{
	cli();
 110:	f8 94       	cli
	init_ports();
 112:	0e 94 77 00 	call	0xee	; 0xee <init_ports>
	init_timer0_ctc();
 116:	0e 94 7e 00 	call	0xfc	; 0xfc <init_timer0_ctc>
	sei();
 11a:	78 94       	sei
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0xc>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>


Taster_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000674  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bd  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000259  00000000  00000000  00000dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define T_PRELL 20 //Entprellzeit für Taster in ms

int main(void)
{
	//Konfiguration der I/O-Ports:
	DDRA=0x00;  //Tasterport: Eingang (default)
  6c:	1a ba       	out	0x1a, r1	; 26
	PORTA=0x0F; //Pullups f?r Taster S0,1,2,3 aktivieren
  6e:	8f e0       	ldi	r24, 0x0F	; 15
  70:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;  //LED-Port: Ausgang
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	84 bb       	out	0x14, r24	; 20
	PORTC=0x01; //LED0 ein, LED1...7 aus
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	85 bb       	out	0x15, r24	; 21
	
	//Arbeitsschleife
	while(1)
	{
		if (!(PINA & (1<<TASTER)))
  7a:	c8 99       	sbic	0x19, 0	; 25
  7c:	fe cf       	rjmp	.-4      	; 0x7a <main+0xe>
		{
			//Pr?fen, ob Taster Sx gedr?ckt
			PORTC = (PORTC<<1) | (PORTC>>7); //LED Status um 1 Bit links rotieren
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	95 b3       	in	r25, 0x15	; 21
  88:	99 1f       	adc	r25, r25
  8a:	99 27       	eor	r25, r25
  8c:	99 1f       	adc	r25, r25
  8e:	89 2b       	or	r24, r25
  90:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e5       	ldi	r24, 0x5F	; 95
  94:	9a ee       	ldi	r25, 0xEA	; 234
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x2a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
			_delay_ms(T_PRELL);	//Entprellung f?r Tasterschlie?en

			while(!(PINA & (1<<TASTER)));	//warten solange Taster Sx gedr?ckt
  9e:	c8 9b       	sbis	0x19, 0	; 25
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x32>
  a2:	8f e5       	ldi	r24, 0x5F	; 95
  a4:	9a ee       	ldi	r25, 0xEA	; 234
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
  ae:	e5 cf       	rjmp	.-54     	; 0x7a <main+0xe>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>


Debug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000172  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000633  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a1  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c1  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f8  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  8a:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:
#include <AVR/interrupt.h>

volatile char mode=0;

ISR(TIMER0_OVF_vect)	//f=12MHz/256 = ca. 46kHz
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	static unsigned char vt=0,dir=1;
	vt++;
  9e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
	if (vt>=5)
  a4:	85 30       	cpi	r24, 0x05	; 5
  a6:	18 f4       	brcc	.+6      	; 0xae <__vector_9+0x1c>
volatile char mode=0;

ISR(TIMER0_OVF_vect)	//f=12MHz/256 = ca. 46kHz
{
	static unsigned char vt=0,dir=1;
	vt++;
  a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__vector_9+0x90>
	if (vt>=5)
	{
		vt=0;
  ae:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		switch (mode)
  b2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <mode>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	69 f0       	breq	.+26     	; 0xd4 <__vector_9+0x42>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	a1 f0       	breq	.+40     	; 0xe6 <__vector_9+0x54>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	69 f5       	brne	.+90     	; 0x11c <__vector_9+0x8a>
		{
			case 1:
				PORTC>>=1;
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	86 95       	lsr	r24
  c6:	85 bb       	out	0x15, r24	; 21
				if (!PORTC)
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	81 11       	cpse	r24, r1
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__vector_9+0x90>
					PORTC=0x80;
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	27 c0       	rjmp	.+78     	; 0x122 <__vector_9+0x90>
				break;
			case 2:
				PORTC<<=1;
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	88 0f       	add	r24, r24
  d8:	85 bb       	out	0x15, r24	; 21
				if (!PORTC)
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	81 11       	cpse	r24, r1
  de:	21 c0       	rjmp	.+66     	; 0x122 <__vector_9+0x90>
					PORTC=0x01;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	1e c0       	rjmp	.+60     	; 0x122 <__vector_9+0x90>
				break;
			case 3:
				if (dir)
  e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ea:	88 23       	and	r24, r24
  ec:	59 f0       	breq	.+22     	; 0x104 <__vector_9+0x72>
				{
					PORTC<<=1;
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	88 0f       	add	r24, r24
  f2:	85 bb       	out	0x15, r24	; 21
					if (!PORTC)
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	81 11       	cpse	r24, r1
  f8:	14 c0       	rjmp	.+40     	; 0x122 <__vector_9+0x90>
					{
						PORTC=0x40;
  fa:	80 e4       	ldi	r24, 0x40	; 64
  fc:	85 bb       	out	0x15, r24	; 21
						dir=0;
  fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	0f c0       	rjmp	.+30     	; 0x122 <__vector_9+0x90>
					}
				}
				else
				{
					PORTC>>=1;
 104:	85 b3       	in	r24, 0x15	; 21
 106:	86 95       	lsr	r24
 108:	85 bb       	out	0x15, r24	; 21
					if (!PORTC)
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	81 11       	cpse	r24, r1
 10e:	09 c0       	rjmp	.+18     	; 0x122 <__vector_9+0x90>
					{
						PORTC=0x02;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	85 bb       	out	0x15, r24	; 21
						dir=1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <__vector_9+0x90>
					}
				}
				break;
			default:
				PORTC++;
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	85 bb       	out	0x15, r24	; 21
				break;
		}
	}
}
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <init>:

void init()
{
	DDRC   = 0xFF;			// LED-Ports auf Ausgang
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	84 bb       	out	0x14, r24	; 20
	//PORTA  = 0x0F;			// PA0...PA3=Taster
	DDRA = 0x00;
 132:	1a ba       	out	0x1a, r1	; 26
	PORTC  = 0x01;			// 1.Leuchtpunkt einschalten
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	85 bb       	out	0x15, r24	; 21
	
	TCCR0 |= (1<<CS00);		// kh=1
 138:	83 b7       	in	r24, 0x33	; 51
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);	// TOV0-enable
 13e:	89 b7       	in	r24, 0x39	; 57
 140:	81 60       	ori	r24, 0x01	; 1
 142:	89 bf       	out	0x39, r24	; 57
 144:	08 95       	ret

00000146 <main>:
}
int main( void )
{
	init();
 146:	0e 94 97 00 	call	0x12e	; 0x12e <init>
	sei();					// Interrupts enablen
 14a:	78 94       	sei
		if (~PINA & 0x04)
			mode=3;
		if (~PINA & 0x04)
			mode=0;*/
		if ((PINA & 0x01) == 0x00)
			mode = 1;
 14c:	21 e0       	ldi	r18, 0x01	; 1
		if (!(PINA & 0x02))
			mode = 2;
 14e:	92 e0       	ldi	r25, 0x02	; 2
		if (!(PINA & 0x04))
			mode = 3;
 150:	83 e0       	ldi	r24, 0x03	; 3
			mode =2;
		if (~PINA & 0x04)
			mode=3;
		if (~PINA & 0x04)
			mode=0;*/
		if ((PINA & 0x01) == 0x00)
 152:	c8 9b       	sbis	0x19, 0	; 25
			mode = 1;
 154:	20 93 63 00 	sts	0x0063, r18	; 0x800063 <mode>
		if (!(PINA & 0x02))
 158:	c9 9b       	sbis	0x19, 1	; 25
			mode = 2;
 15a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <mode>
		if (!(PINA & 0x04))
 15e:	ca 9b       	sbis	0x19, 2	; 25
			mode = 3;
 160:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <mode>
		if (!(PINA & 0x08))
 164:	cb 99       	sbic	0x19, 3	; 25
 166:	f5 cf       	rjmp	.-22     	; 0x152 <main+0xc>
			mode = 0;
 168:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <mode>
 16c:	f2 cf       	rjmp	.-28     	; 0x152 <main+0xc>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>

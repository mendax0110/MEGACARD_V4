
VoltageAmp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000016e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000623  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057e  00000000  00000000  00000827  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000218  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a4  00000000  00000000  00001391  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001435  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_8>:
volatile uint16_t input_voltage = 0;
volatile uint16_t output_voltage = 0;

// ISR for timer1 overflow
ISR(TIMER1_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
	uint16_t base_voltage = input_voltage / 2;
  8e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <input_voltage>
  92:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <input_voltage+0x1>
  96:	36 95       	lsr	r19
  98:	27 95       	ror	r18
	uint16_t collector_voltage = 512 - base_voltage;
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	82 1b       	sub	r24, r18
  a0:	93 0b       	sbc	r25, r19
	output_voltage = collector_voltage * 2;
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	3f 91       	pop	r19
  b4:	2f 91       	pop	r18
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:

int main(void)
{
	// init I/O ports
	DDRA = 0xFF;		// set all pins of PORTA as output
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
	
	// init Timer1 for interrupt generation
	TCCR1A = 0x00;		// normale mode
  c4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x04;		// clk/256 prescaler
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 0x04;		// enable timer1 overflow interrupt
  ca:	89 bf       	out	0x39, r24	; 57
	
	// enable global interrupt
	sei();
  cc:	78 94       	sei
	
	while(1)
	{
		// read the intput voltage from ADC
		ADCSRA = (1 << ADEN)|(1 << ADSC)|(1 << ADPS2)|(1 << ADIE);	// enable ADC, start conversion, set prescaler to 16, enable interrupt
  ce:	8c ec       	ldi	r24, 0xCC	; 204
  d0:	86 b9       	out	0x06, r24	; 6
		
		while(ADCSRA & (1 << ADSC));	// wait for conversion to complete
  d2:	36 99       	sbic	0x06, 6	; 6
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0x12>
		
		input_voltage = ADC;	// store the ADC result in input_value
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <input_voltage+0x1>
  de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <input_voltage>
		
		// update the output voltage
		PORTA = output_voltage >> 2;
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	96 95       	lsr	r25
  f0:	87 95       	ror	r24
  f2:	8b bb       	out	0x1b, r24	; 27
	}
  f4:	ec cf       	rjmp	.-40     	; 0xce <main+0xe>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>

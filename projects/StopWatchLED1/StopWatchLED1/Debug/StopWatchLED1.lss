
StopWatchLED1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000025a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000809  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000613  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003aa  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 92 00 	call	0x124	; 0x124 <main>
  74:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
volatile uint8_t s1_Pressed = 0;
volatile uint8_t stopwatch_running = 0;

// Interrupt Service Routine für Timer0 Compare Match
ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	if (stopwatch_running)
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	88 23       	and	r24, r24
  8e:	09 f1       	breq	.+66     	; 0xd2 <__vector_19+0x56>
	{
		seconds++;
  90:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <seconds>
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <seconds>

		if (seconds >= 60)
  9a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <seconds>
  9e:	8c 33       	cpi	r24, 0x3C	; 60
  a0:	c0 f0       	brcs	.+48     	; 0xd2 <__vector_19+0x56>
		{
			seconds = 0;
  a2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <seconds>
			minutes++;
  a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <minutes>
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <minutes>

			if (minutes >= 60)
  b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <minutes>
  b4:	8c 33       	cpi	r24, 0x3C	; 60
  b6:	68 f0       	brcs	.+26     	; 0xd2 <__vector_19+0x56>
			{
				minutes = 0;
  b8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <minutes>
				hours++;
  bc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <hours>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <hours>

				if (hours >= 24)
  c6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <hours>
  ca:	88 31       	cpi	r24, 0x18	; 24
  cc:	10 f0       	brcs	.+4      	; 0xd2 <__vector_19+0x56>
				{
					hours = 0;
  ce:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <hours>
				}
			}
		}
	}
}
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <init_Timer0>:

// Timer0-Initialisierung, 8-Bit, CTC, Prescaler 1024
void init_Timer0()
{
	TCCR0 |= (1 << WGM01) | (1 << CS02) | (1 << CS00);
  de:	83 b7       	in	r24, 0x33	; 51
  e0:	8d 60       	ori	r24, 0x0D	; 13
  e2:	83 bf       	out	0x33, r24	; 51

	OCR0 = 150;
  e4:	86 e9       	ldi	r24, 0x96	; 150
  e6:	8c bf       	out	0x3c, r24	; 60

	TIMSK |= (1 << OCIE0);
  e8:	89 b7       	in	r24, 0x39	; 57
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	89 bf       	out	0x39, r24	; 57
  ee:	08 95       	ret

000000f0 <init_Ports>:
}

// Ports initialisieren
void init_Ports()
{
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2);  // LED PC0, PC1 und PC2 als Ausgabe festlegen
  f0:	84 b3       	in	r24, 0x14	; 20
  f2:	87 60       	ori	r24, 0x07	; 7
  f4:	84 bb       	out	0x14, r24	; 20

	DDRA &= ~(1 << PA0) & ~(1 << PA1);  // Tasten PA0 und PA1 als Eingabe festlegen
  f6:	8a b3       	in	r24, 0x1a	; 26
  f8:	8c 7f       	andi	r24, 0xFC	; 252
  fa:	8a bb       	out	0x1a, r24	; 26

	PORTA |= (1 << PA0) | (1 << PA1);   // Pull-Up-Widerstände für Tasten aktivieren
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	8b bb       	out	0x1b, r24	; 27
 102:	08 95       	ret

00000104 <start_stopwatch>:
}

// Stoppuhr starten
void start_stopwatch()
{
	stopwatch_running = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	08 95       	ret

0000010c <stop_stopwatch>:
}

// Stoppuhr stoppen
void stop_stopwatch()
{
	stopwatch_running = 0;
 10c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 110:	08 95       	ret

00000112 <reset_stopwatch>:
}

// Stoppuhr zurücksetzen
void reset_stopwatch()
{
	stopwatch_running = 0;
 112:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	seconds = 0;
 116:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <seconds>
	minutes = 0;
 11a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <minutes>
	hours = 0;
 11e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <hours>
 122:	08 95       	ret

00000124 <main>:
}

int main(void)
{
	cli();          // Interrupts deaktivieren
 124:	f8 94       	cli
	init_Ports();   // Ports initialisieren
 126:	0e 94 78 00 	call	0xf0	; 0xf0 <init_Ports>
	init_Timer0();  // Timer0 initialisieren
 12a:	0e 94 6f 00 	call	0xde	; 0xde <init_Timer0>
	sei();          // Interrupts aktivieren
 12e:	78 94       	sei

	while (1)
	{
		// LED PC0 aktualisieren
		if (seconds % 2 == 0)
 130:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <seconds>
 134:	80 fd       	sbrc	r24, 0
 136:	04 c0       	rjmp	.+8      	; 0x140 <main+0x1c>
		PORTC |= (1 << PC0);
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	03 c0       	rjmp	.+6      	; 0x146 <main+0x22>
		else
		PORTC &= ~(1 << PC0);
 140:	85 b3       	in	r24, 0x15	; 21
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	85 bb       	out	0x15, r24	; 21

		// LED PC1 aktualisieren
		if (minutes % 2 == 0)
 146:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <minutes>
 14a:	80 fd       	sbrc	r24, 0
 14c:	04 c0       	rjmp	.+8      	; 0x156 <main+0x32>
		PORTC |= (1 << PC1);
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	82 60       	ori	r24, 0x02	; 2
 152:	85 bb       	out	0x15, r24	; 21
 154:	03 c0       	rjmp	.+6      	; 0x15c <main+0x38>
		else
		PORTC &= ~(1 << PC1);
 156:	85 b3       	in	r24, 0x15	; 21
 158:	8d 7f       	andi	r24, 0xFD	; 253
 15a:	85 bb       	out	0x15, r24	; 21

		// LED PC2 aktualisieren
		if (hours % 2 == 0)
 15c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <hours>
 160:	80 fd       	sbrc	r24, 0
 162:	04 c0       	rjmp	.+8      	; 0x16c <main+0x48>
		PORTC |= (1 << PC2);
 164:	85 b3       	in	r24, 0x15	; 21
 166:	84 60       	ori	r24, 0x04	; 4
 168:	85 bb       	out	0x15, r24	; 21
 16a:	03 c0       	rjmp	.+6      	; 0x172 <main+0x4e>
		else
		PORTC &= ~(1 << PC2);
 16c:	85 b3       	in	r24, 0x15	; 21
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	85 bb       	out	0x15, r24	; 21

		// Überprüfen, ob Tasten gedrückt sind
		if (!(PINA & (1 << PA0)))
 172:	c8 99       	sbic	0x19, 0	; 25
 174:	1d c0       	rjmp	.+58     	; 0x1b0 <main+0x8c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f eb       	ldi	r18, 0xBF	; 191
 178:	84 ed       	ldi	r24, 0xD4	; 212
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x58>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x62>
 186:	00 00       	nop
		{
			_delay_ms(50);
			if (!(PINA & (1 << PA0)))
 188:	c8 99       	sbic	0x19, 0	; 25
 18a:	12 c0       	rjmp	.+36     	; 0x1b0 <main+0x8c>
			{
				if (stopwatch_running)
 18c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 190:	88 23       	and	r24, r24
 192:	19 f0       	breq	.+6      	; 0x19a <main+0x76>
				{
					stop_stopwatch();
 194:	0e 94 86 00 	call	0x10c	; 0x10c <stop_stopwatch>
 198:	02 c0       	rjmp	.+4      	; 0x19e <main+0x7a>
				}
				else
				{
					start_stopwatch();
 19a:	0e 94 82 00 	call	0x104	; 0x104 <start_stopwatch>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	82 e5       	ldi	r24, 0x52	; 82
 1a2:	97 e0       	ldi	r25, 0x07	; 7
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x80>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x8a>
 1ae:	00 00       	nop
				_delay_ms(200);
			}
		}

		// Überprüfen, ob Tasten gedrückt sind
		if (!(PINA & (1 << PA1)))
 1b0:	c9 99       	sbic	0x19, 1	; 25
 1b2:	be cf       	rjmp	.-132    	; 0x130 <main+0xc>
 1b4:	2f eb       	ldi	r18, 0xBF	; 191
 1b6:	84 ed       	ldi	r24, 0xD4	; 212
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x96>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0xa0>
 1c4:	00 00       	nop
		{
			_delay_ms(50);
			if (!(PINA & (1 << PA1)))
 1c6:	c9 99       	sbic	0x19, 1	; 25
 1c8:	b3 cf       	rjmp	.-154    	; 0x130 <main+0xc>
			{
				reset_stopwatch();
 1ca:	0e 94 89 00 	call	0x112	; 0x112 <reset_stopwatch>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	82 e5       	ldi	r24, 0x52	; 82
 1d2:	97 e0       	ldi	r25, 0x07	; 7
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0xb0>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0xba>
 1de:	00 00       	nop
 1e0:	a7 cf       	rjmp	.-178    	; 0x130 <main+0xc>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>

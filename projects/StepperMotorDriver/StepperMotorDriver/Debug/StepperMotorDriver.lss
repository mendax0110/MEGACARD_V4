
StepperMotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000516  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000879  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062b  00000000  00000000  00000e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d0  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026c  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 89 02 	jmp	0x512	; 0x512 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <outportbyte>:
#define IC2_PHASE (1 << PB5) // rot
#define IC2_IN0 (1 << PB6) // grau

void outportbyte(uint8_t portValue) 
{
	PORTB = portValue;
  6c:	88 bb       	out	0x18, r24	; 24
  6e:	08 95       	ret

00000070 <initPorts>:
}

void initPorts()
{
	// Konfiguriere Pins am Port B als Ausgänge
	DDRB |= (IC1_IN0 | IC1_PHASE | IC1_IN1 | IC2_IN0 | IC2_PHASE | IC2_IN1);
  70:	87 b3       	in	r24, 0x17	; 23
  72:	87 67       	ori	r24, 0x77	; 119
  74:	87 bb       	out	0x17, r24	; 23
  76:	08 95       	ret

00000078 <main>:
}

int main(void)
{
	initPorts();
  78:	0e 94 38 00 	call	0x70	; 0x70 <initPorts>
	while(1)
	{
		//int i = 0;
		//i++;
		
		for (int i = 1; i <= 10; i++)
  7c:	c1 e0       	ldi	r28, 0x01	; 1
  7e:	d0 e0       	ldi	r29, 0x00	; 0
  80:	eb c0       	rjmp	.+470    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		{
			outportbyte(80);
  82:	80 e5       	ldi	r24, 0x50	; 80
  84:	0e 94 36 00 	call	0x6c	; 0x6c <outportbyte>
			_delay_ms(30 - i);
  88:	6e e1       	ldi	r22, 0x1E	; 30
  8a:	70 e0       	ldi	r23, 0x00	; 0
  8c:	6c 1b       	sub	r22, r28
  8e:	7d 0b       	sbc	r23, r29
  90:	07 2e       	mov	r0, r23
  92:	00 0c       	add	r0, r0
  94:	88 0b       	sbc	r24, r24
  96:	99 0b       	sbc	r25, r25
  98:	0e 94 67 01 	call	0x2ce	; 0x2ce <__floatsisf>
  9c:	4b 01       	movw	r8, r22
  9e:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e8       	ldi	r19, 0x80	; 128
  a4:	4b e3       	ldi	r20, 0x3B	; 59
  a6:	55 e4       	ldi	r21, 0x45	; 69
  a8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__mulsf3>
  ac:	6b 01       	movw	r12, r22
  ae:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	40 e8       	ldi	r20, 0x80	; 128
  b6:	5f e3       	ldi	r21, 0x3F	; 63
  b8:	0e 94 31 01 	call	0x262	; 0x262 <__cmpsf2>
  bc:	88 23       	and	r24, r24
  be:	24 f1       	brlt	.+72     	; 0x108 <main+0x90>
		__ticks = 1;
	else if (__tmp > 65535)
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	3f ef       	ldi	r19, 0xFF	; 255
  c4:	4f e7       	ldi	r20, 0x7F	; 127
  c6:	57 e4       	ldi	r21, 0x47	; 71
  c8:	c7 01       	movw	r24, r14
  ca:	b6 01       	movw	r22, r12
  cc:	0e 94 ef 01 	call	0x3de	; 0x3de <__gesf2>
  d0:	18 16       	cp	r1, r24
  d2:	ac f4       	brge	.+42     	; 0xfe <main+0x86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	40 e2       	ldi	r20, 0x20	; 32
  da:	51 e4       	ldi	r21, 0x41	; 65
  dc:	c5 01       	movw	r24, r10
  de:	b4 01       	movw	r22, r8
  e0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__mulsf3>
  e4:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
  e8:	06 c0       	rjmp	.+12     	; 0xf6 <main+0x7e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x76>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f2:	61 50       	subi	r22, 0x01	; 1
  f4:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	61 15       	cp	r22, r1
  f8:	71 05       	cpc	r23, r1
  fa:	b9 f7       	brne	.-18     	; 0xea <main+0x72>
  fc:	0a c0       	rjmp	.+20     	; 0x112 <main+0x9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  fe:	c7 01       	movw	r24, r14
 100:	b6 01       	movw	r22, r12
 102:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x94>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	cb 01       	movw	r24, r22
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x96>

			outportbyte(05);
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	0e 94 36 00 	call	0x6c	; 0x6c <outportbyte>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	40 e8       	ldi	r20, 0x80	; 128
 11e:	5f e3       	ldi	r21, 0x3F	; 63
 120:	c7 01       	movw	r24, r14
 122:	b6 01       	movw	r22, r12
 124:	0e 94 31 01 	call	0x262	; 0x262 <__cmpsf2>
 128:	88 23       	and	r24, r24
 12a:	24 f1       	brlt	.+72     	; 0x174 <main+0xfc>
		__ticks = 1;
	else if (__tmp > 65535)
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	3f ef       	ldi	r19, 0xFF	; 255
 130:	4f e7       	ldi	r20, 0x7F	; 127
 132:	57 e4       	ldi	r21, 0x47	; 71
 134:	c7 01       	movw	r24, r14
 136:	b6 01       	movw	r22, r12
 138:	0e 94 ef 01 	call	0x3de	; 0x3de <__gesf2>
 13c:	18 16       	cp	r1, r24
 13e:	ac f4       	brge	.+42     	; 0x16a <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e2       	ldi	r20, 0x20	; 32
 146:	51 e4       	ldi	r21, 0x41	; 65
 148:	c5 01       	movw	r24, r10
 14a:	b4 01       	movw	r22, r8
 14c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__mulsf3>
 150:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 154:	06 c0       	rjmp	.+12     	; 0x162 <main+0xea>
 156:	8c e2       	ldi	r24, 0x2C	; 44
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0xe2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15e:	61 50       	subi	r22, 0x01	; 1
 160:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 162:	61 15       	cp	r22, r1
 164:	71 05       	cpc	r23, r1
 166:	b9 f7       	brne	.-18     	; 0x156 <main+0xde>
 168:	0a c0       	rjmp	.+20     	; 0x17e <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 16a:	c7 01       	movw	r24, r14
 16c:	b6 01       	movw	r22, r12
 16e:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 172:	02 c0       	rjmp	.+4      	; 0x178 <main+0x100>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	cb 01       	movw	r24, r22
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0x102>
			_delay_ms(30 - i);

			outportbyte(82);
 17e:	82 e5       	ldi	r24, 0x52	; 82
 180:	0e 94 36 00 	call	0x6c	; 0x6c <outportbyte>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e8       	ldi	r20, 0x80	; 128
 18a:	5f e3       	ldi	r21, 0x3F	; 63
 18c:	c7 01       	movw	r24, r14
 18e:	b6 01       	movw	r22, r12
 190:	0e 94 31 01 	call	0x262	; 0x262 <__cmpsf2>
 194:	88 23       	and	r24, r24
 196:	24 f1       	brlt	.+72     	; 0x1e0 <main+0x168>
		__ticks = 1;
	else if (__tmp > 65535)
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	3f ef       	ldi	r19, 0xFF	; 255
 19c:	4f e7       	ldi	r20, 0x7F	; 127
 19e:	57 e4       	ldi	r21, 0x47	; 71
 1a0:	c7 01       	movw	r24, r14
 1a2:	b6 01       	movw	r22, r12
 1a4:	0e 94 ef 01 	call	0x3de	; 0x3de <__gesf2>
 1a8:	18 16       	cp	r1, r24
 1aa:	ac f4       	brge	.+42     	; 0x1d6 <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	40 e2       	ldi	r20, 0x20	; 32
 1b2:	51 e4       	ldi	r21, 0x41	; 65
 1b4:	c5 01       	movw	r24, r10
 1b6:	b4 01       	movw	r22, r8
 1b8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__mulsf3>
 1bc:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 1c0:	06 c0       	rjmp	.+12     	; 0x1ce <main+0x156>
 1c2:	8c e2       	ldi	r24, 0x2C	; 44
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x14e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ca:	61 50       	subi	r22, 0x01	; 1
 1cc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ce:	61 15       	cp	r22, r1
 1d0:	71 05       	cpc	r23, r1
 1d2:	b9 f7       	brne	.-18     	; 0x1c2 <main+0x14a>
 1d4:	0a c0       	rjmp	.+20     	; 0x1ea <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1d6:	c7 01       	movw	r24, r14
 1d8:	b6 01       	movw	r22, r12
 1da:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <main+0x16c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	cb 01       	movw	r24, r22
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x16e>
			_delay_ms(30 - i);

			outportbyte(37);
 1ea:	85 e2       	ldi	r24, 0x25	; 37
 1ec:	0e 94 36 00 	call	0x6c	; 0x6c <outportbyte>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	40 e8       	ldi	r20, 0x80	; 128
 1f6:	5f e3       	ldi	r21, 0x3F	; 63
 1f8:	c7 01       	movw	r24, r14
 1fa:	b6 01       	movw	r22, r12
 1fc:	0e 94 31 01 	call	0x262	; 0x262 <__cmpsf2>
 200:	88 23       	and	r24, r24
 202:	24 f1       	brlt	.+72     	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
		__ticks = 1;
	else if (__tmp > 65535)
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	3f ef       	ldi	r19, 0xFF	; 255
 208:	4f e7       	ldi	r20, 0x7F	; 127
 20a:	57 e4       	ldi	r21, 0x47	; 71
 20c:	c7 01       	movw	r24, r14
 20e:	b6 01       	movw	r22, r12
 210:	0e 94 ef 01 	call	0x3de	; 0x3de <__gesf2>
 214:	18 16       	cp	r1, r24
 216:	ac f4       	brge	.+42     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e2       	ldi	r20, 0x20	; 32
 21e:	51 e4       	ldi	r21, 0x41	; 65
 220:	c5 01       	movw	r24, r10
 222:	b4 01       	movw	r22, r8
 224:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__mulsf3>
 228:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 22c:	06 c0       	rjmp	.+12     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 22e:	8c e2       	ldi	r24, 0x2C	; 44
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 236:	61 50       	subi	r22, 0x01	; 1
 238:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23a:	61 15       	cp	r22, r1
 23c:	71 05       	cpc	r23, r1
 23e:	b9 f7       	brne	.-18     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 240:	0a c0       	rjmp	.+20     	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 242:	c7 01       	movw	r24, r14
 244:	b6 01       	movw	r22, r12
 246:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	cb 01       	movw	r24, r22
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
	while(1)
	{
		//int i = 0;
		//i++;
		
		for (int i = 1; i <= 10; i++)
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	cb 30       	cpi	r28, 0x0B	; 11
 25a:	d1 05       	cpc	r29, r1
 25c:	0c f4       	brge	.+2      	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 25e:	11 cf       	rjmp	.-478    	; 0x82 <main+0xa>
 260:	0d cf       	rjmp	.-486    	; 0x7c <main+0x4>

00000262 <__cmpsf2>:
 262:	0e 94 a2 01 	call	0x344	; 0x344 <__fp_cmp>
 266:	08 f4       	brcc	.+2      	; 0x26a <__cmpsf2+0x8>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret

0000026c <__fixunssfsi>:
 26c:	0e 94 ce 01 	call	0x39c	; 0x39c <__fp_splitA>
 270:	88 f0       	brcs	.+34     	; 0x294 <__fixunssfsi+0x28>
 272:	9f 57       	subi	r25, 0x7F	; 127
 274:	98 f0       	brcs	.+38     	; 0x29c <__fixunssfsi+0x30>
 276:	b9 2f       	mov	r27, r25
 278:	99 27       	eor	r25, r25
 27a:	b7 51       	subi	r27, 0x17	; 23
 27c:	b0 f0       	brcs	.+44     	; 0x2aa <__fixunssfsi+0x3e>
 27e:	e1 f0       	breq	.+56     	; 0x2b8 <__fixunssfsi+0x4c>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	88 1f       	adc	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	1a f0       	brmi	.+6      	; 0x290 <__fixunssfsi+0x24>
 28a:	ba 95       	dec	r27
 28c:	c9 f7       	brne	.-14     	; 0x280 <__fixunssfsi+0x14>
 28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__fixunssfsi+0x4c>
 290:	b1 30       	cpi	r27, 0x01	; 1
 292:	91 f0       	breq	.+36     	; 0x2b8 <__fixunssfsi+0x4c>
 294:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__fp_zero>
 298:	b1 e0       	ldi	r27, 0x01	; 1
 29a:	08 95       	ret
 29c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__fp_zero>
 2a0:	67 2f       	mov	r22, r23
 2a2:	78 2f       	mov	r23, r24
 2a4:	88 27       	eor	r24, r24
 2a6:	b8 5f       	subi	r27, 0xF8	; 248
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <__fixunssfsi+0x4c>
 2aa:	b9 3f       	cpi	r27, 0xF9	; 249
 2ac:	cc f3       	brlt	.-14     	; 0x2a0 <__fixunssfsi+0x34>
 2ae:	86 95       	lsr	r24
 2b0:	77 95       	ror	r23
 2b2:	67 95       	ror	r22
 2b4:	b3 95       	inc	r27
 2b6:	d9 f7       	brne	.-10     	; 0x2ae <__fixunssfsi+0x42>
 2b8:	3e f4       	brtc	.+14     	; 0x2c8 <__fixunssfsi+0x5c>
 2ba:	90 95       	com	r25
 2bc:	80 95       	com	r24
 2be:	70 95       	com	r23
 2c0:	61 95       	neg	r22
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	8f 4f       	sbci	r24, 0xFF	; 255
 2c6:	9f 4f       	sbci	r25, 0xFF	; 255
 2c8:	08 95       	ret

000002ca <__floatunsisf>:
 2ca:	e8 94       	clt
 2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <__floatsisf+0x12>

000002ce <__floatsisf>:
 2ce:	97 fb       	bst	r25, 7
 2d0:	3e f4       	brtc	.+14     	; 0x2e0 <__floatsisf+0x12>
 2d2:	90 95       	com	r25
 2d4:	80 95       	com	r24
 2d6:	70 95       	com	r23
 2d8:	61 95       	neg	r22
 2da:	7f 4f       	sbci	r23, 0xFF	; 255
 2dc:	8f 4f       	sbci	r24, 0xFF	; 255
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	99 23       	and	r25, r25
 2e2:	a9 f0       	breq	.+42     	; 0x30e <__floatsisf+0x40>
 2e4:	f9 2f       	mov	r31, r25
 2e6:	96 e9       	ldi	r25, 0x96	; 150
 2e8:	bb 27       	eor	r27, r27
 2ea:	93 95       	inc	r25
 2ec:	f6 95       	lsr	r31
 2ee:	87 95       	ror	r24
 2f0:	77 95       	ror	r23
 2f2:	67 95       	ror	r22
 2f4:	b7 95       	ror	r27
 2f6:	f1 11       	cpse	r31, r1
 2f8:	f8 cf       	rjmp	.-16     	; 0x2ea <__floatsisf+0x1c>
 2fa:	fa f4       	brpl	.+62     	; 0x33a <__floatsisf+0x6c>
 2fc:	bb 0f       	add	r27, r27
 2fe:	11 f4       	brne	.+4      	; 0x304 <__floatsisf+0x36>
 300:	60 ff       	sbrs	r22, 0
 302:	1b c0       	rjmp	.+54     	; 0x33a <__floatsisf+0x6c>
 304:	6f 5f       	subi	r22, 0xFF	; 255
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	8f 4f       	sbci	r24, 0xFF	; 255
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	16 c0       	rjmp	.+44     	; 0x33a <__floatsisf+0x6c>
 30e:	88 23       	and	r24, r24
 310:	11 f0       	breq	.+4      	; 0x316 <__floatsisf+0x48>
 312:	96 e9       	ldi	r25, 0x96	; 150
 314:	11 c0       	rjmp	.+34     	; 0x338 <__floatsisf+0x6a>
 316:	77 23       	and	r23, r23
 318:	21 f0       	breq	.+8      	; 0x322 <__floatsisf+0x54>
 31a:	9e e8       	ldi	r25, 0x8E	; 142
 31c:	87 2f       	mov	r24, r23
 31e:	76 2f       	mov	r23, r22
 320:	05 c0       	rjmp	.+10     	; 0x32c <__floatsisf+0x5e>
 322:	66 23       	and	r22, r22
 324:	71 f0       	breq	.+28     	; 0x342 <__floatsisf+0x74>
 326:	96 e8       	ldi	r25, 0x86	; 134
 328:	86 2f       	mov	r24, r22
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	2a f0       	brmi	.+10     	; 0x33a <__floatsisf+0x6c>
 330:	9a 95       	dec	r25
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	da f7       	brpl	.-10     	; 0x330 <__floatsisf+0x62>
 33a:	88 0f       	add	r24, r24
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	97 f9       	bld	r25, 7
 342:	08 95       	ret

00000344 <__fp_cmp>:
 344:	99 0f       	add	r25, r25
 346:	00 08       	sbc	r0, r0
 348:	55 0f       	add	r21, r21
 34a:	aa 0b       	sbc	r26, r26
 34c:	e0 e8       	ldi	r30, 0x80	; 128
 34e:	fe ef       	ldi	r31, 0xFE	; 254
 350:	16 16       	cp	r1, r22
 352:	17 06       	cpc	r1, r23
 354:	e8 07       	cpc	r30, r24
 356:	f9 07       	cpc	r31, r25
 358:	c0 f0       	brcs	.+48     	; 0x38a <__fp_cmp+0x46>
 35a:	12 16       	cp	r1, r18
 35c:	13 06       	cpc	r1, r19
 35e:	e4 07       	cpc	r30, r20
 360:	f5 07       	cpc	r31, r21
 362:	98 f0       	brcs	.+38     	; 0x38a <__fp_cmp+0x46>
 364:	62 1b       	sub	r22, r18
 366:	73 0b       	sbc	r23, r19
 368:	84 0b       	sbc	r24, r20
 36a:	95 0b       	sbc	r25, r21
 36c:	39 f4       	brne	.+14     	; 0x37c <__fp_cmp+0x38>
 36e:	0a 26       	eor	r0, r26
 370:	61 f0       	breq	.+24     	; 0x38a <__fp_cmp+0x46>
 372:	23 2b       	or	r18, r19
 374:	24 2b       	or	r18, r20
 376:	25 2b       	or	r18, r21
 378:	21 f4       	brne	.+8      	; 0x382 <__fp_cmp+0x3e>
 37a:	08 95       	ret
 37c:	0a 26       	eor	r0, r26
 37e:	09 f4       	brne	.+2      	; 0x382 <__fp_cmp+0x3e>
 380:	a1 40       	sbci	r26, 0x01	; 1
 382:	a6 95       	lsr	r26
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	81 1d       	adc	r24, r1
 388:	81 1d       	adc	r24, r1
 38a:	08 95       	ret

0000038c <__fp_split3>:
 38c:	57 fd       	sbrc	r21, 7
 38e:	90 58       	subi	r25, 0x80	; 128
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	59 f0       	breq	.+22     	; 0x3ac <__fp_splitA+0x10>
 396:	5f 3f       	cpi	r21, 0xFF	; 255
 398:	71 f0       	breq	.+28     	; 0x3b6 <__fp_splitA+0x1a>
 39a:	47 95       	ror	r20

0000039c <__fp_splitA>:
 39c:	88 0f       	add	r24, r24
 39e:	97 fb       	bst	r25, 7
 3a0:	99 1f       	adc	r25, r25
 3a2:	61 f0       	breq	.+24     	; 0x3bc <__fp_splitA+0x20>
 3a4:	9f 3f       	cpi	r25, 0xFF	; 255
 3a6:	79 f0       	breq	.+30     	; 0x3c6 <__fp_splitA+0x2a>
 3a8:	87 95       	ror	r24
 3aa:	08 95       	ret
 3ac:	12 16       	cp	r1, r18
 3ae:	13 06       	cpc	r1, r19
 3b0:	14 06       	cpc	r1, r20
 3b2:	55 1f       	adc	r21, r21
 3b4:	f2 cf       	rjmp	.-28     	; 0x39a <__fp_split3+0xe>
 3b6:	46 95       	lsr	r20
 3b8:	f1 df       	rcall	.-30     	; 0x39c <__fp_splitA>
 3ba:	08 c0       	rjmp	.+16     	; 0x3cc <__fp_splitA+0x30>
 3bc:	16 16       	cp	r1, r22
 3be:	17 06       	cpc	r1, r23
 3c0:	18 06       	cpc	r1, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	f1 cf       	rjmp	.-30     	; 0x3a8 <__fp_splitA+0xc>
 3c6:	86 95       	lsr	r24
 3c8:	71 05       	cpc	r23, r1
 3ca:	61 05       	cpc	r22, r1
 3cc:	08 94       	sec
 3ce:	08 95       	ret

000003d0 <__fp_zero>:
 3d0:	e8 94       	clt

000003d2 <__fp_szero>:
 3d2:	bb 27       	eor	r27, r27
 3d4:	66 27       	eor	r22, r22
 3d6:	77 27       	eor	r23, r23
 3d8:	cb 01       	movw	r24, r22
 3da:	97 f9       	bld	r25, 7
 3dc:	08 95       	ret

000003de <__gesf2>:
 3de:	0e 94 a2 01 	call	0x344	; 0x344 <__fp_cmp>
 3e2:	08 f4       	brcc	.+2      	; 0x3e6 <__gesf2+0x8>
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	08 95       	ret

000003e8 <__mulsf3>:
 3e8:	0e 94 07 02 	call	0x40e	; 0x40e <__mulsf3x>
 3ec:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_round>
 3f0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fp_pscA>
 3f4:	38 f0       	brcs	.+14     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3f6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__fp_pscB>
 3fa:	20 f0       	brcs	.+8      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3fc:	95 23       	and	r25, r21
 3fe:	11 f0       	breq	.+4      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 400:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_inf>
 404:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_nan>
 408:	11 24       	eor	r1, r1
 40a:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__fp_szero>

0000040e <__mulsf3x>:
 40e:	0e 94 c6 01 	call	0x38c	; 0x38c <__fp_split3>
 412:	70 f3       	brcs	.-36     	; 0x3f0 <__mulsf3+0x8>

00000414 <__mulsf3_pse>:
 414:	95 9f       	mul	r25, r21
 416:	c1 f3       	breq	.-16     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 418:	95 0f       	add	r25, r21
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	55 1f       	adc	r21, r21
 41e:	62 9f       	mul	r22, r18
 420:	f0 01       	movw	r30, r0
 422:	72 9f       	mul	r23, r18
 424:	bb 27       	eor	r27, r27
 426:	f0 0d       	add	r31, r0
 428:	b1 1d       	adc	r27, r1
 42a:	63 9f       	mul	r22, r19
 42c:	aa 27       	eor	r26, r26
 42e:	f0 0d       	add	r31, r0
 430:	b1 1d       	adc	r27, r1
 432:	aa 1f       	adc	r26, r26
 434:	64 9f       	mul	r22, r20
 436:	66 27       	eor	r22, r22
 438:	b0 0d       	add	r27, r0
 43a:	a1 1d       	adc	r26, r1
 43c:	66 1f       	adc	r22, r22
 43e:	82 9f       	mul	r24, r18
 440:	22 27       	eor	r18, r18
 442:	b0 0d       	add	r27, r0
 444:	a1 1d       	adc	r26, r1
 446:	62 1f       	adc	r22, r18
 448:	73 9f       	mul	r23, r19
 44a:	b0 0d       	add	r27, r0
 44c:	a1 1d       	adc	r26, r1
 44e:	62 1f       	adc	r22, r18
 450:	83 9f       	mul	r24, r19
 452:	a0 0d       	add	r26, r0
 454:	61 1d       	adc	r22, r1
 456:	22 1f       	adc	r18, r18
 458:	74 9f       	mul	r23, r20
 45a:	33 27       	eor	r19, r19
 45c:	a0 0d       	add	r26, r0
 45e:	61 1d       	adc	r22, r1
 460:	23 1f       	adc	r18, r19
 462:	84 9f       	mul	r24, r20
 464:	60 0d       	add	r22, r0
 466:	21 1d       	adc	r18, r1
 468:	82 2f       	mov	r24, r18
 46a:	76 2f       	mov	r23, r22
 46c:	6a 2f       	mov	r22, r26
 46e:	11 24       	eor	r1, r1
 470:	9f 57       	subi	r25, 0x7F	; 127
 472:	50 40       	sbci	r21, 0x00	; 0
 474:	9a f0       	brmi	.+38     	; 0x49c <__stack+0x3d>
 476:	f1 f0       	breq	.+60     	; 0x4b4 <__stack+0x55>
 478:	88 23       	and	r24, r24
 47a:	4a f0       	brmi	.+18     	; 0x48e <__stack+0x2f>
 47c:	ee 0f       	add	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	bb 1f       	adc	r27, r27
 482:	66 1f       	adc	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	91 50       	subi	r25, 0x01	; 1
 48a:	50 40       	sbci	r21, 0x00	; 0
 48c:	a9 f7       	brne	.-22     	; 0x478 <__stack+0x19>
 48e:	9e 3f       	cpi	r25, 0xFE	; 254
 490:	51 05       	cpc	r21, r1
 492:	80 f0       	brcs	.+32     	; 0x4b4 <__stack+0x55>
 494:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_inf>
 498:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__fp_szero>
 49c:	5f 3f       	cpi	r21, 0xFF	; 255
 49e:	e4 f3       	brlt	.-8      	; 0x498 <__stack+0x39>
 4a0:	98 3e       	cpi	r25, 0xE8	; 232
 4a2:	d4 f3       	brlt	.-12     	; 0x498 <__stack+0x39>
 4a4:	86 95       	lsr	r24
 4a6:	77 95       	ror	r23
 4a8:	67 95       	ror	r22
 4aa:	b7 95       	ror	r27
 4ac:	f7 95       	ror	r31
 4ae:	e7 95       	ror	r30
 4b0:	9f 5f       	subi	r25, 0xFF	; 255
 4b2:	c1 f7       	brne	.-16     	; 0x4a4 <__stack+0x45>
 4b4:	fe 2b       	or	r31, r30
 4b6:	88 0f       	add	r24, r24
 4b8:	91 1d       	adc	r25, r1
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	97 f9       	bld	r25, 7
 4c0:	08 95       	ret

000004c2 <__fp_inf>:
 4c2:	97 f9       	bld	r25, 7
 4c4:	9f 67       	ori	r25, 0x7F	; 127
 4c6:	80 e8       	ldi	r24, 0x80	; 128
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	08 95       	ret

000004ce <__fp_nan>:
 4ce:	9f ef       	ldi	r25, 0xFF	; 255
 4d0:	80 ec       	ldi	r24, 0xC0	; 192
 4d2:	08 95       	ret

000004d4 <__fp_pscA>:
 4d4:	00 24       	eor	r0, r0
 4d6:	0a 94       	dec	r0
 4d8:	16 16       	cp	r1, r22
 4da:	17 06       	cpc	r1, r23
 4dc:	18 06       	cpc	r1, r24
 4de:	09 06       	cpc	r0, r25
 4e0:	08 95       	ret

000004e2 <__fp_pscB>:
 4e2:	00 24       	eor	r0, r0
 4e4:	0a 94       	dec	r0
 4e6:	12 16       	cp	r1, r18
 4e8:	13 06       	cpc	r1, r19
 4ea:	14 06       	cpc	r1, r20
 4ec:	05 06       	cpc	r0, r21
 4ee:	08 95       	ret

000004f0 <__fp_round>:
 4f0:	09 2e       	mov	r0, r25
 4f2:	03 94       	inc	r0
 4f4:	00 0c       	add	r0, r0
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__fp_round+0xc>
 4f8:	88 23       	and	r24, r24
 4fa:	52 f0       	brmi	.+20     	; 0x510 <__fp_round+0x20>
 4fc:	bb 0f       	add	r27, r27
 4fe:	40 f4       	brcc	.+16     	; 0x510 <__fp_round+0x20>
 500:	bf 2b       	or	r27, r31
 502:	11 f4       	brne	.+4      	; 0x508 <__fp_round+0x18>
 504:	60 ff       	sbrs	r22, 0
 506:	04 c0       	rjmp	.+8      	; 0x510 <__fp_round+0x20>
 508:	6f 5f       	subi	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	08 95       	ret

00000512 <_exit>:
 512:	f8 94       	cli

00000514 <__stop_program>:
 514:	ff cf       	rjmp	.-2      	; 0x514 <__stop_program>

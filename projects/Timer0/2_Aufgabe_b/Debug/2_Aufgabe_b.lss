
2_Aufgabe_b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000166  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000001fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000616  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026c  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000332  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 00 	call	0xee	; 0xee <main>
  8a:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_19>:

volatile int c = 0;
volatile int Ton = 150;

ISR(TIMER0_COMP_vect)  // fISR=100KHz
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	c++;  // LED PC0 toggle-Mode
  a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  a4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
  ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <init>:

void init()
{
	DDRC |= 0xFF;
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x01;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	85 bb       	out	0x15, r24	; 21
	DDRA &= 0xF0;       // Taster
  ca:	8a b3       	in	r24, 0x1a	; 26
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 0x0F;      // Pullup
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	8f 60       	ori	r24, 0x0F	; 15
  d4:	8b bb       	out	0x1b, r24	; 27

	TCCR0 |= (1 << WGM01) | (1 << COM00) | (1 << CS00);
  d6:	83 b7       	in	r24, 0x33	; 51
  d8:	89 61       	ori	r24, 0x19	; 25
  da:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << WGM00);  // CTC-Mode
  dc:	83 b7       	in	r24, 0x33	; 51
  de:	8f 7b       	andi	r24, 0xBF	; 191
  e0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << OCIE0);   // Overflow Interrupt Enable
  e2:	89 b7       	in	r24, 0x39	; 57
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	89 bf       	out	0x39, r24	; 57
	OCR0 = 119;              // Output Compare Register 12MHz/100KHz --> 120 Takte
  e8:	87 e7       	ldi	r24, 0x77	; 119
  ea:	8c bf       	out	0x3c, r24	; 60
  ec:	08 95       	ret

000000ee <main>:
}

int main(void)
{
	cli();
  ee:	f8 94       	cli
	init();
  f0:	0e 94 60 00 	call	0xc0	; 0xc0 <init>
	sei();
  f4:	78 94       	sei
	while (1)
	{
		if ((PINA & 0x01) == 0)
  f6:	c8 99       	sbic	0x19, 0	; 25
  f8:	08 c0       	rjmp	.+16     	; 0x10a <main+0x1c>
		{      
			if ((PINA & 0x01) == 0)
  fa:	c8 99       	sbic	0x19, 0	; 25
  fc:	06 c0       	rjmp	.+12     	; 0x10a <main+0x1c>
			{
				Ton = 100;  // Set TH (Ton) to 1ms
  fe:	84 e6       	ldi	r24, 0x64	; 100
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 106:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}

		if ((PINA & 0x02) == 0)
 10a:	c9 99       	sbic	0x19, 1	; 25
 10c:	08 c0       	rjmp	.+16     	; 0x11e <main+0x30>
		{
			if ((PINA & 0x02) == 0)
 10e:	c9 99       	sbic	0x19, 1	; 25
 110:	06 c0       	rjmp	.+12     	; 0x11e <main+0x30>
			{
				Ton = 200;  // Set TH (Ton) to 2ms
 112:	88 ec       	ldi	r24, 0xC8	; 200
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}

		if (c == 0)
 11e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 122:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 126:	89 2b       	or	r24, r25
 128:	11 f4       	brne	.+4      	; 0x12e <main+0x40>
		{
			PORTC = 0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	85 bb       	out	0x15, r24	; 21
		}
		if (c == Ton)
 12e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 132:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13e:	28 17       	cp	r18, r24
 140:	39 07       	cpc	r19, r25
 142:	09 f4       	brne	.+2      	; 0x146 <main+0x58>
		{
			PORTC = 0x00;
 144:	15 ba       	out	0x15, r1	; 21
		}
		if (c == 2000)
 146:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 14a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 14e:	80 3d       	cpi	r24, 0xD0	; 208
 150:	97 40       	sbci	r25, 0x07	; 7
 152:	89 f6       	brne	.-94     	; 0xf6 <main+0x8>
		{
			PORTC = 0x01;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	85 bb       	out	0x15, r24	; 21
			c = 0;
 158:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 15c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 160:	ca cf       	rjmp	.-108    	; 0xf6 <main+0x8>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>

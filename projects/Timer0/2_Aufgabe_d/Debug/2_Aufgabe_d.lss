
2_Aufgabe_d.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a4  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035b  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000393  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000183  00000000  00000000  0000182f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  74:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
volatile int Ton = 0;
volatile int s2_pressed = 0;
volatile int s3_pressed = 0;

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
	c++; // LED PC0 toggle-Mode
  8e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <c>
  92:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <c+0x1>
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <c+0x1>
  9c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <c>

	if (c == 2000)
  a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <c>
  a4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <c+0x1>
  a8:	80 3d       	cpi	r24, 0xD0	; 208
  aa:	97 40       	sbci	r25, 0x07	; 7
  ac:	31 f4       	brne	.+12     	; 0xba <__vector_19+0x3e>
	{
		PORTC = 0x01;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	85 bb       	out	0x15, r24	; 21
		c = 0;
  b2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <c+0x1>
  b6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <c>
	}

	if (c == Ton)
  ba:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <c>
  be:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <c+0x1>
  c2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Ton>
  c6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Ton+0x1>
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	09 f4       	brne	.+2      	; 0xd2 <__vector_19+0x56>
	{
		PORTC = 0x00;
  d0:	15 ba       	out	0x15, r1	; 21
	}
}
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	3f 91       	pop	r19
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <init>:

void init()
{
	DDRC |= 0xFF;
  e4:	84 b3       	in	r24, 0x14	; 20
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x01;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	85 bb       	out	0x15, r24	; 21
	DDRA &= 0xF0;       // Taster
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 0x0F;      // Pullup
  f4:	8b b3       	in	r24, 0x1b	; 27
  f6:	8f 60       	ori	r24, 0x0F	; 15
  f8:	8b bb       	out	0x1b, r24	; 27

	// for S2and S
	DDRA &= ~((1 << PA2) | (1 << PA3));
  fa:	8a b3       	in	r24, 0x1a	; 26
  fc:	83 7f       	andi	r24, 0xF3	; 243
  fe:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA2) | (1 << PA3));
 100:	8b b3       	in	r24, 0x1b	; 27
 102:	8c 60       	ori	r24, 0x0C	; 12
 104:	8b bb       	out	0x1b, r24	; 27

	TCCR0 |= (1 << WGM01) | (1 << COM00) | (1 << CS00);
 106:	83 b7       	in	r24, 0x33	; 51
 108:	89 61       	ori	r24, 0x19	; 25
 10a:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << WGM00); // CTC-Mode
 10c:	83 b7       	in	r24, 0x33	; 51
 10e:	8f 7b       	andi	r24, 0xBF	; 191
 110:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << OCIE0);  // Overflow Interrupt Enable
 112:	89 b7       	in	r24, 0x39	; 57
 114:	82 60       	ori	r24, 0x02	; 2
 116:	89 bf       	out	0x39, r24	; 57
	OCR0 = 119;             // Output Compare Register 12MHz/100KHz --> 120 Takte
 118:	87 e7       	ldi	r24, 0x77	; 119
 11a:	8c bf       	out	0x3c, r24	; 60
 11c:	08 95       	ret

0000011e <main>:
}

int main(void)
{
	cli();
 11e:	f8 94       	cli
	init();
 120:	0e 94 72 00 	call	0xe4	; 0xe4 <init>
	sei();
 124:	78 94       	sei
	while (1)
	{
		if ((PINA & (1 << PA2)) == 0)
 126:	ca 99       	sbic	0x19, 2	; 25
 128:	17 c0       	rjmp	.+46     	; 0x158 <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e5       	ldi	r24, 0x5F	; 95
 12c:	9a ee       	ldi	r25, 0xEA	; 234
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x10>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x16>
 134:	00 00       	nop
		{
			_delay_ms(20);
			if ((PINA & (1 << PA2)) == 0)
 136:	ca 99       	sbic	0x19, 2	; 25
 138:	13 c0       	rjmp	.+38     	; 0x160 <main+0x42>
			{
				s2_pressed = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <s2_pressed+0x1>
 142:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <s2_pressed>
				while ((PINA & (1 << PA2)) == 0)
 146:	ca 9b       	sbis	0x19, 2	; 25
 148:	fe cf       	rjmp	.-4      	; 0x146 <main+0x28>
 14a:	8f e5       	ldi	r24, 0x5F	; 95
 14c:	9a ee       	ldi	r25, 0xEA	; 234
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x30>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x36>
 154:	00 00       	nop
 156:	04 c0       	rjmp	.+8      	; 0x160 <main+0x42>
				_delay_ms(20);
			}
		}
		else
		{
			s2_pressed = 0;
 158:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <s2_pressed+0x1>
 15c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <s2_pressed>
		}

		if ((PINA & (1 << PA3)) == 0)
 160:	cb 99       	sbic	0x19, 3	; 25
 162:	17 c0       	rjmp	.+46     	; 0x192 <main+0x74>
 164:	8f e5       	ldi	r24, 0x5F	; 95
 166:	9a ee       	ldi	r25, 0xEA	; 234
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x4a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x50>
 16e:	00 00       	nop
		{
			_delay_ms(20);
			if ((PINA & (1 << PA3)) == 0)
 170:	cb 99       	sbic	0x19, 3	; 25
 172:	13 c0       	rjmp	.+38     	; 0x19a <main+0x7c>
			{
				s3_pressed = 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 17c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				while ((PINA & (1 << PA3)) == 0)
 180:	cb 9b       	sbis	0x19, 3	; 25
 182:	fe cf       	rjmp	.-4      	; 0x180 <main+0x62>
 184:	8f e5       	ldi	r24, 0x5F	; 95
 186:	9a ee       	ldi	r25, 0xEA	; 234
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x6a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x70>
 18e:	00 00       	nop
 190:	04 c0       	rjmp	.+8      	; 0x19a <main+0x7c>
				_delay_ms(20);
			}
		}
		else
		{
			s3_pressed = 0;
 192:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 196:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}

		if (s2_pressed && Ton < 200)
 19a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <s2_pressed>
 19e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <s2_pressed+0x1>
 1a2:	89 2b       	or	r24, r25
 1a4:	81 f0       	breq	.+32     	; 0x1c6 <main+0xa8>
 1a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Ton>
 1aa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Ton+0x1>
 1ae:	88 3c       	cpi	r24, 0xC8	; 200
 1b0:	91 05       	cpc	r25, r1
 1b2:	4c f4       	brge	.+18     	; 0x1c6 <main+0xa8>
		{
			Ton += 10; // Increase Ton by 10us (max. 2ms)
 1b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Ton>
 1b8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Ton+0x1>
 1bc:	0a 96       	adiw	r24, 0x0a	; 10
 1be:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Ton+0x1>
 1c2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Ton>
		}

		if (s3_pressed && Ton > 100)
 1c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ca:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ce:	89 2b       	or	r24, r25
 1d0:	81 f0       	breq	.+32     	; 0x1f2 <main+0xd4>
 1d2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Ton>
 1d6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Ton+0x1>
 1da:	85 36       	cpi	r24, 0x65	; 101
 1dc:	91 05       	cpc	r25, r1
 1de:	4c f0       	brlt	.+18     	; 0x1f2 <main+0xd4>
		{
			Ton -= 10; // Decrease Ton by 10us (min. 1ms)
 1e0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Ton>
 1e4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Ton+0x1>
 1e8:	0a 97       	sbiw	r24, 0x0a	; 10
 1ea:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Ton+0x1>
 1ee:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Ton>
 1f2:	8f e5       	ldi	r24, 0x5F	; 95
 1f4:	9a ee       	ldi	r25, 0xEA	; 234
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0xd8>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xde>
 1fc:	00 00       	nop
 1fe:	93 cf       	rjmp	.-218    	; 0x126 <main+0x8>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>

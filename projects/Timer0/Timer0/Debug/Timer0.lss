
Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000016a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000601  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000587  00000000  00000000  00000809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000129  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000317  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001289  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 75 00 	call	0xea	; 0xea <main>
  74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <avr/interrupt.h>
#include <util/delay.h>


ISR(TIMER0_OVF_vect)	//fISR= F_CPU -> 12000000HZ
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	static unsigned int cnt=0;
	cnt++;
  8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  90:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  94:	01 96       	adiw	r24, 0x01	; 1
	if (cnt>=4687)		//f= 12Mhz/(TOP*cnt) = 12MHz/(256*4687)= ca. 10Hz; toggelt bei 10Hz, Periodendauer 5Hz
  96:	8f 34       	cpi	r24, 0x4F	; 79
  98:	22 e1       	ldi	r18, 0x12	; 18
  9a:	92 07       	cpc	r25, r18
  9c:	28 f4       	brcc	.+10     	; 0xa8 <__vector_9+0x2c>


ISR(TIMER0_OVF_vect)	//fISR= F_CPU -> 12000000HZ
{
	static unsigned int cnt=0;
	cnt++;
  9e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a6:	08 c0       	rjmp	.+16     	; 0xb8 <__vector_9+0x3c>
	if (cnt>=4687)		//f= 12Mhz/(TOP*cnt) = 12MHz/(256*4687)= ca. 10Hz; toggelt bei 10Hz, Periodendauer 5Hz
	{
		cnt=0;	
  a8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC^=0x01;		
  b0:	95 b3       	in	r25, 0x15	; 21
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	89 27       	eor	r24, r25
  b6:	85 bb       	out	0x15, r24	; 21
	}
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	2f 91       	pop	r18
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <init>:


void init()
{
	DDRC|=0xFF;		//LEDs
  c8:	84 b3       	in	r24, 0x14	; 20
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
  ce:	15 ba       	out	0x15, r1	; 21
	DDRA&=0xF0;		//Taster
  d0:	8a b3       	in	r24, 0x1a	; 26
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	8a bb       	out	0x1a, r24	; 26
	PORTA|=0x0F;	//Pullup
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8f 60       	ori	r24, 0x0F	; 15
  da:	8b bb       	out	0x1b, r24	; 27
	
	TCCR0|=1<<CS00;					
  dc:	83 b7       	in	r24, 0x33	; 51
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	83 bf       	out	0x33, r24	; 51
	TIMSK|=1<<TOIE0;	
  e2:	89 b7       	in	r24, 0x39	; 57
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	89 bf       	out	0x39, r24	; 57
  e8:	08 95       	ret

000000ea <main>:
}

int main(void)
{
	init();
  ea:	0e 94 64 00 	call	0xc8	; 0xc8 <init>
	sei();		
  ee:	78 94       	sei
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x6>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>


1_Aufgabe f.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000673  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000284  00000000  00000000  00000e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_19>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

ISR(TIMER0_COMP_vect) // Overflow durch vect ersetzen -> CTC Mode
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTC ^= 0x01;
  7a:	95 b3       	in	r25, 0x15	; 21
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	89 27       	eor	r24, r25
  80:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	88 e2       	ldi	r24, 0x28	; 40
  84:	8a 95       	dec	r24
  86:	f1 f7       	brne	.-4      	; 0x84 <__vector_19+0x18>
	_delay_us(10); // Verzögerung von 10 Mikrosekunden
}
  88:	9f 91       	pop	r25
  8a:	8f 91       	pop	r24
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <init>:

void init()
{
	DDRC |= 0xFF; // LEDs
  96:	84 b3       	in	r24, 0x14	; 20
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0;
  9c:	15 ba       	out	0x15, r1	; 21
	DDRA &= 0xF0; // Taster
  9e:	8a b3       	in	r24, 0x1a	; 26
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 0x0F; // Pull-up
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	8f 60       	ori	r24, 0x0F	; 15
  a8:	8b bb       	out	0x1b, r24	; 27

	TCCR0 |= 1 << CS00 | 1 << WGM01;
  aa:	83 b7       	in	r24, 0x33	; 51
  ac:	89 60       	ori	r24, 0x09	; 9
  ae:	83 bf       	out	0x33, r24	; 51

	TIMSK |= 1 << OCIE0; // Verwende OCIE0 für den Compare Match Interrupt
  b0:	89 b7       	in	r24, 0x39	; 57
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	89 bf       	out	0x39, r24	; 57
	OCR0 = 120 - 1; // Grenze setzen durch OCR0
  b6:	87 e7       	ldi	r24, 0x77	; 119
  b8:	8c bf       	out	0x3c, r24	; 60
  ba:	08 95       	ret

000000bc <main>:
}

int main(void)
{
	init();
  bc:	0e 94 4b 00 	call	0x96	; 0x96 <init>
	sei();
  c0:	78 94       	sei
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x6>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

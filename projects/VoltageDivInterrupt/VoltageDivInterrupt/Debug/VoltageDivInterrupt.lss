
VoltageDivInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000150  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000647  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000585  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000224  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038d  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_14>:

// pin change interrupt
ISR(PCINT0_vect)
{
    interruptFlag = 1;
}
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	86 b9       	out	0x06, r24	; 6
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <main>:

int main(void)
{
	// set up the ADC
    ADMUX = (1 << REFS0)|(0 << MUX0); // Select ADC0 as input, Vcc as reference
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0); // Enable ADC, prescaler = 128
  9e:	87 e8       	ldi	r24, 0x87	; 135
  a0:	86 b9       	out	0x06, r24	; 6

    // enable global interrupts
    sei();
  a2:	78 94       	sei
    // 
    MCUCR |= (1 << ISC01)|(1 << ISC00); // set INT0 to trigger on rising edge
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	85 bf       	out	0x35, r24	; 53
    PORTD |= (1 << PD0); // enable pull-up resistor on pin 0
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	82 bb       	out	0x12, r24	; 18
	
    // set up the output pin
    DDRB |= (1 << PB0); // set pin 0 of port B as output
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	87 bb       	out	0x17, r24	; 23

    while(1)
    {
        if(interruptFlag)
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	88 23       	and	r24, r24
  bc:	e1 f3       	breq	.-8      	; 0xb6 <main+0x1c>
        {
            interruptFlag = 0;
  be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

            // perform voltage calculations
            float voltge = (float) ADC * 5.0 / 1024.0;
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	95 b1       	in	r25, 0x05	; 5
            uint8_t dutyCycle = (uint8_t) (voltage * 255.0 / 5.0);
  c6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <voltage>
  ca:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <voltage+0x1>
  ce:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <voltage+0x2>
  d2:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <voltage+0x3>
  d6:	ef cf       	rjmp	.-34     	; 0xb6 <main+0x1c>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>


TempMonitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000070c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000070c  000007a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006c  0080006c  000007ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001307  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000929  00000000  00000000  00001bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090e  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00002e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cb  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fd5  00000000  00000000  00003593  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  8a:	0c 94 84 03 	jmp	0x708	; 0x708 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 4f 03 	call	0x69e	; 0x69e <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <initADC>:

volatile uint8_t ADC_value = 0;

void initADC()
{
	ADMUX |= (1 << REFS0);
 1e6:	87 b1       	in	r24, 0x07	; 7
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	87 b9       	out	0x07, r24	; 7
	ADMUX &= ~(1 << MUX0) & ~(1 << MUX1) & ~(1 << MUX2) & ~(1 << MUX3); // ADC0 input
 1ec:	87 b1       	in	r24, 0x07	; 7
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 1f2:	86 b1       	in	r24, 0x06	; 6
 1f4:	87 68       	ori	r24, 0x87	; 135
 1f6:	86 b9       	out	0x06, r24	; 6
 1f8:	08 95       	ret

000001fa <initPorts>:
}

void initPorts()
{
	DDRB |= (1 << PB3);
 1fa:	87 b3       	in	r24, 0x17	; 23
 1fc:	88 60       	ori	r24, 0x08	; 8
 1fe:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	84 bb       	out	0x14, r24	; 20
	PORTC &= 0x00;
 204:	85 b3       	in	r24, 0x15	; 21
 206:	15 ba       	out	0x15, r1	; 21
 208:	08 95       	ret

0000020a <initTimer1>:
}

void initTimer1()
{
	TCCR1A |= (1 << COM1A1)|(1 << WGM11);
 20a:	8f b5       	in	r24, 0x2f	; 47
 20c:	82 68       	ori	r24, 0x82	; 130
 20e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
 210:	8e b5       	in	r24, 0x2e	; 46
 212:	88 61       	ori	r24, 0x18	; 24
 214:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 0xFF;
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	97 bd       	out	0x27, r25	; 39
 21c:	86 bd       	out	0x26, r24	; 38
 21e:	08 95       	ret

00000220 <startConversation>:
}

void startConversation()
{
	ADCSRA |= (1 << ADSC);
 220:	86 b1       	in	r24, 0x06	; 6
 222:	80 64       	ori	r24, 0x40	; 64
 224:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1 << ADSC));
 226:	36 99       	sbic	0x06, 6	; 6
 228:	fe cf       	rjmp	.-4      	; 0x226 <startConversation+0x6>
}
 22a:	08 95       	ret

0000022c <main>:

int main(void)
{
	initPorts();
 22c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <initPorts>
	initADC();
 230:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <initADC>
	initTimer1();
 234:	0e 94 05 01 	call	0x20a	; 0x20a <initTimer1>
	lcd_init();
 238:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	
	while(1)
	{
		startConversation();
 23c:	0e 94 10 01 	call	0x220	; 0x220 <startConversation>
		ADC_value = ADCL;
 240:	84 b1       	in	r24, 0x04	; 4
 242:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		ADC_value |= (ADCH << 8);
 246:	85 b1       	in	r24, 0x05	; 5
 248:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 24c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		uint16_t temp_adc = ADC_value;
 250:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>

		uint8_t temp = (temp_adc * 100) / 1023;
 254:	24 e6       	ldi	r18, 0x64	; 100
 256:	82 9f       	mul	r24, r18
 258:	c0 01       	movw	r24, r0
 25a:	11 24       	eor	r1, r1
 25c:	6f ef       	ldi	r22, 0xFF	; 255
 25e:	73 e0       	ldi	r23, 0x03	; 3
 260:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodhi4>
 264:	eb 01       	movw	r28, r22

		lcd_pos(0,0);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
		printf("TEMP: %d C ", temp);
 26e:	ce 01       	movw	r24, r28
 270:	99 27       	eor	r25, r25
 272:	9f 93       	push	r25
 274:	8f 93       	push	r24
 276:	80 e6       	ldi	r24, 0x60	; 96
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9f 93       	push	r25
 27c:	8f 93       	push	r24
 27e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <tfp_printf>

		if (temp < 25) 
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	c9 31       	cpi	r28, 0x19	; 25
 28c:	20 f4       	brcc	.+8      	; 0x296 <main+0x6a>
		{
			PORTC |= (1 << PC2) | (1 << PC4);
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	84 61       	ori	r24, 0x14	; 20
 292:	85 bb       	out	0x15, r24	; 21
 294:	d3 cf       	rjmp	.-90     	; 0x23c <main+0x10>
		} 
		else if (temp >= 25 && temp < 50) 
 296:	c9 51       	subi	r28, 0x19	; 25
 298:	c9 31       	cpi	r28, 0x19	; 25
 29a:	20 f4       	brcc	.+8      	; 0x2a4 <main+0x78>
		{
			PORTC |= (1 << PC1);
 29c:	85 b3       	in	r24, 0x15	; 21
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	85 bb       	out	0x15, r24	; 21
 2a2:	cc cf       	rjmp	.-104    	; 0x23c <main+0x10>
		} 
		else 
		{
			PORTC |= (1 << PC0);
 2a4:	85 b3       	in	r24, 0x15	; 21
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	85 bb       	out	0x15, r24	; 21
 2aa:	c8 cf       	rjmp	.-112    	; 0x23c <main+0x10>

000002ac <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 2ac:	8f 92       	push	r8
 2ae:	9f 92       	push	r9
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	c8 2f       	mov	r28, r24
 2c6:	d9 2f       	mov	r29, r25
 2c8:	8b 01       	movw	r16, r22
 2ca:	6a 01       	movw	r12, r20
 2cc:	79 01       	movw	r14, r18
 2ce:	e1 e0       	ldi	r30, 0x01	; 1
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <ui2a+0x38>
 2d4:	cf 01       	movw	r24, r30
 2d6:	80 9f       	mul	r24, r16
 2d8:	f0 01       	movw	r30, r0
 2da:	81 9f       	mul	r24, r17
 2dc:	f0 0d       	add	r31, r0
 2de:	90 9f       	mul	r25, r16
 2e0:	f0 0d       	add	r31, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	8c 2f       	mov	r24, r28
 2e6:	9d 2f       	mov	r25, r29
 2e8:	bf 01       	movw	r22, r30
 2ea:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodhi4>
 2ee:	60 17       	cp	r22, r16
 2f0:	71 07       	cpc	r23, r17
 2f2:	80 f7       	brcc	.-32     	; 0x2d4 <ui2a+0x28>
 2f4:	a1 2c       	mov	r10, r1
 2f6:	b1 2c       	mov	r11, r1
 2f8:	2c c0       	rjmp	.+88     	; 0x352 <ui2a+0xa6>
 2fa:	8c 2f       	mov	r24, r28
 2fc:	9d 2f       	mov	r25, r29
 2fe:	bf 01       	movw	r22, r30
 300:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodhi4>
 304:	36 2f       	mov	r19, r22
 306:	86 2e       	mov	r8, r22
 308:	97 2e       	mov	r9, r23
 30a:	c8 2f       	mov	r28, r24
 30c:	d9 2f       	mov	r29, r25
 30e:	cf 01       	movw	r24, r30
 310:	b8 01       	movw	r22, r16
 312:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodhi4>
 316:	fb 01       	movw	r30, r22
 318:	a1 14       	cp	r10, r1
 31a:	b1 04       	cpc	r11, r1
 31c:	29 f4       	brne	.+10     	; 0x328 <ui2a+0x7c>
 31e:	18 14       	cp	r1, r8
 320:	19 04       	cpc	r1, r9
 322:	14 f0       	brlt	.+4      	; 0x328 <ui2a+0x7c>
 324:	30 97       	sbiw	r30, 0x00	; 0
 326:	a9 f4       	brne	.+42     	; 0x352 <ui2a+0xa6>
 328:	c7 01       	movw	r24, r14
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	aa e0       	ldi	r26, 0x0A	; 10
 32e:	8a 16       	cp	r8, r26
 330:	91 04       	cpc	r9, r1
 332:	2c f0       	brlt	.+10     	; 0x33e <ui2a+0x92>
 334:	c1 14       	cp	r12, r1
 336:	d1 04       	cpc	r13, r1
 338:	21 f0       	breq	.+8      	; 0x342 <ui2a+0x96>
 33a:	27 e3       	ldi	r18, 0x37	; 55
 33c:	03 c0       	rjmp	.+6      	; 0x344 <ui2a+0x98>
 33e:	20 e3       	ldi	r18, 0x30	; 48
 340:	01 c0       	rjmp	.+2      	; 0x344 <ui2a+0x98>
 342:	27 e5       	ldi	r18, 0x57	; 87
 344:	32 0f       	add	r19, r18
 346:	d7 01       	movw	r26, r14
 348:	3c 93       	st	X, r19
 34a:	bf ef       	ldi	r27, 0xFF	; 255
 34c:	ab 1a       	sub	r10, r27
 34e:	bb 0a       	sbc	r11, r27
 350:	7c 01       	movw	r14, r24
 352:	30 97       	sbiw	r30, 0x00	; 0
 354:	91 f6       	brne	.-92     	; 0x2fa <ui2a+0x4e>
 356:	f7 01       	movw	r30, r14
 358:	10 82       	st	Z, r1
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	af 90       	pop	r10
 36e:	9f 90       	pop	r9
 370:	8f 90       	pop	r8
 372:	08 95       	ret

00000374 <i2a>:
 374:	9b 01       	movw	r18, r22
 376:	99 23       	and	r25, r25
 378:	44 f4       	brge	.+16     	; 0x38a <i2a+0x16>
 37a:	91 95       	neg	r25
 37c:	81 95       	neg	r24
 37e:	91 09       	sbc	r25, r1
 380:	4d e2       	ldi	r20, 0x2D	; 45
 382:	fb 01       	movw	r30, r22
 384:	40 83       	st	Z, r20
 386:	2f 5f       	subi	r18, 0xFF	; 255
 388:	3f 4f       	sbci	r19, 0xFF	; 255
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	6a e0       	ldi	r22, 0x0A	; 10
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	0e 94 56 01 	call	0x2ac	; 0x2ac <ui2a>
 396:	08 95       	ret

00000398 <a2d>:
 398:	90 ed       	ldi	r25, 0xD0	; 208
 39a:	98 0f       	add	r25, r24
 39c:	9a 30       	cpi	r25, 0x0A	; 10
 39e:	18 f4       	brcc	.+6      	; 0x3a6 <a2d+0xe>
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	c0 97       	sbiw	r24, 0x30	; 48
 3a4:	08 95       	ret
 3a6:	9f e9       	ldi	r25, 0x9F	; 159
 3a8:	98 0f       	add	r25, r24
 3aa:	96 30       	cpi	r25, 0x06	; 6
 3ac:	20 f4       	brcc	.+8      	; 0x3b6 <a2d+0x1e>
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	87 55       	subi	r24, 0x57	; 87
 3b2:	91 09       	sbc	r25, r1
 3b4:	08 95       	ret
 3b6:	9f eb       	ldi	r25, 0xBF	; 191
 3b8:	98 0f       	add	r25, r24
 3ba:	96 30       	cpi	r25, 0x06	; 6
 3bc:	18 f4       	brcc	.+6      	; 0x3c4 <a2d+0x2c>
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	c7 97       	sbiw	r24, 0x37	; 55
 3c2:	08 95       	ret
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	9f ef       	ldi	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <a2i>:
 3ca:	9f 92       	push	r9
 3cc:	af 92       	push	r10
 3ce:	bf 92       	push	r11
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	98 2e       	mov	r9, r24
 3e2:	5b 01       	movw	r10, r22
 3e4:	7a 01       	movw	r14, r20
 3e6:	69 01       	movw	r12, r18
 3e8:	fb 01       	movw	r30, r22
 3ea:	c0 81       	ld	r28, Z
 3ec:	d1 81       	ldd	r29, Z+1	; 0x01
 3ee:	00 e0       	ldi	r16, 0x00	; 0
 3f0:	10 e0       	ldi	r17, 0x00	; 0
 3f2:	0f c0       	rjmp	.+30     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 3f4:	e8 16       	cp	r14, r24
 3f6:	f9 06       	cpc	r15, r25
 3f8:	8c f0       	brlt	.+34     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
 3fa:	0e 9d       	mul	r16, r14
 3fc:	90 01       	movw	r18, r0
 3fe:	0f 9d       	mul	r16, r15
 400:	30 0d       	add	r19, r0
 402:	1e 9d       	mul	r17, r14
 404:	30 0d       	add	r19, r0
 406:	11 24       	eor	r1, r1
 408:	8c 01       	movw	r16, r24
 40a:	02 0f       	add	r16, r18
 40c:	13 1f       	adc	r17, r19
 40e:	98 80       	ld	r9, Y
 410:	21 96       	adiw	r28, 0x01	; 1
 412:	89 2d       	mov	r24, r9
 414:	0e 94 cc 01 	call	0x398	; 0x398 <a2d>
 418:	99 23       	and	r25, r25
 41a:	64 f7       	brge	.-40     	; 0x3f4 <a2i+0x2a>
 41c:	f5 01       	movw	r30, r10
 41e:	d1 83       	std	Z+1, r29	; 0x01
 420:	c0 83       	st	Z, r28
 422:	f6 01       	movw	r30, r12
 424:	11 83       	std	Z+1, r17	; 0x01
 426:	00 83       	st	Z, r16
 428:	89 2d       	mov	r24, r9
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	cf 90       	pop	r12
 43a:	bf 90       	pop	r11
 43c:	af 90       	pop	r10
 43e:	9f 90       	pop	r9
 440:	08 95       	ret

00000442 <putchw>:
 442:	bf 92       	push	r11
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	6c 01       	movw	r12, r24
 456:	7b 01       	movw	r14, r22
 458:	e8 01       	movw	r28, r16
 45a:	22 23       	and	r18, r18
 45c:	29 f0       	breq	.+10     	; 0x468 <__stack+0x9>
 45e:	0f 2e       	mov	r0, r31
 460:	f0 e3       	ldi	r31, 0x30	; 48
 462:	bf 2e       	mov	r11, r31
 464:	f0 2d       	mov	r31, r0
 466:	03 c0       	rjmp	.+6      	; 0x46e <__stack+0xf>
 468:	68 94       	set
 46a:	bb 24       	eor	r11, r11
 46c:	b5 f8       	bld	r11, 5
 46e:	fe 01       	movw	r30, r28
 470:	03 c0       	rjmp	.+6      	; 0x478 <__stack+0x19>
 472:	41 50       	subi	r20, 0x01	; 1
 474:	51 09       	sbc	r21, r1
 476:	f9 01       	movw	r30, r18
 478:	9f 01       	movw	r18, r30
 47a:	2f 5f       	subi	r18, 0xFF	; 255
 47c:	3f 4f       	sbci	r19, 0xFF	; 255
 47e:	80 81       	ld	r24, Z
 480:	88 23       	and	r24, r24
 482:	49 f0       	breq	.+18     	; 0x496 <__stack+0x37>
 484:	14 16       	cp	r1, r20
 486:	15 06       	cpc	r1, r21
 488:	a4 f3       	brlt	.-24     	; 0x472 <__stack+0x13>
 48a:	05 c0       	rjmp	.+10     	; 0x496 <__stack+0x37>
 48c:	6b 2d       	mov	r22, r11
 48e:	c6 01       	movw	r24, r12
 490:	f7 01       	movw	r30, r14
 492:	09 95       	icall
 494:	a8 01       	movw	r20, r16
 496:	8a 01       	movw	r16, r20
 498:	01 50       	subi	r16, 0x01	; 1
 49a:	11 09       	sbc	r17, r1
 49c:	14 16       	cp	r1, r20
 49e:	15 06       	cpc	r1, r21
 4a0:	ac f3       	brlt	.-22     	; 0x48c <__stack+0x2d>
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <__stack+0x4d>
 4a4:	c6 01       	movw	r24, r12
 4a6:	f7 01       	movw	r30, r14
 4a8:	09 95       	icall
 4aa:	e8 01       	movw	r28, r16
 4ac:	8e 01       	movw	r16, r28
 4ae:	0f 5f       	subi	r16, 0xFF	; 255
 4b0:	1f 4f       	sbci	r17, 0xFF	; 255
 4b2:	68 81       	ld	r22, Y
 4b4:	61 11       	cpse	r22, r1
 4b6:	f6 cf       	rjmp	.-20     	; 0x4a4 <__stack+0x45>
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	ff 90       	pop	r15
 4c2:	ef 90       	pop	r14
 4c4:	df 90       	pop	r13
 4c6:	cf 90       	pop	r12
 4c8:	bf 90       	pop	r11
 4ca:	08 95       	ret

000004cc <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
 4cc:	9f 92       	push	r9
 4ce:	af 92       	push	r10
 4d0:	bf 92       	push	r11
 4d2:	cf 92       	push	r12
 4d4:	df 92       	push	r13
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	60 97       	sbiw	r28, 0x10	; 16
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	6c 01       	movw	r12, r24
 4f4:	7b 01       	movw	r14, r22
 4f6:	58 8b       	std	Y+16, r21	; 0x10
 4f8:	4f 87       	std	Y+15, r20	; 0x0f
 4fa:	89 01       	movw	r16, r18
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 4fc:	b5 c0       	rjmp	.+362    	; 0x668 <tfp_format+0x19c>
		if (ch!='%') 
 4fe:	65 32       	cpi	r22, 0x25	; 37
 500:	21 f0       	breq	.+8      	; 0x50a <tfp_format+0x3e>
			putf(putp,ch);
 502:	c6 01       	movw	r24, r12
 504:	f7 01       	movw	r30, r14
 506:	09 95       	icall
 508:	af c0       	rjmp	.+350    	; 0x668 <tfp_format+0x19c>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
 50a:	1e 86       	std	Y+14, r1	; 0x0e
 50c:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 50e:	9d 01       	movw	r18, r26
 510:	2f 5f       	subi	r18, 0xFF	; 255
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	38 8b       	std	Y+16, r19	; 0x10
 516:	2f 87       	std	Y+15, r18	; 0x0f
 518:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 51a:	80 33       	cpi	r24, 0x30	; 48
 51c:	49 f4       	brne	.+18     	; 0x530 <tfp_format+0x64>
				ch=*(fmt++);
 51e:	2f 5f       	subi	r18, 0xFF	; 255
 520:	3f 4f       	sbci	r19, 0xFF	; 255
 522:	38 8b       	std	Y+16, r19	; 0x10
 524:	2f 87       	std	Y+15, r18	; 0x0f
 526:	11 96       	adiw	r26, 0x01	; 1
 528:	8c 91       	ld	r24, X
				lz=1;
 52a:	99 24       	eor	r9, r9
 52c:	93 94       	inc	r9
 52e:	01 c0       	rjmp	.+2      	; 0x532 <tfp_format+0x66>

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
 530:	91 2c       	mov	r9, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 532:	90 ed       	ldi	r25, 0xD0	; 208
 534:	98 0f       	add	r25, r24
 536:	9a 30       	cpi	r25, 0x0A	; 10
 538:	50 f4       	brcc	.+20     	; 0x54e <tfp_format+0x82>
				ch=a2i(ch,&fmt,10,&w);
 53a:	9e 01       	movw	r18, r28
 53c:	23 5f       	subi	r18, 0xF3	; 243
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
 540:	4a e0       	ldi	r20, 0x0A	; 10
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	be 01       	movw	r22, r28
 546:	61 5f       	subi	r22, 0xF1	; 241
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <a2i>
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 54e:	83 36       	cpi	r24, 0x63	; 99
 550:	09 f4       	brne	.+2      	; 0x554 <tfp_format+0x88>
 552:	6b c0       	rjmp	.+214    	; 0x62a <tfp_format+0x15e>
 554:	50 f4       	brcc	.+20     	; 0x56a <tfp_format+0x9e>
 556:	85 32       	cpi	r24, 0x25	; 37
 558:	09 f4       	brne	.+2      	; 0x55c <tfp_format+0x90>
 55a:	82 c0       	rjmp	.+260    	; 0x660 <tfp_format+0x194>
 55c:	88 35       	cpi	r24, 0x58	; 88
 55e:	09 f4       	brne	.+2      	; 0x562 <tfp_format+0x96>
 560:	44 c0       	rjmp	.+136    	; 0x5ea <tfp_format+0x11e>
 562:	88 23       	and	r24, r24
 564:	09 f4       	brne	.+2      	; 0x568 <tfp_format+0x9c>
 566:	89 c0       	rjmp	.+274    	; 0x67a <tfp_format+0x1ae>
 568:	7f c0       	rjmp	.+254    	; 0x668 <tfp_format+0x19c>
 56a:	83 37       	cpi	r24, 0x73	; 115
 56c:	09 f4       	brne	.+2      	; 0x570 <tfp_format+0xa4>
 56e:	68 c0       	rjmp	.+208    	; 0x640 <tfp_format+0x174>
 570:	18 f4       	brcc	.+6      	; 0x578 <tfp_format+0xac>
 572:	84 36       	cpi	r24, 0x64	; 100
 574:	11 f1       	breq	.+68     	; 0x5ba <tfp_format+0xee>
 576:	78 c0       	rjmp	.+240    	; 0x668 <tfp_format+0x19c>
 578:	85 37       	cpi	r24, 0x75	; 117
 57a:	19 f0       	breq	.+6      	; 0x582 <tfp_format+0xb6>
 57c:	88 37       	cpi	r24, 0x78	; 120
 57e:	a9 f1       	breq	.+106    	; 0x5ea <tfp_format+0x11e>
 580:	73 c0       	rjmp	.+230    	; 0x668 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 582:	58 01       	movw	r10, r16
 584:	f2 e0       	ldi	r31, 0x02	; 2
 586:	af 0e       	add	r10, r31
 588:	b1 1c       	adc	r11, r1
 58a:	9e 01       	movw	r18, r28
 58c:	2f 5f       	subi	r18, 0xFF	; 255
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	6a e0       	ldi	r22, 0x0A	; 10
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	f8 01       	movw	r30, r16
 59a:	80 81       	ld	r24, Z
 59c:	91 81       	ldd	r25, Z+1	; 0x01
 59e:	0e 94 56 01 	call	0x2ac	; 0x2ac <ui2a>
					putchw(putp,putf,w,lz,bf);
 5a2:	4d 85       	ldd	r20, Y+13	; 0x0d
 5a4:	5e 85       	ldd	r21, Y+14	; 0x0e
 5a6:	8e 01       	movw	r16, r28
 5a8:	0f 5f       	subi	r16, 0xFF	; 255
 5aa:	1f 4f       	sbci	r17, 0xFF	; 255
 5ac:	29 2d       	mov	r18, r9
 5ae:	b7 01       	movw	r22, r14
 5b0:	c6 01       	movw	r24, r12
 5b2:	0e 94 21 02 	call	0x442	; 0x442 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 5b6:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 5b8:	57 c0       	rjmp	.+174    	; 0x668 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 5ba:	58 01       	movw	r10, r16
 5bc:	f2 e0       	ldi	r31, 0x02	; 2
 5be:	af 0e       	add	r10, r31
 5c0:	b1 1c       	adc	r11, r1
 5c2:	be 01       	movw	r22, r28
 5c4:	6f 5f       	subi	r22, 0xFF	; 255
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	f8 01       	movw	r30, r16
 5ca:	80 81       	ld	r24, Z
 5cc:	91 81       	ldd	r25, Z+1	; 0x01
 5ce:	0e 94 ba 01 	call	0x374	; 0x374 <i2a>
					putchw(putp,putf,w,lz,bf);
 5d2:	4d 85       	ldd	r20, Y+13	; 0x0d
 5d4:	5e 85       	ldd	r21, Y+14	; 0x0e
 5d6:	8e 01       	movw	r16, r28
 5d8:	0f 5f       	subi	r16, 0xFF	; 255
 5da:	1f 4f       	sbci	r17, 0xFF	; 255
 5dc:	29 2d       	mov	r18, r9
 5de:	b7 01       	movw	r22, r14
 5e0:	c6 01       	movw	r24, r12
 5e2:	0e 94 21 02 	call	0x442	; 0x442 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 5e6:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 5e8:	3f c0       	rjmp	.+126    	; 0x668 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 5ea:	58 01       	movw	r10, r16
 5ec:	f2 e0       	ldi	r31, 0x02	; 2
 5ee:	af 0e       	add	r10, r31
 5f0:	b1 1c       	adc	r11, r1
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	88 35       	cpi	r24, 0x58	; 88
 5f8:	11 f0       	breq	.+4      	; 0x5fe <tfp_format+0x132>
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	50 e0       	ldi	r21, 0x00	; 0
 5fe:	9e 01       	movw	r18, r28
 600:	2f 5f       	subi	r18, 0xFF	; 255
 602:	3f 4f       	sbci	r19, 0xFF	; 255
 604:	60 e1       	ldi	r22, 0x10	; 16
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	f8 01       	movw	r30, r16
 60a:	80 81       	ld	r24, Z
 60c:	91 81       	ldd	r25, Z+1	; 0x01
 60e:	0e 94 56 01 	call	0x2ac	; 0x2ac <ui2a>
					putchw(putp,putf,w,lz,bf);
 612:	4d 85       	ldd	r20, Y+13	; 0x0d
 614:	5e 85       	ldd	r21, Y+14	; 0x0e
 616:	8e 01       	movw	r16, r28
 618:	0f 5f       	subi	r16, 0xFF	; 255
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
 61c:	29 2d       	mov	r18, r9
 61e:	b7 01       	movw	r22, r14
 620:	c6 01       	movw	r24, r12
 622:	0e 94 21 02 	call	0x442	; 0x442 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 626:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 628:	1f c0       	rjmp	.+62     	; 0x668 <tfp_format+0x19c>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 62a:	58 01       	movw	r10, r16
 62c:	f2 e0       	ldi	r31, 0x02	; 2
 62e:	af 0e       	add	r10, r31
 630:	b1 1c       	adc	r11, r1
 632:	f8 01       	movw	r30, r16
 634:	60 81       	ld	r22, Z
 636:	c6 01       	movw	r24, r12
 638:	f7 01       	movw	r30, r14
 63a:	09 95       	icall
 63c:	85 01       	movw	r16, r10
					break;
 63e:	14 c0       	rjmp	.+40     	; 0x668 <tfp_format+0x19c>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 640:	58 01       	movw	r10, r16
 642:	f2 e0       	ldi	r31, 0x02	; 2
 644:	af 0e       	add	r10, r31
 646:	b1 1c       	adc	r11, r1
 648:	f8 01       	movw	r30, r16
 64a:	00 81       	ld	r16, Z
 64c:	11 81       	ldd	r17, Z+1	; 0x01
 64e:	4d 85       	ldd	r20, Y+13	; 0x0d
 650:	5e 85       	ldd	r21, Y+14	; 0x0e
 652:	20 e0       	ldi	r18, 0x00	; 0
 654:	b7 01       	movw	r22, r14
 656:	c6 01       	movw	r24, r12
 658:	0e 94 21 02 	call	0x442	; 0x442 <putchw>
 65c:	85 01       	movw	r16, r10
					break;
 65e:	04 c0       	rjmp	.+8      	; 0x668 <tfp_format+0x19c>
				case '%' :
					putf(putp,ch);
 660:	68 2f       	mov	r22, r24
 662:	c6 01       	movw	r24, r12
 664:	f7 01       	movw	r30, r14
 666:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 668:	ef 85       	ldd	r30, Y+15	; 0x0f
 66a:	f8 89       	ldd	r31, Y+16	; 0x10
 66c:	df 01       	movw	r26, r30
 66e:	11 96       	adiw	r26, 0x01	; 1
 670:	b8 8b       	std	Y+16, r27	; 0x10
 672:	af 87       	std	Y+15, r26	; 0x0f
 674:	60 81       	ld	r22, Z
 676:	61 11       	cpse	r22, r1
 678:	42 cf       	rjmp	.-380    	; 0x4fe <tfp_format+0x32>
					break;
				}
			}
		}
	abort:;
	}
 67a:	60 96       	adiw	r28, 0x10	; 16
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	f8 94       	cli
 680:	de bf       	out	0x3e, r29	; 62
 682:	0f be       	out	0x3f, r0	; 63
 684:	cd bf       	out	0x3d, r28	; 61
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	ff 90       	pop	r15
 690:	ef 90       	pop	r14
 692:	df 90       	pop	r13
 694:	cf 90       	pop	r12
 696:	bf 90       	pop	r11
 698:	af 90       	pop	r10
 69a:	9f 90       	pop	r9
 69c:	08 95       	ret

0000069e <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 69e:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <stdout_putf+0x1>
 6a2:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <stdout_putf>
	stdout_putp=putp;
 6a6:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <stdout_putp+0x1>
 6aa:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <stdout_putp>
 6ae:	08 95       	ret

000006b0 <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	9e 01       	movw	r18, r28
 6ba:	2b 5f       	subi	r18, 0xFB	; 251
 6bc:	3f 4f       	sbci	r19, 0xFF	; 255
 6be:	f9 01       	movw	r30, r18
 6c0:	41 91       	ld	r20, Z+
 6c2:	51 91       	ld	r21, Z+
 6c4:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 6c6:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <stdout_putf>
 6ca:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <stdout_putf+0x1>
 6ce:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <stdout_putp>
 6d2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <stdout_putp+0x1>
 6d6:	0e 94 66 02 	call	0x4cc	; 0x4cc <tfp_format>
	va_end(va);
	}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <__udivmodhi4>:
 6e0:	aa 1b       	sub	r26, r26
 6e2:	bb 1b       	sub	r27, r27
 6e4:	51 e1       	ldi	r21, 0x11	; 17
 6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <__udivmodhi4_ep>

000006e8 <__udivmodhi4_loop>:
 6e8:	aa 1f       	adc	r26, r26
 6ea:	bb 1f       	adc	r27, r27
 6ec:	a6 17       	cp	r26, r22
 6ee:	b7 07       	cpc	r27, r23
 6f0:	10 f0       	brcs	.+4      	; 0x6f6 <__udivmodhi4_ep>
 6f2:	a6 1b       	sub	r26, r22
 6f4:	b7 0b       	sbc	r27, r23

000006f6 <__udivmodhi4_ep>:
 6f6:	88 1f       	adc	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	5a 95       	dec	r21
 6fc:	a9 f7       	brne	.-22     	; 0x6e8 <__udivmodhi4_loop>
 6fe:	80 95       	com	r24
 700:	90 95       	com	r25
 702:	bc 01       	movw	r22, r24
 704:	cd 01       	movw	r24, r26
 706:	08 95       	ret

00000708 <_exit>:
 708:	f8 94       	cli

0000070a <__stop_program>:
 70a:	ff cf       	rjmp	.-2      	; 0x70a <__stop_program>

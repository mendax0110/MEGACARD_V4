
DICExamplesExam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bb  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060e  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f4  00000000  00000000  00000f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <util/delay.h>

volatile uint8_t timerOverflowCount = 0;

ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	timerOverflowCount++;
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <initTimer0>:

void initTimer0()
{
	TCCR0 |= (1 << CS00)|(1 << CS02);	//prescaler 1024
  9e:	83 b7       	in	r24, 0x33	; 51
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0); // Timer0 OV aktiv
  a4:	89 b7       	in	r24, 0x39	; 57
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0; // startwert timer 0
  aa:	12 be       	out	0x32, r1	; 50
  ac:	08 95       	ret

000000ae <initPorts>:
}

void initPorts()
{
	DDRC |= 0xFF;
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 bb       	out	0x14, r24	; 20
	
	DDRA &= ~(1 << PA0)|(1 << PA1)|(1 << PA2)|(1 << PA3);
  b4:	8a b3       	in	r24, 0x1a	; 26
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0)|(1 << PA1)|(1 << PA2)|(1 << PA3);
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	08 95       	ret

000000c2 <main>:
}

int main(void)
{
	cli();
  c2:	f8 94       	cli
	initPorts();
  c4:	0e 94 57 00 	call	0xae	; 0xae <initPorts>
	initTimer0();
  c8:	0e 94 4f 00 	call	0x9e	; 0x9e <initTimer0>
	sei();
  cc:	78 94       	sei
	
    while (1) 
    {	
		if(!(PINA & (1 << PA0)))
  ce:	c8 99       	sbic	0x19, 0	; 25
  d0:	04 c0       	rjmp	.+8      	; 0xda <main+0x18>
		{
			PORTC ^= (1 << PC0)|(1 << PC2)|(1 << PC4)|(1 << PC6);
  d2:	95 b3       	in	r25, 0x15	; 21
  d4:	85 e5       	ldi	r24, 0x55	; 85
  d6:	89 27       	eor	r24, r25
  d8:	85 bb       	out	0x15, r24	; 21
		}

		
		if(!(PINA & (1 << PA1)))
  da:	c9 99       	sbic	0x19, 1	; 25
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <main+0x24>
		{
			PORTC ^= (1 << PC1)|(1 << PC3)|(1 << PC5)|(1 << PC7);
  de:	95 b3       	in	r25, 0x15	; 21
  e0:	8a ea       	ldi	r24, 0xAA	; 170
  e2:	89 27       	eor	r24, r25
  e4:	85 bb       	out	0x15, r24	; 21
		}
		
		if(!(PINA & (1 << PA2)))
  e6:	ca 9b       	sbis	0x19, 2	; 25
  e8:	11 c0       	rjmp	.+34     	; 0x10c <main+0x4a>
  ea:	15 c0       	rjmp	.+42     	; 0x116 <main+0x54>
		{
			for(int i = 0; i < 10; i++)
			{
				PORTC ^= (1 << PC1)|(1 << PC3)|(1 << PC5)|(1 << PC7);
  ec:	95 b3       	in	r25, 0x15	; 21
  ee:	8a ea       	ldi	r24, 0xAA	; 170
  f0:	89 27       	eor	r24, r25
  f2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	4f ef       	ldi	r20, 0xFF	; 255
  f6:	82 e5       	ldi	r24, 0x52	; 82
  f8:	97 e0       	ldi	r25, 0x07	; 7
  fa:	41 50       	subi	r20, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x38>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x42>
 104:	00 00       	nop
			PORTC ^= (1 << PC1)|(1 << PC3)|(1 << PC5)|(1 << PC7);
		}
		
		if(!(PINA & (1 << PA2)))
		{
			for(int i = 0; i < 10; i++)
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	02 c0       	rjmp	.+4      	; 0x110 <main+0x4e>
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	2a 30       	cpi	r18, 0x0A	; 10
 112:	31 05       	cpc	r19, r1
 114:	5c f3       	brlt	.-42     	; 0xec <main+0x2a>
				PORTC ^= (1 << PC1)|(1 << PC3)|(1 << PC5)|(1 << PC7);
				_delay_ms(200);			
			}
		}
		
		if(! (PINA & (1 << PA3)))
 116:	cb 99       	sbic	0x19, 3	; 25
 118:	da cf       	rjmp	.-76     	; 0xce <main+0xc>
		{
			if(timerOverflowCount >= 100)
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11e:	84 36       	cpi	r24, 0x64	; 100
 120:	b0 f2       	brcs	.-84     	; 0xce <main+0xc>
			{
				PORTC ^= (1 << PC0) | (1 << PC2) | (1 << PC4) | (1 << PC6);
 122:	95 b3       	in	r25, 0x15	; 21
 124:	85 e5       	ldi	r24, 0x55	; 85
 126:	89 27       	eor	r24, r25
 128:	85 bb       	out	0x15, r24	; 21
				timerOverflowCount = 0;			
 12a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 12e:	cf cf       	rjmp	.-98     	; 0xce <main+0xc>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>


Timer0PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000016e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000692  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e0  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c0  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039d  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_Ports>:

volatile uint8_t OCR0Var = 0;

void init_Ports()
{
	DDRC = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	
	DDRB |= (1 << PB3);		// output for signal
  80:	87 b3       	in	r24, 0x17	; 23
  82:	88 60       	ori	r24, 0x08	; 8
  84:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB3);
  86:	88 b3       	in	r24, 0x18	; 24
  88:	87 7f       	andi	r24, 0xF7	; 247
  8a:	88 bb       	out	0x18, r24	; 24
	
	DDRA &= ~((1 << PA0)|(1 << PA1));
  8c:	8a b3       	in	r24, 0x1a	; 26
  8e:	8c 7f       	andi	r24, 0xFC	; 252
  90:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0)|(1 << PA1));
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	83 60       	ori	r24, 0x03	; 3
  96:	8b bb       	out	0x1b, r24	; 27
  98:	08 95       	ret

0000009a <init_fast_PMW>:
}

void init_fast_PMW()
{
	TCCR0 |= (1 << WGM00)|(1 << COM01)|(1 << WGM01)|(1 << CS01)|(1 << CS00);
  9a:	83 b7       	in	r24, 0x33	; 51
  9c:	8b 66       	ori	r24, 0x6B	; 107
  9e:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = OCR0Var;
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	8c bf       	out	0x3c, r24	; 60
  a6:	08 95       	ret

000000a8 <main>:
}

int main(void)
{
	cli();
  a8:	f8 94       	cli
	init_Ports();
  aa:	0e 94 3e 00 	call	0x7c	; 0x7c <init_Ports>
	init_fast_PMW();
  ae:	0e 94 4d 00 	call	0x9a	; 0x9a <init_fast_PMW>
	sei();
  b2:	78 94       	sei
	
	while(1)
	{
		if((PINA & (1 << PA0)) == 0)
  b4:	c8 99       	sbic	0x19, 0	; 25
  b6:	1d c0       	rjmp	.+58     	; 0xf2 <main+0x4a>
		{
			for(OCR0Var = 0; OCR0Var <= 150; OCR0Var++)
  b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	13 c0       	rjmp	.+38     	; 0xe4 <main+0x3c>
			{
				PORTC ^= OCR0Var;
  be:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	89 27       	eor	r24, r25
  c6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	82 e5       	ldi	r24, 0x52	; 82
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x26>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x30>
  d8:	00 00       	nop
	
	while(1)
	{
		if((PINA & (1 << PA0)) == 0)
		{
			for(OCR0Var = 0; OCR0Var <= 150; OCR0Var++)
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e8:	87 39       	cpi	r24, 0x97	; 151
  ea:	48 f3       	brcs	.-46     	; 0xbe <main+0x16>
			{
				PORTC ^= OCR0Var;
				_delay_ms(200);
			}
			OCR0Var = 0;
  ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	e1 cf       	rjmp	.-62     	; 0xb4 <main+0xc>
		}
		else if((PINA & (1 << PA1)) == 0)
  f2:	89 b3       	in	r24, 0x19	; 25
  f4:	df cf       	rjmp	.-66     	; 0xb4 <main+0xc>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>

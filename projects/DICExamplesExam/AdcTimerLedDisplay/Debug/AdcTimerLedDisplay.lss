
AdcTimerLedDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000007b8  0000084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800080  00800080  0000086c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140e  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009db  00000000  00000000  00001dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009dd  00000000  00000000  000027a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00003180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000118e  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004aba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 83 01 	call	0x306	; 0x306 <main>
  8a:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 a5 03 	call	0x74a	; 0x74a <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <initTimer0>:
		initTimer0();
	}
}

void initTimer0()
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
	lcd_init();
 1ea:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	TCCR0 &= ~(1 << WGM00)|(1 << WGM01);
 1ee:	83 b7       	in	r24, 0x33	; 51
 1f0:	8f 7b       	andi	r24, 0xBF	; 191
 1f2:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM00)|(1 << CS01)|(1 << CS00);
 1f4:	83 b7       	in	r24, 0x33	; 51
 1f6:	83 61       	ori	r24, 0x13	; 19
 1f8:	83 bf       	out	0x33, r24	; 51
	 
	for(int TCNTVAR = 0; TCNTVAR < 20; TCNTVAR++)
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	23 c0       	rjmp	.+70     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	82 e5       	ldi	r24, 0x52	; 82
 204:	97 e0       	ldi	r25, 0x07	; 7
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 210:	00 00       	nop
	{
		_delay_ms(200);
		lcd_pos(1,0);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
		printf("Timer1 Count: %d", TCNTVAR);
 21a:	df 93       	push	r29
 21c:	cf 93       	push	r28
 21e:	80 e6       	ldi	r24, 0x60	; 96
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9f 93       	push	r25
 224:	8f 93       	push	r24
 226:	0e 94 ae 03 	call	0x75c	; 0x75c <tfp_printf>
 22a:	9f ef       	ldi	r25, 0xFF	; 255
 22c:	22 e5       	ldi	r18, 0x52	; 82
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	91 50       	subi	r25, 0x01	; 1
 232:	20 40       	sbci	r18, 0x00	; 0
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 238:	00 c0       	rjmp	.+0      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 23a:	00 00       	nop
{
	lcd_init();
	TCCR0 &= ~(1 << WGM00)|(1 << WGM01);
	TCCR0 |= (1 << COM00)|(1 << CS01)|(1 << CS00);
	 
	for(int TCNTVAR = 0; TCNTVAR < 20; TCNTVAR++)
 23c:	21 96       	adiw	r28, 0x01	; 1
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	c4 31       	cpi	r28, 0x14	; 20
 248:	d1 05       	cpc	r29, r1
 24a:	d4 f2       	brlt	.-76     	; 0x200 <__EEPROM_REGION_LENGTH__>
		lcd_pos(1,0);
		printf("Timer1 Count: %d", TCNTVAR);
		_delay_ms(200);
	}
	 
	TCNT0 = TCNTVAR;
 24c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 250:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1 << TOIE0);
 252:	89 b7       	in	r24, 0x39	; 57
 254:	81 60       	ori	r24, 0x01	; 1
 256:	89 bf       	out	0x39, r24	; 57
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <__vector_9>:

volatile uint8_t value = 0;
volatile uint8_t TCNTVAR = 0;

ISR(TIMER0_OVF_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	4f 93       	push	r20
 26e:	5f 93       	push	r21
 270:	6f 93       	push	r22
 272:	7f 93       	push	r23
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
	TCNT0 = TCNTVAR;
 280:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 284:	82 bf       	out	0x32, r24	; 50
	
	if(!(PINA & (1 << PA1)))
 286:	c9 99       	sbic	0x19, 1	; 25
 288:	04 c0       	rjmp	.+8      	; 0x292 <__vector_9+0x34>
	{
		TCNTVAR = 0;
 28a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
		initTimer0();
 28e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <initTimer0>
	}
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <initPorts>:
	TIMSK |= (1 << TOIE0);
}

void initPorts()
{
	DDRA &= ~(1 << PA5);	// set with and neg because of voltage measurment -> potentiometer Megacard (inout)
 2b4:	8a b3       	in	r24, 0x1a	; 26
 2b6:	8f 7d       	andi	r24, 0xDF	; 223
 2b8:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1 << PA5);	// set high-z
 2ba:	8b b3       	in	r24, 0x1b	; 27
 2bc:	8f 7d       	andi	r24, 0xDF	; 223
 2be:	8b bb       	out	0x1b, r24	; 27
	
	DDRA &= ~(1 << PA1)|(1 << PA0);
 2c0:	8a b3       	in	r24, 0x1a	; 26
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA1)|(1 << PA0);
 2c6:	8b b3       	in	r24, 0x1b	; 27
 2c8:	83 60       	ori	r24, 0x03	; 3
 2ca:	8b bb       	out	0x1b, r24	; 27
	
	DDRC |= 0xFF;		// indicator LED
 2cc:	84 b3       	in	r24, 0x14	; 20
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7);	
 2d2:	85 b3       	in	r24, 0x15	; 21
 2d4:	80 68       	ori	r24, 0x80	; 128
 2d6:	85 bb       	out	0x15, r24	; 21
 2d8:	08 95       	ret

000002da <initADC>:
}

void initADC()	// now without return type, later with return type  
{
	ADCSRA |= (1 << ADEN);	// enable ADC
 2da:	86 b1       	in	r24, 0x06	; 6
 2dc:	80 68       	ori	r24, 0x80	; 128
 2de:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADATE);	// Trigger Source on
 2e0:	86 b1       	in	r24, 0x06	; 6
 2e2:	80 62       	ori	r24, 0x20	; 32
 2e4:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2);	// Prescaler 128 -> Teilung fck/128 -> clk for ADC = 93,75 kHz
 2e6:	86 b1       	in	r24, 0x06	; 6
 2e8:	87 60       	ori	r24, 0x07	; 7
 2ea:	86 b9       	out	0x06, r24	; 6
	
	SFIOR &= ~(1 << ADTS0)&~(1 << ADTS1)&~(1 << ADTS2); // Free running mode
 2ec:	80 b7       	in	r24, 0x30	; 48
 2ee:	8f 71       	andi	r24, 0x1F	; 31
 2f0:	80 bf       	out	0x30, r24	; 48
	
	ADMUX |= (1 << MUX0)|(1 << MUX2);	// Channel 5 set on on the multiplexer -> ADC Poti
 2f2:	87 b1       	in	r24, 0x07	; 7
 2f4:	85 60       	ori	r24, 0x05	; 5
 2f6:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << REFS0);	// external reference for voltage AVCC
 2f8:	87 b1       	in	r24, 0x07	; 7
 2fa:	80 64       	ori	r24, 0x40	; 64
 2fc:	87 b9       	out	0x07, r24	; 7
	
	ADMUX |= (1 << ADLAR);	// presentation of bits in the ADC Data Register
 2fe:	87 b1       	in	r24, 0x07	; 7
 300:	80 62       	ori	r24, 0x20	; 32
 302:	87 b9       	out	0x07, r24	; 7
 304:	08 95       	ret

00000306 <main>:
}

int main(void)
{
	cli();
 306:	f8 94       	cli
    initPorts();
 308:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <initPorts>
	initADC();
 30c:	0e 94 6d 01 	call	0x2da	; 0x2da <initADC>
	initTimer0();
 310:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <initTimer0>
	lcd_init();
 314:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	sei();
 318:	78 94       	sei
	
	ADCSRA |= (1 << ADSC); // Start the ADC Measurment one time, for free running mode!
 31a:	86 b1       	in	r24, 0x06	; 6
 31c:	80 64       	ori	r24, 0x40	; 64
 31e:	86 b9       	out	0x06, r24	; 6
 320:	18 c0       	rjmp	.+48     	; 0x352 <main+0x4c>
	
    while (1) 
    {
		while((ADCSRA & (1 << ADIF)))
		{
			value = ADCH;
 322:	85 b1       	in	r24, 0x05	; 5
 324:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <value>
			PORTC = value;
 328:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <value>
 32c:	85 bb       	out	0x15, r24	; 21
			
			lcd_pos(0,0);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
			printf("ADC-VALUE: %d" ,value);
 336:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <value>
 33a:	1f 92       	push	r1
 33c:	8f 93       	push	r24
 33e:	81 e7       	ldi	r24, 0x71	; 113
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	9f 93       	push	r25
 344:	8f 93       	push	r24
 346:	0e 94 ae 03 	call	0x75c	; 0x75c <tfp_printf>
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
	
	ADCSRA |= (1 << ADSC); // Start the ADC Measurment one time, for free running mode!
	
    while (1) 
    {
		while((ADCSRA & (1 << ADIF)))
 352:	34 99       	sbic	0x06, 4	; 6
 354:	e6 cf       	rjmp	.-52     	; 0x322 <main+0x1c>
 356:	fd cf       	rjmp	.-6      	; 0x352 <main+0x4c>

00000358 <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 358:	8f 92       	push	r8
 35a:	9f 92       	push	r9
 35c:	af 92       	push	r10
 35e:	bf 92       	push	r11
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	c8 2f       	mov	r28, r24
 372:	d9 2f       	mov	r29, r25
 374:	8b 01       	movw	r16, r22
 376:	6a 01       	movw	r12, r20
 378:	79 01       	movw	r14, r18
 37a:	e1 e0       	ldi	r30, 0x01	; 1
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	08 c0       	rjmp	.+16     	; 0x390 <ui2a+0x38>
 380:	cf 01       	movw	r24, r30
 382:	80 9f       	mul	r24, r16
 384:	f0 01       	movw	r30, r0
 386:	81 9f       	mul	r24, r17
 388:	f0 0d       	add	r31, r0
 38a:	90 9f       	mul	r25, r16
 38c:	f0 0d       	add	r31, r0
 38e:	11 24       	eor	r1, r1
 390:	8c 2f       	mov	r24, r28
 392:	9d 2f       	mov	r25, r29
 394:	bf 01       	movw	r22, r30
 396:	0e 94 c6 03 	call	0x78c	; 0x78c <__udivmodhi4>
 39a:	60 17       	cp	r22, r16
 39c:	71 07       	cpc	r23, r17
 39e:	80 f7       	brcc	.-32     	; 0x380 <ui2a+0x28>
 3a0:	a1 2c       	mov	r10, r1
 3a2:	b1 2c       	mov	r11, r1
 3a4:	2c c0       	rjmp	.+88     	; 0x3fe <ui2a+0xa6>
 3a6:	8c 2f       	mov	r24, r28
 3a8:	9d 2f       	mov	r25, r29
 3aa:	bf 01       	movw	r22, r30
 3ac:	0e 94 c6 03 	call	0x78c	; 0x78c <__udivmodhi4>
 3b0:	36 2f       	mov	r19, r22
 3b2:	86 2e       	mov	r8, r22
 3b4:	97 2e       	mov	r9, r23
 3b6:	c8 2f       	mov	r28, r24
 3b8:	d9 2f       	mov	r29, r25
 3ba:	cf 01       	movw	r24, r30
 3bc:	b8 01       	movw	r22, r16
 3be:	0e 94 c6 03 	call	0x78c	; 0x78c <__udivmodhi4>
 3c2:	fb 01       	movw	r30, r22
 3c4:	a1 14       	cp	r10, r1
 3c6:	b1 04       	cpc	r11, r1
 3c8:	29 f4       	brne	.+10     	; 0x3d4 <ui2a+0x7c>
 3ca:	18 14       	cp	r1, r8
 3cc:	19 04       	cpc	r1, r9
 3ce:	14 f0       	brlt	.+4      	; 0x3d4 <ui2a+0x7c>
 3d0:	30 97       	sbiw	r30, 0x00	; 0
 3d2:	a9 f4       	brne	.+42     	; 0x3fe <ui2a+0xa6>
 3d4:	c7 01       	movw	r24, r14
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	aa e0       	ldi	r26, 0x0A	; 10
 3da:	8a 16       	cp	r8, r26
 3dc:	91 04       	cpc	r9, r1
 3de:	2c f0       	brlt	.+10     	; 0x3ea <ui2a+0x92>
 3e0:	c1 14       	cp	r12, r1
 3e2:	d1 04       	cpc	r13, r1
 3e4:	21 f0       	breq	.+8      	; 0x3ee <ui2a+0x96>
 3e6:	27 e3       	ldi	r18, 0x37	; 55
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <ui2a+0x98>
 3ea:	20 e3       	ldi	r18, 0x30	; 48
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <ui2a+0x98>
 3ee:	27 e5       	ldi	r18, 0x57	; 87
 3f0:	32 0f       	add	r19, r18
 3f2:	d7 01       	movw	r26, r14
 3f4:	3c 93       	st	X, r19
 3f6:	bf ef       	ldi	r27, 0xFF	; 255
 3f8:	ab 1a       	sub	r10, r27
 3fa:	bb 0a       	sbc	r11, r27
 3fc:	7c 01       	movw	r14, r24
 3fe:	30 97       	sbiw	r30, 0x00	; 0
 400:	91 f6       	brne	.-92     	; 0x3a6 <ui2a+0x4e>
 402:	f7 01       	movw	r30, r14
 404:	10 82       	st	Z, r1
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	ff 90       	pop	r15
 410:	ef 90       	pop	r14
 412:	df 90       	pop	r13
 414:	cf 90       	pop	r12
 416:	bf 90       	pop	r11
 418:	af 90       	pop	r10
 41a:	9f 90       	pop	r9
 41c:	8f 90       	pop	r8
 41e:	08 95       	ret

00000420 <i2a>:
 420:	9b 01       	movw	r18, r22
 422:	99 23       	and	r25, r25
 424:	44 f4       	brge	.+16     	; 0x436 <i2a+0x16>
 426:	91 95       	neg	r25
 428:	81 95       	neg	r24
 42a:	91 09       	sbc	r25, r1
 42c:	4d e2       	ldi	r20, 0x2D	; 45
 42e:	fb 01       	movw	r30, r22
 430:	40 83       	st	Z, r20
 432:	2f 5f       	subi	r18, 0xFF	; 255
 434:	3f 4f       	sbci	r19, 0xFF	; 255
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	6a e0       	ldi	r22, 0x0A	; 10
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	0e 94 ac 01 	call	0x358	; 0x358 <ui2a>
 442:	08 95       	ret

00000444 <a2d>:
 444:	90 ed       	ldi	r25, 0xD0	; 208
 446:	98 0f       	add	r25, r24
 448:	9a 30       	cpi	r25, 0x0A	; 10
 44a:	18 f4       	brcc	.+6      	; 0x452 <a2d+0xe>
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	c0 97       	sbiw	r24, 0x30	; 48
 450:	08 95       	ret
 452:	9f e9       	ldi	r25, 0x9F	; 159
 454:	98 0f       	add	r25, r24
 456:	96 30       	cpi	r25, 0x06	; 6
 458:	20 f4       	brcc	.+8      	; 0x462 <__stack+0x3>
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	87 55       	subi	r24, 0x57	; 87
 45e:	91 09       	sbc	r25, r1
 460:	08 95       	ret
 462:	9f eb       	ldi	r25, 0xBF	; 191
 464:	98 0f       	add	r25, r24
 466:	96 30       	cpi	r25, 0x06	; 6
 468:	18 f4       	brcc	.+6      	; 0x470 <__stack+0x11>
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	c7 97       	sbiw	r24, 0x37	; 55
 46e:	08 95       	ret
 470:	8f ef       	ldi	r24, 0xFF	; 255
 472:	9f ef       	ldi	r25, 0xFF	; 255
 474:	08 95       	ret

00000476 <a2i>:
 476:	9f 92       	push	r9
 478:	af 92       	push	r10
 47a:	bf 92       	push	r11
 47c:	cf 92       	push	r12
 47e:	df 92       	push	r13
 480:	ef 92       	push	r14
 482:	ff 92       	push	r15
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	98 2e       	mov	r9, r24
 48e:	5b 01       	movw	r10, r22
 490:	7a 01       	movw	r14, r20
 492:	69 01       	movw	r12, r18
 494:	fb 01       	movw	r30, r22
 496:	c0 81       	ld	r28, Z
 498:	d1 81       	ldd	r29, Z+1	; 0x01
 49a:	00 e0       	ldi	r16, 0x00	; 0
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	0f c0       	rjmp	.+30     	; 0x4be <a2i+0x48>
 4a0:	e8 16       	cp	r14, r24
 4a2:	f9 06       	cpc	r15, r25
 4a4:	8c f0       	brlt	.+34     	; 0x4c8 <a2i+0x52>
 4a6:	0e 9d       	mul	r16, r14
 4a8:	90 01       	movw	r18, r0
 4aa:	0f 9d       	mul	r16, r15
 4ac:	30 0d       	add	r19, r0
 4ae:	1e 9d       	mul	r17, r14
 4b0:	30 0d       	add	r19, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	8c 01       	movw	r16, r24
 4b6:	02 0f       	add	r16, r18
 4b8:	13 1f       	adc	r17, r19
 4ba:	98 80       	ld	r9, Y
 4bc:	21 96       	adiw	r28, 0x01	; 1
 4be:	89 2d       	mov	r24, r9
 4c0:	0e 94 22 02 	call	0x444	; 0x444 <a2d>
 4c4:	99 23       	and	r25, r25
 4c6:	64 f7       	brge	.-40     	; 0x4a0 <a2i+0x2a>
 4c8:	f5 01       	movw	r30, r10
 4ca:	d1 83       	std	Z+1, r29	; 0x01
 4cc:	c0 83       	st	Z, r28
 4ce:	f6 01       	movw	r30, r12
 4d0:	11 83       	std	Z+1, r17	; 0x01
 4d2:	00 83       	st	Z, r16
 4d4:	89 2d       	mov	r24, r9
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	df 90       	pop	r13
 4e4:	cf 90       	pop	r12
 4e6:	bf 90       	pop	r11
 4e8:	af 90       	pop	r10
 4ea:	9f 90       	pop	r9
 4ec:	08 95       	ret

000004ee <putchw>:
 4ee:	bf 92       	push	r11
 4f0:	cf 92       	push	r12
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	6c 01       	movw	r12, r24
 502:	7b 01       	movw	r14, r22
 504:	e8 01       	movw	r28, r16
 506:	22 23       	and	r18, r18
 508:	29 f0       	breq	.+10     	; 0x514 <putchw+0x26>
 50a:	0f 2e       	mov	r0, r31
 50c:	f0 e3       	ldi	r31, 0x30	; 48
 50e:	bf 2e       	mov	r11, r31
 510:	f0 2d       	mov	r31, r0
 512:	03 c0       	rjmp	.+6      	; 0x51a <putchw+0x2c>
 514:	68 94       	set
 516:	bb 24       	eor	r11, r11
 518:	b5 f8       	bld	r11, 5
 51a:	fe 01       	movw	r30, r28
 51c:	03 c0       	rjmp	.+6      	; 0x524 <putchw+0x36>
 51e:	41 50       	subi	r20, 0x01	; 1
 520:	51 09       	sbc	r21, r1
 522:	f9 01       	movw	r30, r18
 524:	9f 01       	movw	r18, r30
 526:	2f 5f       	subi	r18, 0xFF	; 255
 528:	3f 4f       	sbci	r19, 0xFF	; 255
 52a:	80 81       	ld	r24, Z
 52c:	88 23       	and	r24, r24
 52e:	49 f0       	breq	.+18     	; 0x542 <putchw+0x54>
 530:	14 16       	cp	r1, r20
 532:	15 06       	cpc	r1, r21
 534:	a4 f3       	brlt	.-24     	; 0x51e <putchw+0x30>
 536:	05 c0       	rjmp	.+10     	; 0x542 <putchw+0x54>
 538:	6b 2d       	mov	r22, r11
 53a:	c6 01       	movw	r24, r12
 53c:	f7 01       	movw	r30, r14
 53e:	09 95       	icall
 540:	a8 01       	movw	r20, r16
 542:	8a 01       	movw	r16, r20
 544:	01 50       	subi	r16, 0x01	; 1
 546:	11 09       	sbc	r17, r1
 548:	14 16       	cp	r1, r20
 54a:	15 06       	cpc	r1, r21
 54c:	ac f3       	brlt	.-22     	; 0x538 <putchw+0x4a>
 54e:	04 c0       	rjmp	.+8      	; 0x558 <putchw+0x6a>
 550:	c6 01       	movw	r24, r12
 552:	f7 01       	movw	r30, r14
 554:	09 95       	icall
 556:	e8 01       	movw	r28, r16
 558:	8e 01       	movw	r16, r28
 55a:	0f 5f       	subi	r16, 0xFF	; 255
 55c:	1f 4f       	sbci	r17, 0xFF	; 255
 55e:	68 81       	ld	r22, Y
 560:	61 11       	cpse	r22, r1
 562:	f6 cf       	rjmp	.-20     	; 0x550 <putchw+0x62>
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	df 90       	pop	r13
 572:	cf 90       	pop	r12
 574:	bf 90       	pop	r11
 576:	08 95       	ret

00000578 <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
 578:	9f 92       	push	r9
 57a:	af 92       	push	r10
 57c:	bf 92       	push	r11
 57e:	cf 92       	push	r12
 580:	df 92       	push	r13
 582:	ef 92       	push	r14
 584:	ff 92       	push	r15
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	60 97       	sbiw	r28, 0x10	; 16
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	6c 01       	movw	r12, r24
 5a0:	7b 01       	movw	r14, r22
 5a2:	58 8b       	std	Y+16, r21	; 0x10
 5a4:	4f 87       	std	Y+15, r20	; 0x0f
 5a6:	89 01       	movw	r16, r18
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 5a8:	b5 c0       	rjmp	.+362    	; 0x714 <tfp_format+0x19c>
		if (ch!='%') 
 5aa:	65 32       	cpi	r22, 0x25	; 37
 5ac:	21 f0       	breq	.+8      	; 0x5b6 <tfp_format+0x3e>
			putf(putp,ch);
 5ae:	c6 01       	movw	r24, r12
 5b0:	f7 01       	movw	r30, r14
 5b2:	09 95       	icall
 5b4:	af c0       	rjmp	.+350    	; 0x714 <tfp_format+0x19c>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
 5b6:	1e 86       	std	Y+14, r1	; 0x0e
 5b8:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 5ba:	9d 01       	movw	r18, r26
 5bc:	2f 5f       	subi	r18, 0xFF	; 255
 5be:	3f 4f       	sbci	r19, 0xFF	; 255
 5c0:	38 8b       	std	Y+16, r19	; 0x10
 5c2:	2f 87       	std	Y+15, r18	; 0x0f
 5c4:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 5c6:	80 33       	cpi	r24, 0x30	; 48
 5c8:	49 f4       	brne	.+18     	; 0x5dc <tfp_format+0x64>
				ch=*(fmt++);
 5ca:	2f 5f       	subi	r18, 0xFF	; 255
 5cc:	3f 4f       	sbci	r19, 0xFF	; 255
 5ce:	38 8b       	std	Y+16, r19	; 0x10
 5d0:	2f 87       	std	Y+15, r18	; 0x0f
 5d2:	11 96       	adiw	r26, 0x01	; 1
 5d4:	8c 91       	ld	r24, X
				lz=1;
 5d6:	99 24       	eor	r9, r9
 5d8:	93 94       	inc	r9
 5da:	01 c0       	rjmp	.+2      	; 0x5de <tfp_format+0x66>

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
 5dc:	91 2c       	mov	r9, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 5de:	90 ed       	ldi	r25, 0xD0	; 208
 5e0:	98 0f       	add	r25, r24
 5e2:	9a 30       	cpi	r25, 0x0A	; 10
 5e4:	50 f4       	brcc	.+20     	; 0x5fa <tfp_format+0x82>
				ch=a2i(ch,&fmt,10,&w);
 5e6:	9e 01       	movw	r18, r28
 5e8:	23 5f       	subi	r18, 0xF3	; 243
 5ea:	3f 4f       	sbci	r19, 0xFF	; 255
 5ec:	4a e0       	ldi	r20, 0x0A	; 10
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	be 01       	movw	r22, r28
 5f2:	61 5f       	subi	r22, 0xF1	; 241
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	0e 94 3b 02 	call	0x476	; 0x476 <a2i>
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 5fa:	83 36       	cpi	r24, 0x63	; 99
 5fc:	09 f4       	brne	.+2      	; 0x600 <tfp_format+0x88>
 5fe:	6b c0       	rjmp	.+214    	; 0x6d6 <tfp_format+0x15e>
 600:	50 f4       	brcc	.+20     	; 0x616 <tfp_format+0x9e>
 602:	85 32       	cpi	r24, 0x25	; 37
 604:	09 f4       	brne	.+2      	; 0x608 <tfp_format+0x90>
 606:	82 c0       	rjmp	.+260    	; 0x70c <tfp_format+0x194>
 608:	88 35       	cpi	r24, 0x58	; 88
 60a:	09 f4       	brne	.+2      	; 0x60e <tfp_format+0x96>
 60c:	44 c0       	rjmp	.+136    	; 0x696 <tfp_format+0x11e>
 60e:	88 23       	and	r24, r24
 610:	09 f4       	brne	.+2      	; 0x614 <tfp_format+0x9c>
 612:	89 c0       	rjmp	.+274    	; 0x726 <tfp_format+0x1ae>
 614:	7f c0       	rjmp	.+254    	; 0x714 <tfp_format+0x19c>
 616:	83 37       	cpi	r24, 0x73	; 115
 618:	09 f4       	brne	.+2      	; 0x61c <tfp_format+0xa4>
 61a:	68 c0       	rjmp	.+208    	; 0x6ec <tfp_format+0x174>
 61c:	18 f4       	brcc	.+6      	; 0x624 <tfp_format+0xac>
 61e:	84 36       	cpi	r24, 0x64	; 100
 620:	11 f1       	breq	.+68     	; 0x666 <tfp_format+0xee>
 622:	78 c0       	rjmp	.+240    	; 0x714 <tfp_format+0x19c>
 624:	85 37       	cpi	r24, 0x75	; 117
 626:	19 f0       	breq	.+6      	; 0x62e <tfp_format+0xb6>
 628:	88 37       	cpi	r24, 0x78	; 120
 62a:	a9 f1       	breq	.+106    	; 0x696 <tfp_format+0x11e>
 62c:	73 c0       	rjmp	.+230    	; 0x714 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 62e:	58 01       	movw	r10, r16
 630:	f2 e0       	ldi	r31, 0x02	; 2
 632:	af 0e       	add	r10, r31
 634:	b1 1c       	adc	r11, r1
 636:	9e 01       	movw	r18, r28
 638:	2f 5f       	subi	r18, 0xFF	; 255
 63a:	3f 4f       	sbci	r19, 0xFF	; 255
 63c:	40 e0       	ldi	r20, 0x00	; 0
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	6a e0       	ldi	r22, 0x0A	; 10
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	f8 01       	movw	r30, r16
 646:	80 81       	ld	r24, Z
 648:	91 81       	ldd	r25, Z+1	; 0x01
 64a:	0e 94 ac 01 	call	0x358	; 0x358 <ui2a>
					putchw(putp,putf,w,lz,bf);
 64e:	4d 85       	ldd	r20, Y+13	; 0x0d
 650:	5e 85       	ldd	r21, Y+14	; 0x0e
 652:	8e 01       	movw	r16, r28
 654:	0f 5f       	subi	r16, 0xFF	; 255
 656:	1f 4f       	sbci	r17, 0xFF	; 255
 658:	29 2d       	mov	r18, r9
 65a:	b7 01       	movw	r22, r14
 65c:	c6 01       	movw	r24, r12
 65e:	0e 94 77 02 	call	0x4ee	; 0x4ee <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 662:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 664:	57 c0       	rjmp	.+174    	; 0x714 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 666:	58 01       	movw	r10, r16
 668:	f2 e0       	ldi	r31, 0x02	; 2
 66a:	af 0e       	add	r10, r31
 66c:	b1 1c       	adc	r11, r1
 66e:	be 01       	movw	r22, r28
 670:	6f 5f       	subi	r22, 0xFF	; 255
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	f8 01       	movw	r30, r16
 676:	80 81       	ld	r24, Z
 678:	91 81       	ldd	r25, Z+1	; 0x01
 67a:	0e 94 10 02 	call	0x420	; 0x420 <i2a>
					putchw(putp,putf,w,lz,bf);
 67e:	4d 85       	ldd	r20, Y+13	; 0x0d
 680:	5e 85       	ldd	r21, Y+14	; 0x0e
 682:	8e 01       	movw	r16, r28
 684:	0f 5f       	subi	r16, 0xFF	; 255
 686:	1f 4f       	sbci	r17, 0xFF	; 255
 688:	29 2d       	mov	r18, r9
 68a:	b7 01       	movw	r22, r14
 68c:	c6 01       	movw	r24, r12
 68e:	0e 94 77 02 	call	0x4ee	; 0x4ee <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 692:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 694:	3f c0       	rjmp	.+126    	; 0x714 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 696:	58 01       	movw	r10, r16
 698:	f2 e0       	ldi	r31, 0x02	; 2
 69a:	af 0e       	add	r10, r31
 69c:	b1 1c       	adc	r11, r1
 69e:	41 e0       	ldi	r20, 0x01	; 1
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	88 35       	cpi	r24, 0x58	; 88
 6a4:	11 f0       	breq	.+4      	; 0x6aa <tfp_format+0x132>
 6a6:	40 e0       	ldi	r20, 0x00	; 0
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	9e 01       	movw	r18, r28
 6ac:	2f 5f       	subi	r18, 0xFF	; 255
 6ae:	3f 4f       	sbci	r19, 0xFF	; 255
 6b0:	60 e1       	ldi	r22, 0x10	; 16
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	f8 01       	movw	r30, r16
 6b6:	80 81       	ld	r24, Z
 6b8:	91 81       	ldd	r25, Z+1	; 0x01
 6ba:	0e 94 ac 01 	call	0x358	; 0x358 <ui2a>
					putchw(putp,putf,w,lz,bf);
 6be:	4d 85       	ldd	r20, Y+13	; 0x0d
 6c0:	5e 85       	ldd	r21, Y+14	; 0x0e
 6c2:	8e 01       	movw	r16, r28
 6c4:	0f 5f       	subi	r16, 0xFF	; 255
 6c6:	1f 4f       	sbci	r17, 0xFF	; 255
 6c8:	29 2d       	mov	r18, r9
 6ca:	b7 01       	movw	r22, r14
 6cc:	c6 01       	movw	r24, r12
 6ce:	0e 94 77 02 	call	0x4ee	; 0x4ee <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 6d2:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 6d4:	1f c0       	rjmp	.+62     	; 0x714 <tfp_format+0x19c>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 6d6:	58 01       	movw	r10, r16
 6d8:	f2 e0       	ldi	r31, 0x02	; 2
 6da:	af 0e       	add	r10, r31
 6dc:	b1 1c       	adc	r11, r1
 6de:	f8 01       	movw	r30, r16
 6e0:	60 81       	ld	r22, Z
 6e2:	c6 01       	movw	r24, r12
 6e4:	f7 01       	movw	r30, r14
 6e6:	09 95       	icall
 6e8:	85 01       	movw	r16, r10
					break;
 6ea:	14 c0       	rjmp	.+40     	; 0x714 <tfp_format+0x19c>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 6ec:	58 01       	movw	r10, r16
 6ee:	f2 e0       	ldi	r31, 0x02	; 2
 6f0:	af 0e       	add	r10, r31
 6f2:	b1 1c       	adc	r11, r1
 6f4:	f8 01       	movw	r30, r16
 6f6:	00 81       	ld	r16, Z
 6f8:	11 81       	ldd	r17, Z+1	; 0x01
 6fa:	4d 85       	ldd	r20, Y+13	; 0x0d
 6fc:	5e 85       	ldd	r21, Y+14	; 0x0e
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	b7 01       	movw	r22, r14
 702:	c6 01       	movw	r24, r12
 704:	0e 94 77 02 	call	0x4ee	; 0x4ee <putchw>
 708:	85 01       	movw	r16, r10
					break;
 70a:	04 c0       	rjmp	.+8      	; 0x714 <tfp_format+0x19c>
				case '%' :
					putf(putp,ch);
 70c:	68 2f       	mov	r22, r24
 70e:	c6 01       	movw	r24, r12
 710:	f7 01       	movw	r30, r14
 712:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 714:	ef 85       	ldd	r30, Y+15	; 0x0f
 716:	f8 89       	ldd	r31, Y+16	; 0x10
 718:	df 01       	movw	r26, r30
 71a:	11 96       	adiw	r26, 0x01	; 1
 71c:	b8 8b       	std	Y+16, r27	; 0x10
 71e:	af 87       	std	Y+15, r26	; 0x0f
 720:	60 81       	ld	r22, Z
 722:	61 11       	cpse	r22, r1
 724:	42 cf       	rjmp	.-380    	; 0x5aa <tfp_format+0x32>
					break;
				}
			}
		}
	abort:;
	}
 726:	60 96       	adiw	r28, 0x10	; 16
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	f8 94       	cli
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	0f be       	out	0x3f, r0	; 63
 730:	cd bf       	out	0x3d, r28	; 61
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	ff 90       	pop	r15
 73c:	ef 90       	pop	r14
 73e:	df 90       	pop	r13
 740:	cf 90       	pop	r12
 742:	bf 90       	pop	r11
 744:	af 90       	pop	r10
 746:	9f 90       	pop	r9
 748:	08 95       	ret

0000074a <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 74a:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <stdout_putf+0x1>
 74e:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <stdout_putf>
	stdout_putp=putp;
 752:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <stdout_putp+0x1>
 756:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <stdout_putp>
 75a:	08 95       	ret

0000075c <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
 764:	9e 01       	movw	r18, r28
 766:	2b 5f       	subi	r18, 0xFB	; 251
 768:	3f 4f       	sbci	r19, 0xFF	; 255
 76a:	f9 01       	movw	r30, r18
 76c:	41 91       	ld	r20, Z+
 76e:	51 91       	ld	r21, Z+
 770:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 772:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <stdout_putf>
 776:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <stdout_putf+0x1>
 77a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <stdout_putp>
 77e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <stdout_putp+0x1>
 782:	0e 94 bc 02 	call	0x578	; 0x578 <tfp_format>
	va_end(va);
	}
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	08 95       	ret

0000078c <__udivmodhi4>:
 78c:	aa 1b       	sub	r26, r26
 78e:	bb 1b       	sub	r27, r27
 790:	51 e1       	ldi	r21, 0x11	; 17
 792:	07 c0       	rjmp	.+14     	; 0x7a2 <__udivmodhi4_ep>

00000794 <__udivmodhi4_loop>:
 794:	aa 1f       	adc	r26, r26
 796:	bb 1f       	adc	r27, r27
 798:	a6 17       	cp	r26, r22
 79a:	b7 07       	cpc	r27, r23
 79c:	10 f0       	brcs	.+4      	; 0x7a2 <__udivmodhi4_ep>
 79e:	a6 1b       	sub	r26, r22
 7a0:	b7 0b       	sbc	r27, r23

000007a2 <__udivmodhi4_ep>:
 7a2:	88 1f       	adc	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	5a 95       	dec	r21
 7a8:	a9 f7       	brne	.-22     	; 0x794 <__udivmodhi4_loop>
 7aa:	80 95       	com	r24
 7ac:	90 95       	com	r25
 7ae:	bc 01       	movw	r22, r24
 7b0:	cd 01       	movw	r24, r26
 7b2:	08 95       	ret

000007b4 <_exit>:
 7b4:	f8 94       	cli

000007b6 <__stop_program>:
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <__stop_program>

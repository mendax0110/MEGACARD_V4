
TimerCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000188  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cb  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061d  00000000  00000000  000008f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e2  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a8  00000000  00000000  00001609  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  74:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <util/delay.h>

volatile uint8_t TCNTVAR = 0;

ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	TCNT0 = TCNTVAR;
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	82 bf       	out	0x32, r24	; 50
}
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <initPorts>:

void initPorts()
{
	DDRC = 0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	84 bb       	out	0x14, r24	; 20
	DDRB |= (1 << PB3);
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	87 bb       	out	0x17, r24	; 23
	
	DDRA &= ~(1 << PA0);
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 <<PA0);
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	08 95       	ret

000000b2 <initTimerCounter>:
}

void initTimerCounter()
{
	 TCCR0 &= ~(1 << WGM00)|(1 << WGM01);
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	8f 7b       	andi	r24, 0xBF	; 191
  b6:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= (1 << COM00)|(1 << CS01)|(1 << CS00);
  b8:	83 b7       	in	r24, 0x33	; 51
  ba:	83 61       	ori	r24, 0x13	; 19
  bc:	83 bf       	out	0x33, r24	; 51
	 
	for(int TCNTVAR = 0; TCNTVAR < 20; TCNTVAR++)
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	0f c0       	rjmp	.+30     	; 0xe2 <initTimerCounter+0x30>
 	{
 		PORTC ^= (1 << PC1)|(1 << PC6);
  c4:	95 b3       	in	r25, 0x15	; 21
  c6:	82 e4       	ldi	r24, 0x42	; 66
  c8:	89 27       	eor	r24, r25
  ca:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	4f ef       	ldi	r20, 0xFF	; 255
  ce:	82 e5       	ldi	r24, 0x52	; 82
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	41 50       	subi	r20, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <initTimerCounter+0x20>
  da:	00 c0       	rjmp	.+0      	; 0xdc <initTimerCounter+0x2a>
  dc:	00 00       	nop
void initTimerCounter()
{
	 TCCR0 &= ~(1 << WGM00)|(1 << WGM01);
	 TCCR0 |= (1 << COM00)|(1 << CS01)|(1 << CS00);
	 
	for(int TCNTVAR = 0; TCNTVAR < 20; TCNTVAR++)
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	24 31       	cpi	r18, 0x14	; 20
  e4:	31 05       	cpc	r19, r1
  e6:	74 f3       	brlt	.-36     	; 0xc4 <initTimerCounter+0x12>
 	{
 		PORTC ^= (1 << PC1)|(1 << PC6);
		_delay_ms(200);
	}
	 
	 TCNT0 = TCNTVAR;
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	82 bf       	out	0x32, r24	; 50
	 TIMSK |= (1 << TOIE0);
  ee:	89 b7       	in	r24, 0x39	; 57
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	89 bf       	out	0x39, r24	; 57
  f4:	08 95       	ret

000000f6 <main>:
}

int main(void)
{
	cli();
  f6:	f8 94       	cli
	initPorts();
  f8:	0e 94 4d 00 	call	0x9a	; 0x9a <initPorts>
	initTimerCounter();
  fc:	0e 94 59 00 	call	0xb2	; 0xb2 <initTimerCounter>
	sei();
 100:	78 94       	sei
	
    while (1) 
    {
		
		if(!(PINA & (1 << PA0)))
 102:	c8 99       	sbic	0x19, 0	; 25
 104:	fe cf       	rjmp	.-4      	; 0x102 <main+0xc>
		{
			TCNTVAR = 0;
 106:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			initTimerCounter();
 10a:	0e 94 59 00 	call	0xb2	; 0xb2 <initTimerCounter>
 10e:	f9 cf       	rjmp	.-14     	; 0x102 <main+0xc>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>

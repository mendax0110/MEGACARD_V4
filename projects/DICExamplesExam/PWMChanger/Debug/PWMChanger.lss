
PWMChanger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000006fe  00000792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  0000079c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000129e  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  00001b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008de  00000000  00000000  0000246d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000493  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe0  00000000  00000000  0000345f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000443f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  8a:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 48 03 	call	0x690	; 0x690 <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <init_ports>:
#include <avr/interrupt.h>
#include "LCD_4.h"

void init_ports()
{
	DDRC = 0xFF;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	84 bb       	out	0x14, r24	; 20
	
	DDRB |= (1 << PB3);
 1ea:	87 b3       	in	r24, 0x17	; 23
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB3);
 1f0:	88 b3       	in	r24, 0x18	; 24
 1f2:	87 7f       	andi	r24, 0xF7	; 247
 1f4:	88 bb       	out	0x18, r24	; 24
	
	DDRA &= ~((1 << PA0)|(1 << PA1));
 1f6:	8a b3       	in	r24, 0x1a	; 26
 1f8:	8c 7f       	andi	r24, 0xFC	; 252
 1fa:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0)|(1 << PA1));
 1fc:	8b b3       	in	r24, 0x1b	; 27
 1fe:	83 60       	ori	r24, 0x03	; 3
 200:	8b bb       	out	0x1b, r24	; 27
 202:	08 95       	ret

00000204 <init_fast_PMW>:
}

void init_fast_PMW()
{
	TCCR0 |= (1 << WGM00)|(1 << WGM01);
 204:	83 b7       	in	r24, 0x33	; 51
 206:	88 64       	ori	r24, 0x48	; 72
 208:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01)|(1 << CS00);
 20a:	83 b7       	in	r24, 0x33	; 51
 20c:	83 60       	ori	r24, 0x03	; 3
 20e:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);
 210:	83 b7       	in	r24, 0x33	; 51
 212:	80 62       	ori	r24, 0x20	; 32
 214:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = 0;
 216:	1c be       	out	0x3c, r1	; 60
 218:	08 95       	ret

0000021a <main>:
}

int main(void)
{
	cli();
 21a:	f8 94       	cli
	init_ports();
 21c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <init_ports>
	init_fast_PMW();
 220:	0e 94 02 01 	call	0x204	; 0x204 <init_fast_PMW>
	lcd_init();
 224:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	sei();
 228:	78 94       	sei
	
	while(1)
	{
		if(!(PINA & (1 << PA0)))
 22a:	c8 99       	sbic	0x19, 0	; 25
 22c:	1b c0       	rjmp	.+54     	; 0x264 <main+0x4a>
		{
			PORTC |= (1 << PC0);
 22e:	85 b3       	in	r24, 0x15	; 21
 230:	81 60       	ori	r24, 0x01	; 1
 232:	85 bb       	out	0x15, r24	; 21
			PORTC &= ~(1 << PC1);
 234:	85 b3       	in	r24, 0x15	; 21
 236:	8d 7f       	andi	r24, 0xFD	; 253
 238:	85 bb       	out	0x15, r24	; 21
			
			OCR0 += 10;
 23a:	8c b7       	in	r24, 0x3c	; 60
 23c:	86 5f       	subi	r24, 0xF6	; 246
 23e:	8c bf       	out	0x3c, r24	; 60
			lcd_pos(0,0);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
			printf("OCR0: %d", OCR0);
 248:	8c b7       	in	r24, 0x3c	; 60
 24a:	1f 92       	push	r1
 24c:	8f 93       	push	r24
 24e:	80 e6       	ldi	r24, 0x60	; 96
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	9f 93       	push	r25
 254:	8f 93       	push	r24
 256:	0e 94 51 03 	call	0x6a2	; 0x6a2 <tfp_printf>
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	e3 cf       	rjmp	.-58     	; 0x22a <main+0x10>
		}
		else if(!(PINA & (1 << PA1)))
 264:	c9 99       	sbic	0x19, 1	; 25
 266:	e1 cf       	rjmp	.-62     	; 0x22a <main+0x10>
		{
			PORTC &= ~(1 << PC0);
 268:	85 b3       	in	r24, 0x15	; 21
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	85 bb       	out	0x15, r24	; 21
			PORTC |= (1 << PC1);
 26e:	85 b3       	in	r24, 0x15	; 21
 270:	82 60       	ori	r24, 0x02	; 2
 272:	85 bb       	out	0x15, r24	; 21
			
			OCR0 -= 10;
 274:	8c b7       	in	r24, 0x3c	; 60
 276:	8a 50       	subi	r24, 0x0A	; 10
 278:	8c bf       	out	0x3c, r24	; 60
			lcd_pos(0,0);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
			printf("OCR0: %d", OCR0);
 282:	8c b7       	in	r24, 0x3c	; 60
 284:	1f 92       	push	r1
 286:	8f 93       	push	r24
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9f 93       	push	r25
 28e:	8f 93       	push	r24
 290:	0e 94 51 03 	call	0x6a2	; 0x6a2 <tfp_printf>
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	c6 cf       	rjmp	.-116    	; 0x22a <main+0x10>

0000029e <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 29e:	8f 92       	push	r8
 2a0:	9f 92       	push	r9
 2a2:	af 92       	push	r10
 2a4:	bf 92       	push	r11
 2a6:	cf 92       	push	r12
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	c8 2f       	mov	r28, r24
 2b8:	d9 2f       	mov	r29, r25
 2ba:	8b 01       	movw	r16, r22
 2bc:	6a 01       	movw	r12, r20
 2be:	79 01       	movw	r14, r18
 2c0:	e1 e0       	ldi	r30, 0x01	; 1
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <ui2a+0x38>
 2c6:	cf 01       	movw	r24, r30
 2c8:	80 9f       	mul	r24, r16
 2ca:	f0 01       	movw	r30, r0
 2cc:	81 9f       	mul	r24, r17
 2ce:	f0 0d       	add	r31, r0
 2d0:	90 9f       	mul	r25, r16
 2d2:	f0 0d       	add	r31, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8c 2f       	mov	r24, r28
 2d8:	9d 2f       	mov	r25, r29
 2da:	bf 01       	movw	r22, r30
 2dc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__udivmodhi4>
 2e0:	60 17       	cp	r22, r16
 2e2:	71 07       	cpc	r23, r17
 2e4:	80 f7       	brcc	.-32     	; 0x2c6 <ui2a+0x28>
 2e6:	a1 2c       	mov	r10, r1
 2e8:	b1 2c       	mov	r11, r1
 2ea:	2c c0       	rjmp	.+88     	; 0x344 <ui2a+0xa6>
 2ec:	8c 2f       	mov	r24, r28
 2ee:	9d 2f       	mov	r25, r29
 2f0:	bf 01       	movw	r22, r30
 2f2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__udivmodhi4>
 2f6:	36 2f       	mov	r19, r22
 2f8:	86 2e       	mov	r8, r22
 2fa:	97 2e       	mov	r9, r23
 2fc:	c8 2f       	mov	r28, r24
 2fe:	d9 2f       	mov	r29, r25
 300:	cf 01       	movw	r24, r30
 302:	b8 01       	movw	r22, r16
 304:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__udivmodhi4>
 308:	fb 01       	movw	r30, r22
 30a:	a1 14       	cp	r10, r1
 30c:	b1 04       	cpc	r11, r1
 30e:	29 f4       	brne	.+10     	; 0x31a <ui2a+0x7c>
 310:	18 14       	cp	r1, r8
 312:	19 04       	cpc	r1, r9
 314:	14 f0       	brlt	.+4      	; 0x31a <ui2a+0x7c>
 316:	30 97       	sbiw	r30, 0x00	; 0
 318:	a9 f4       	brne	.+42     	; 0x344 <ui2a+0xa6>
 31a:	c7 01       	movw	r24, r14
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	aa e0       	ldi	r26, 0x0A	; 10
 320:	8a 16       	cp	r8, r26
 322:	91 04       	cpc	r9, r1
 324:	2c f0       	brlt	.+10     	; 0x330 <ui2a+0x92>
 326:	c1 14       	cp	r12, r1
 328:	d1 04       	cpc	r13, r1
 32a:	21 f0       	breq	.+8      	; 0x334 <ui2a+0x96>
 32c:	27 e3       	ldi	r18, 0x37	; 55
 32e:	03 c0       	rjmp	.+6      	; 0x336 <ui2a+0x98>
 330:	20 e3       	ldi	r18, 0x30	; 48
 332:	01 c0       	rjmp	.+2      	; 0x336 <ui2a+0x98>
 334:	27 e5       	ldi	r18, 0x57	; 87
 336:	32 0f       	add	r19, r18
 338:	d7 01       	movw	r26, r14
 33a:	3c 93       	st	X, r19
 33c:	bf ef       	ldi	r27, 0xFF	; 255
 33e:	ab 1a       	sub	r10, r27
 340:	bb 0a       	sbc	r11, r27
 342:	7c 01       	movw	r14, r24
 344:	30 97       	sbiw	r30, 0x00	; 0
 346:	91 f6       	brne	.-92     	; 0x2ec <ui2a+0x4e>
 348:	f7 01       	movw	r30, r14
 34a:	10 82       	st	Z, r1
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	df 90       	pop	r13
 35a:	cf 90       	pop	r12
 35c:	bf 90       	pop	r11
 35e:	af 90       	pop	r10
 360:	9f 90       	pop	r9
 362:	8f 90       	pop	r8
 364:	08 95       	ret

00000366 <i2a>:
 366:	9b 01       	movw	r18, r22
 368:	99 23       	and	r25, r25
 36a:	44 f4       	brge	.+16     	; 0x37c <i2a+0x16>
 36c:	91 95       	neg	r25
 36e:	81 95       	neg	r24
 370:	91 09       	sbc	r25, r1
 372:	4d e2       	ldi	r20, 0x2D	; 45
 374:	fb 01       	movw	r30, r22
 376:	40 83       	st	Z, r20
 378:	2f 5f       	subi	r18, 0xFF	; 255
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	6a e0       	ldi	r22, 0x0A	; 10
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	0e 94 4f 01 	call	0x29e	; 0x29e <ui2a>
 388:	08 95       	ret

0000038a <a2d>:
 38a:	90 ed       	ldi	r25, 0xD0	; 208
 38c:	98 0f       	add	r25, r24
 38e:	9a 30       	cpi	r25, 0x0A	; 10
 390:	18 f4       	brcc	.+6      	; 0x398 <a2d+0xe>
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	c0 97       	sbiw	r24, 0x30	; 48
 396:	08 95       	ret
 398:	9f e9       	ldi	r25, 0x9F	; 159
 39a:	98 0f       	add	r25, r24
 39c:	96 30       	cpi	r25, 0x06	; 6
 39e:	20 f4       	brcc	.+8      	; 0x3a8 <a2d+0x1e>
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	87 55       	subi	r24, 0x57	; 87
 3a4:	91 09       	sbc	r25, r1
 3a6:	08 95       	ret
 3a8:	9f eb       	ldi	r25, 0xBF	; 191
 3aa:	98 0f       	add	r25, r24
 3ac:	96 30       	cpi	r25, 0x06	; 6
 3ae:	18 f4       	brcc	.+6      	; 0x3b6 <a2d+0x2c>
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	c7 97       	sbiw	r24, 0x37	; 55
 3b4:	08 95       	ret
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	9f ef       	ldi	r25, 0xFF	; 255
 3ba:	08 95       	ret

000003bc <a2i>:
 3bc:	9f 92       	push	r9
 3be:	af 92       	push	r10
 3c0:	bf 92       	push	r11
 3c2:	cf 92       	push	r12
 3c4:	df 92       	push	r13
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	98 2e       	mov	r9, r24
 3d4:	5b 01       	movw	r10, r22
 3d6:	7a 01       	movw	r14, r20
 3d8:	69 01       	movw	r12, r18
 3da:	fb 01       	movw	r30, r22
 3dc:	c0 81       	ld	r28, Z
 3de:	d1 81       	ldd	r29, Z+1	; 0x01
 3e0:	00 e0       	ldi	r16, 0x00	; 0
 3e2:	10 e0       	ldi	r17, 0x00	; 0
 3e4:	0f c0       	rjmp	.+30     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3e6:	e8 16       	cp	r14, r24
 3e8:	f9 06       	cpc	r15, r25
 3ea:	8c f0       	brlt	.+34     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 3ec:	0e 9d       	mul	r16, r14
 3ee:	90 01       	movw	r18, r0
 3f0:	0f 9d       	mul	r16, r15
 3f2:	30 0d       	add	r19, r0
 3f4:	1e 9d       	mul	r17, r14
 3f6:	30 0d       	add	r19, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	8c 01       	movw	r16, r24
 3fc:	02 0f       	add	r16, r18
 3fe:	13 1f       	adc	r17, r19
 400:	98 80       	ld	r9, Y
 402:	21 96       	adiw	r28, 0x01	; 1
 404:	89 2d       	mov	r24, r9
 406:	0e 94 c5 01 	call	0x38a	; 0x38a <a2d>
 40a:	99 23       	and	r25, r25
 40c:	64 f7       	brge	.-40     	; 0x3e6 <a2i+0x2a>
 40e:	f5 01       	movw	r30, r10
 410:	d1 83       	std	Z+1, r29	; 0x01
 412:	c0 83       	st	Z, r28
 414:	f6 01       	movw	r30, r12
 416:	11 83       	std	Z+1, r17	; 0x01
 418:	00 83       	st	Z, r16
 41a:	89 2d       	mov	r24, r9
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	df 90       	pop	r13
 42a:	cf 90       	pop	r12
 42c:	bf 90       	pop	r11
 42e:	af 90       	pop	r10
 430:	9f 90       	pop	r9
 432:	08 95       	ret

00000434 <putchw>:
 434:	bf 92       	push	r11
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	6c 01       	movw	r12, r24
 448:	7b 01       	movw	r14, r22
 44a:	e8 01       	movw	r28, r16
 44c:	22 23       	and	r18, r18
 44e:	29 f0       	breq	.+10     	; 0x45a <putchw+0x26>
 450:	0f 2e       	mov	r0, r31
 452:	f0 e3       	ldi	r31, 0x30	; 48
 454:	bf 2e       	mov	r11, r31
 456:	f0 2d       	mov	r31, r0
 458:	03 c0       	rjmp	.+6      	; 0x460 <__stack+0x1>
 45a:	68 94       	set
 45c:	bb 24       	eor	r11, r11
 45e:	b5 f8       	bld	r11, 5
 460:	fe 01       	movw	r30, r28
 462:	03 c0       	rjmp	.+6      	; 0x46a <__stack+0xb>
 464:	41 50       	subi	r20, 0x01	; 1
 466:	51 09       	sbc	r21, r1
 468:	f9 01       	movw	r30, r18
 46a:	9f 01       	movw	r18, r30
 46c:	2f 5f       	subi	r18, 0xFF	; 255
 46e:	3f 4f       	sbci	r19, 0xFF	; 255
 470:	80 81       	ld	r24, Z
 472:	88 23       	and	r24, r24
 474:	49 f0       	breq	.+18     	; 0x488 <__stack+0x29>
 476:	14 16       	cp	r1, r20
 478:	15 06       	cpc	r1, r21
 47a:	a4 f3       	brlt	.-24     	; 0x464 <__stack+0x5>
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__stack+0x29>
 47e:	6b 2d       	mov	r22, r11
 480:	c6 01       	movw	r24, r12
 482:	f7 01       	movw	r30, r14
 484:	09 95       	icall
 486:	a8 01       	movw	r20, r16
 488:	8a 01       	movw	r16, r20
 48a:	01 50       	subi	r16, 0x01	; 1
 48c:	11 09       	sbc	r17, r1
 48e:	14 16       	cp	r1, r20
 490:	15 06       	cpc	r1, r21
 492:	ac f3       	brlt	.-22     	; 0x47e <__stack+0x1f>
 494:	04 c0       	rjmp	.+8      	; 0x49e <__stack+0x3f>
 496:	c6 01       	movw	r24, r12
 498:	f7 01       	movw	r30, r14
 49a:	09 95       	icall
 49c:	e8 01       	movw	r28, r16
 49e:	8e 01       	movw	r16, r28
 4a0:	0f 5f       	subi	r16, 0xFF	; 255
 4a2:	1f 4f       	sbci	r17, 0xFF	; 255
 4a4:	68 81       	ld	r22, Y
 4a6:	61 11       	cpse	r22, r1
 4a8:	f6 cf       	rjmp	.-20     	; 0x496 <__stack+0x37>
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	ff 90       	pop	r15
 4b4:	ef 90       	pop	r14
 4b6:	df 90       	pop	r13
 4b8:	cf 90       	pop	r12
 4ba:	bf 90       	pop	r11
 4bc:	08 95       	ret

000004be <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
 4be:	9f 92       	push	r9
 4c0:	af 92       	push	r10
 4c2:	bf 92       	push	r11
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	60 97       	sbiw	r28, 0x10	; 16
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	6c 01       	movw	r12, r24
 4e6:	7b 01       	movw	r14, r22
 4e8:	58 8b       	std	Y+16, r21	; 0x10
 4ea:	4f 87       	std	Y+15, r20	; 0x0f
 4ec:	89 01       	movw	r16, r18
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 4ee:	b5 c0       	rjmp	.+362    	; 0x65a <tfp_format+0x19c>
		if (ch!='%') 
 4f0:	65 32       	cpi	r22, 0x25	; 37
 4f2:	21 f0       	breq	.+8      	; 0x4fc <tfp_format+0x3e>
			putf(putp,ch);
 4f4:	c6 01       	movw	r24, r12
 4f6:	f7 01       	movw	r30, r14
 4f8:	09 95       	icall
 4fa:	af c0       	rjmp	.+350    	; 0x65a <tfp_format+0x19c>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
 4fc:	1e 86       	std	Y+14, r1	; 0x0e
 4fe:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 500:	9d 01       	movw	r18, r26
 502:	2f 5f       	subi	r18, 0xFF	; 255
 504:	3f 4f       	sbci	r19, 0xFF	; 255
 506:	38 8b       	std	Y+16, r19	; 0x10
 508:	2f 87       	std	Y+15, r18	; 0x0f
 50a:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 50c:	80 33       	cpi	r24, 0x30	; 48
 50e:	49 f4       	brne	.+18     	; 0x522 <tfp_format+0x64>
				ch=*(fmt++);
 510:	2f 5f       	subi	r18, 0xFF	; 255
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	38 8b       	std	Y+16, r19	; 0x10
 516:	2f 87       	std	Y+15, r18	; 0x0f
 518:	11 96       	adiw	r26, 0x01	; 1
 51a:	8c 91       	ld	r24, X
				lz=1;
 51c:	99 24       	eor	r9, r9
 51e:	93 94       	inc	r9
 520:	01 c0       	rjmp	.+2      	; 0x524 <tfp_format+0x66>

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
 522:	91 2c       	mov	r9, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 524:	90 ed       	ldi	r25, 0xD0	; 208
 526:	98 0f       	add	r25, r24
 528:	9a 30       	cpi	r25, 0x0A	; 10
 52a:	50 f4       	brcc	.+20     	; 0x540 <tfp_format+0x82>
				ch=a2i(ch,&fmt,10,&w);
 52c:	9e 01       	movw	r18, r28
 52e:	23 5f       	subi	r18, 0xF3	; 243
 530:	3f 4f       	sbci	r19, 0xFF	; 255
 532:	4a e0       	ldi	r20, 0x0A	; 10
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	be 01       	movw	r22, r28
 538:	61 5f       	subi	r22, 0xF1	; 241
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	0e 94 de 01 	call	0x3bc	; 0x3bc <a2i>
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 540:	83 36       	cpi	r24, 0x63	; 99
 542:	09 f4       	brne	.+2      	; 0x546 <tfp_format+0x88>
 544:	6b c0       	rjmp	.+214    	; 0x61c <tfp_format+0x15e>
 546:	50 f4       	brcc	.+20     	; 0x55c <tfp_format+0x9e>
 548:	85 32       	cpi	r24, 0x25	; 37
 54a:	09 f4       	brne	.+2      	; 0x54e <tfp_format+0x90>
 54c:	82 c0       	rjmp	.+260    	; 0x652 <tfp_format+0x194>
 54e:	88 35       	cpi	r24, 0x58	; 88
 550:	09 f4       	brne	.+2      	; 0x554 <tfp_format+0x96>
 552:	44 c0       	rjmp	.+136    	; 0x5dc <tfp_format+0x11e>
 554:	88 23       	and	r24, r24
 556:	09 f4       	brne	.+2      	; 0x55a <tfp_format+0x9c>
 558:	89 c0       	rjmp	.+274    	; 0x66c <tfp_format+0x1ae>
 55a:	7f c0       	rjmp	.+254    	; 0x65a <tfp_format+0x19c>
 55c:	83 37       	cpi	r24, 0x73	; 115
 55e:	09 f4       	brne	.+2      	; 0x562 <tfp_format+0xa4>
 560:	68 c0       	rjmp	.+208    	; 0x632 <tfp_format+0x174>
 562:	18 f4       	brcc	.+6      	; 0x56a <tfp_format+0xac>
 564:	84 36       	cpi	r24, 0x64	; 100
 566:	11 f1       	breq	.+68     	; 0x5ac <tfp_format+0xee>
 568:	78 c0       	rjmp	.+240    	; 0x65a <tfp_format+0x19c>
 56a:	85 37       	cpi	r24, 0x75	; 117
 56c:	19 f0       	breq	.+6      	; 0x574 <tfp_format+0xb6>
 56e:	88 37       	cpi	r24, 0x78	; 120
 570:	a9 f1       	breq	.+106    	; 0x5dc <tfp_format+0x11e>
 572:	73 c0       	rjmp	.+230    	; 0x65a <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 574:	58 01       	movw	r10, r16
 576:	f2 e0       	ldi	r31, 0x02	; 2
 578:	af 0e       	add	r10, r31
 57a:	b1 1c       	adc	r11, r1
 57c:	9e 01       	movw	r18, r28
 57e:	2f 5f       	subi	r18, 0xFF	; 255
 580:	3f 4f       	sbci	r19, 0xFF	; 255
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	6a e0       	ldi	r22, 0x0A	; 10
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	f8 01       	movw	r30, r16
 58c:	80 81       	ld	r24, Z
 58e:	91 81       	ldd	r25, Z+1	; 0x01
 590:	0e 94 4f 01 	call	0x29e	; 0x29e <ui2a>
					putchw(putp,putf,w,lz,bf);
 594:	4d 85       	ldd	r20, Y+13	; 0x0d
 596:	5e 85       	ldd	r21, Y+14	; 0x0e
 598:	8e 01       	movw	r16, r28
 59a:	0f 5f       	subi	r16, 0xFF	; 255
 59c:	1f 4f       	sbci	r17, 0xFF	; 255
 59e:	29 2d       	mov	r18, r9
 5a0:	b7 01       	movw	r22, r14
 5a2:	c6 01       	movw	r24, r12
 5a4:	0e 94 1a 02 	call	0x434	; 0x434 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 5a8:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 5aa:	57 c0       	rjmp	.+174    	; 0x65a <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 5ac:	58 01       	movw	r10, r16
 5ae:	f2 e0       	ldi	r31, 0x02	; 2
 5b0:	af 0e       	add	r10, r31
 5b2:	b1 1c       	adc	r11, r1
 5b4:	be 01       	movw	r22, r28
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	f8 01       	movw	r30, r16
 5bc:	80 81       	ld	r24, Z
 5be:	91 81       	ldd	r25, Z+1	; 0x01
 5c0:	0e 94 b3 01 	call	0x366	; 0x366 <i2a>
					putchw(putp,putf,w,lz,bf);
 5c4:	4d 85       	ldd	r20, Y+13	; 0x0d
 5c6:	5e 85       	ldd	r21, Y+14	; 0x0e
 5c8:	8e 01       	movw	r16, r28
 5ca:	0f 5f       	subi	r16, 0xFF	; 255
 5cc:	1f 4f       	sbci	r17, 0xFF	; 255
 5ce:	29 2d       	mov	r18, r9
 5d0:	b7 01       	movw	r22, r14
 5d2:	c6 01       	movw	r24, r12
 5d4:	0e 94 1a 02 	call	0x434	; 0x434 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 5d8:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 5da:	3f c0       	rjmp	.+126    	; 0x65a <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 5dc:	58 01       	movw	r10, r16
 5de:	f2 e0       	ldi	r31, 0x02	; 2
 5e0:	af 0e       	add	r10, r31
 5e2:	b1 1c       	adc	r11, r1
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	88 35       	cpi	r24, 0x58	; 88
 5ea:	11 f0       	breq	.+4      	; 0x5f0 <tfp_format+0x132>
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	9e 01       	movw	r18, r28
 5f2:	2f 5f       	subi	r18, 0xFF	; 255
 5f4:	3f 4f       	sbci	r19, 0xFF	; 255
 5f6:	60 e1       	ldi	r22, 0x10	; 16
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	f8 01       	movw	r30, r16
 5fc:	80 81       	ld	r24, Z
 5fe:	91 81       	ldd	r25, Z+1	; 0x01
 600:	0e 94 4f 01 	call	0x29e	; 0x29e <ui2a>
					putchw(putp,putf,w,lz,bf);
 604:	4d 85       	ldd	r20, Y+13	; 0x0d
 606:	5e 85       	ldd	r21, Y+14	; 0x0e
 608:	8e 01       	movw	r16, r28
 60a:	0f 5f       	subi	r16, 0xFF	; 255
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	29 2d       	mov	r18, r9
 610:	b7 01       	movw	r22, r14
 612:	c6 01       	movw	r24, r12
 614:	0e 94 1a 02 	call	0x434	; 0x434 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 618:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 61a:	1f c0       	rjmp	.+62     	; 0x65a <tfp_format+0x19c>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 61c:	58 01       	movw	r10, r16
 61e:	f2 e0       	ldi	r31, 0x02	; 2
 620:	af 0e       	add	r10, r31
 622:	b1 1c       	adc	r11, r1
 624:	f8 01       	movw	r30, r16
 626:	60 81       	ld	r22, Z
 628:	c6 01       	movw	r24, r12
 62a:	f7 01       	movw	r30, r14
 62c:	09 95       	icall
 62e:	85 01       	movw	r16, r10
					break;
 630:	14 c0       	rjmp	.+40     	; 0x65a <tfp_format+0x19c>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 632:	58 01       	movw	r10, r16
 634:	f2 e0       	ldi	r31, 0x02	; 2
 636:	af 0e       	add	r10, r31
 638:	b1 1c       	adc	r11, r1
 63a:	f8 01       	movw	r30, r16
 63c:	00 81       	ld	r16, Z
 63e:	11 81       	ldd	r17, Z+1	; 0x01
 640:	4d 85       	ldd	r20, Y+13	; 0x0d
 642:	5e 85       	ldd	r21, Y+14	; 0x0e
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	b7 01       	movw	r22, r14
 648:	c6 01       	movw	r24, r12
 64a:	0e 94 1a 02 	call	0x434	; 0x434 <putchw>
 64e:	85 01       	movw	r16, r10
					break;
 650:	04 c0       	rjmp	.+8      	; 0x65a <tfp_format+0x19c>
				case '%' :
					putf(putp,ch);
 652:	68 2f       	mov	r22, r24
 654:	c6 01       	movw	r24, r12
 656:	f7 01       	movw	r30, r14
 658:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 65a:	ef 85       	ldd	r30, Y+15	; 0x0f
 65c:	f8 89       	ldd	r31, Y+16	; 0x10
 65e:	df 01       	movw	r26, r30
 660:	11 96       	adiw	r26, 0x01	; 1
 662:	b8 8b       	std	Y+16, r27	; 0x10
 664:	af 87       	std	Y+15, r26	; 0x0f
 666:	60 81       	ld	r22, Z
 668:	61 11       	cpse	r22, r1
 66a:	42 cf       	rjmp	.-380    	; 0x4f0 <tfp_format+0x32>
					break;
				}
			}
		}
	abort:;
	}
 66c:	60 96       	adiw	r28, 0x10	; 16
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	f8 94       	cli
 672:	de bf       	out	0x3e, r29	; 62
 674:	0f be       	out	0x3f, r0	; 63
 676:	cd bf       	out	0x3d, r28	; 61
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	1f 91       	pop	r17
 67e:	0f 91       	pop	r16
 680:	ff 90       	pop	r15
 682:	ef 90       	pop	r14
 684:	df 90       	pop	r13
 686:	cf 90       	pop	r12
 688:	bf 90       	pop	r11
 68a:	af 90       	pop	r10
 68c:	9f 90       	pop	r9
 68e:	08 95       	ret

00000690 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 690:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <stdout_putf+0x1>
 694:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <stdout_putf>
	stdout_putp=putp;
 698:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 69c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 6a0:	08 95       	ret

000006a2 <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	9e 01       	movw	r18, r28
 6ac:	2b 5f       	subi	r18, 0xFB	; 251
 6ae:	3f 4f       	sbci	r19, 0xFF	; 255
 6b0:	f9 01       	movw	r30, r18
 6b2:	41 91       	ld	r20, Z+
 6b4:	51 91       	ld	r21, Z+
 6b6:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 6b8:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <stdout_putf>
 6bc:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <stdout_putf+0x1>
 6c0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 6c4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 6c8:	0e 94 5f 02 	call	0x4be	; 0x4be <tfp_format>
	va_end(va);
	}
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	08 95       	ret

000006d2 <__udivmodhi4>:
 6d2:	aa 1b       	sub	r26, r26
 6d4:	bb 1b       	sub	r27, r27
 6d6:	51 e1       	ldi	r21, 0x11	; 17
 6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <__udivmodhi4_ep>

000006da <__udivmodhi4_loop>:
 6da:	aa 1f       	adc	r26, r26
 6dc:	bb 1f       	adc	r27, r27
 6de:	a6 17       	cp	r26, r22
 6e0:	b7 07       	cpc	r27, r23
 6e2:	10 f0       	brcs	.+4      	; 0x6e8 <__udivmodhi4_ep>
 6e4:	a6 1b       	sub	r26, r22
 6e6:	b7 0b       	sbc	r27, r23

000006e8 <__udivmodhi4_ep>:
 6e8:	88 1f       	adc	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	5a 95       	dec	r21
 6ee:	a9 f7       	brne	.-22     	; 0x6da <__udivmodhi4_loop>
 6f0:	80 95       	com	r24
 6f2:	90 95       	com	r25
 6f4:	bc 01       	movw	r22, r24
 6f6:	cd 01       	movw	r24, r26
 6f8:	08 95       	ret

000006fa <_exit>:
 6fa:	f8 94       	cli

000006fc <__stop_program>:
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <__stop_program>


NormalWatchStopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000868  000008fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080008e  0080008e  0000092a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ff  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e7  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a74  00000000  00000000  0000296e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000033e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000510  00000000  00000000  0000370c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000121a  00000000  00000000  00003c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004e36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 39       	cpi	r26, 0x97	; 151
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 01 	call	0x388	; 0x388 <main>
  8a:	0c 94 32 04 	jmp	0x864	; 0x864 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <initPorts>:
	stopwatch_mode = 0;
}

void initPorts()
{
	DDRA &= ~(1 << PA0)|(1 << PA1);
 1e6:	8a b3       	in	r24, 0x1a	; 26
 1e8:	8e 7f       	andi	r24, 0xFE	; 254
 1ea:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0)|(1 << PA1);
 1ec:	8b b3       	in	r24, 0x1b	; 27
 1ee:	83 60       	ori	r24, 0x03	; 3
 1f0:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	84 bb       	out	0x14, r24	; 20
	PORTC &= 0x00;
 1f6:	85 b3       	in	r24, 0x15	; 21
 1f8:	15 ba       	out	0x15, r1	; 21
 1fa:	08 95       	ret

000001fc <initTimer1>:
}

void initTimer1()
{
    TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
 1fc:	8e b5       	in	r24, 0x2e	; 46
 1fe:	8d 60       	ori	r24, 0x0D	; 13
 200:	8e bd       	out	0x2e, r24	; 46
    OCR1A = 11718;
 202:	86 ec       	ldi	r24, 0xC6	; 198
 204:	9d e2       	ldi	r25, 0x2D	; 45
 206:	9b bd       	out	0x2b, r25	; 43
 208:	8a bd       	out	0x2a, r24	; 42
    TIMSK |= (1 << OCIE1A);
 20a:	89 b7       	in	r24, 0x39	; 57
 20c:	80 61       	ori	r24, 0x10	; 16
 20e:	89 bf       	out	0x39, r24	; 57
    sei();
 210:	78 94       	sei
 212:	08 95       	ret

00000214 <updateDisplay>:
}

void updateDisplay()
{
	lcd_pos(0,0);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
	printf("TIME: %02d:%02d:%02d", hours, minutes, seconds);
 21c:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <seconds>
 220:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <minutes>
 224:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <hours>
 228:	1f 92       	push	r1
 22a:	2f 93       	push	r18
 22c:	1f 92       	push	r1
 22e:	9f 93       	push	r25
 230:	1f 92       	push	r1
 232:	8f 93       	push	r24
 234:	80 e6       	ldi	r24, 0x60	; 96
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	9f 93       	push	r25
 23a:	8f 93       	push	r24
 23c:	0e 94 06 04 	call	0x80c	; 0x80c <tfp_printf>
}
 240:	8d b7       	in	r24, 0x3d	; 61
 242:	9e b7       	in	r25, 0x3e	; 62
 244:	08 96       	adiw	r24, 0x08	; 8
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	9e bf       	out	0x3e, r25	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	8d bf       	out	0x3d, r24	; 61
 250:	08 95       	ret

00000252 <updateStopwatchDisplay>:

void updateStopwatchDisplay()
{
	lcd_pos(0,0);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
	printf("SW: %02d:%02d:%02d.%02d", hours, minutes, seconds, milliseconds);
 25a:	30 91 92 00 	lds	r19, 0x0092	; 0x800092 <milliseconds>
 25e:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <seconds>
 262:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <minutes>
 266:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <hours>
 26a:	1f 92       	push	r1
 26c:	3f 93       	push	r19
 26e:	1f 92       	push	r1
 270:	2f 93       	push	r18
 272:	1f 92       	push	r1
 274:	9f 93       	push	r25
 276:	1f 92       	push	r1
 278:	8f 93       	push	r24
 27a:	85 e7       	ldi	r24, 0x75	; 117
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	9f 93       	push	r25
 280:	8f 93       	push	r24
 282:	0e 94 06 04 	call	0x80c	; 0x80c <tfp_printf>
}
 286:	8d b7       	in	r24, 0x3d	; 61
 288:	9e b7       	in	r25, 0x3e	; 62
 28a:	0a 96       	adiw	r24, 0x0a	; 10
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	9e bf       	out	0x3e, r25	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	8d bf       	out	0x3d, r24	; 61
 296:	08 95       	ret

00000298 <__vector_6>:
volatile uint8_t minutes = 0;
volatile uint8_t hours = 0;
volatile uint8_t stopwatch_mode = 0;

ISR(TIMER1_COMPA_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	3f 93       	push	r19
 2a6:	4f 93       	push	r20
 2a8:	5f 93       	push	r21
 2aa:	6f 93       	push	r22
 2ac:	7f 93       	push	r23
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	if(stopwatch_mode)
 2ba:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 2be:	88 23       	and	r24, r24
 2c0:	79 f1       	breq	.+94     	; 0x320 <__vector_6+0x88>
	{
		milliseconds++;
 2c2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <milliseconds>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <milliseconds>
		
		if(milliseconds >= 100)
 2cc:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <milliseconds>
 2d0:	84 36       	cpi	r24, 0x64	; 100
 2d2:	38 f0       	brcs	.+14     	; 0x2e2 <__vector_6+0x4a>
		{
			milliseconds = 0;
 2d4:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <milliseconds>
			seconds++;
 2d8:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <seconds>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <seconds>
		}
		if(seconds >= 60)
 2e2:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <seconds>
 2e6:	8c 33       	cpi	r24, 0x3C	; 60
 2e8:	38 f0       	brcs	.+14     	; 0x2f8 <__vector_6+0x60>
		{
			seconds = 0;
 2ea:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <seconds>
			minutes++;
 2ee:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <minutes>
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <minutes>
		}
		if(minutes >= 60)
 2f8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <minutes>
 2fc:	8c 33       	cpi	r24, 0x3C	; 60
 2fe:	38 f0       	brcs	.+14     	; 0x30e <__vector_6+0x76>
		{
			minutes = 0;
 300:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <minutes>
			hours++;
 304:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <hours>
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <hours>
		}
		if(hours >= 24)
 30e:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <hours>
 312:	88 31       	cpi	r24, 0x18	; 24
 314:	10 f0       	brcs	.+4      	; 0x31a <__vector_6+0x82>
		{
			hours = 0;
 316:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <hours>
		}
		updateStopwatchDisplay();
 31a:	0e 94 29 01 	call	0x252	; 0x252 <updateStopwatchDisplay>
 31e:	23 c0       	rjmp	.+70     	; 0x366 <__vector_6+0xce>
	}
	else
	{
		seconds++;
 320:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <seconds>
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <seconds>
		
		if(seconds >= 60)
 32a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <seconds>
 32e:	8c 33       	cpi	r24, 0x3C	; 60
 330:	c0 f0       	brcs	.+48     	; 0x362 <__vector_6+0xca>
		{
			seconds = 0;
 332:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <seconds>
			minutes++;
 336:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <minutes>
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <minutes>
			
			if(minutes >= 60)
 340:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <minutes>
 344:	8c 33       	cpi	r24, 0x3C	; 60
 346:	68 f0       	brcs	.+26     	; 0x362 <__vector_6+0xca>
			{
				minutes = 0;
 348:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <minutes>
				hours++;
 34c:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <hours>
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <hours>
				
				if(hours >= 24)
 356:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <hours>
 35a:	88 31       	cpi	r24, 0x18	; 24
 35c:	10 f0       	brcs	.+4      	; 0x362 <__vector_6+0xca>
				{
					hours = 0;
 35e:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <hours>
				}
			}
		}
		updateDisplay();
 362:	0e 94 0a 01 	call	0x214	; 0x214 <updateDisplay>
	}
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <main>:
	printf("SW: %02d:%02d:%02d.%02d", hours, minutes, seconds, milliseconds);
}

int main(void)
{
	initPorts();
 388:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <initPorts>
	initTimer1();
 38c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <initTimer1>
	lcd_init();
 390:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	
	while(1)
	{
        if(!(PINA & (1 << PA0)))
 394:	c8 99       	sbic	0x19, 0	; 25
 396:	1a c0       	rjmp	.+52     	; 0x3cc <main+0x44>
 398:	2f eb       	ldi	r18, 0xBF	; 191
 39a:	84 ed       	ldi	r24, 0xD4	; 212
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0x16>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x20>
 3a8:	00 00       	nop
        {
	        _delay_ms(50);
	        if(!(PINA & (1 << PA0)))
 3aa:	c8 99       	sbic	0x19, 0	; 25
 3ac:	0f c0       	rjmp	.+30     	; 0x3cc <main+0x44>
	        {
		        stopwatch_mode = 0;
 3ae:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__data_end>
				//resetTimerVariables();
		        updateDisplay();
 3b2:	0e 94 0a 01 	call	0x214	; 0x214 <updateDisplay>
		        while(!(PINA & (1 << PA0))) {}
 3b6:	c8 9b       	sbis	0x19, 0	; 25
 3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <main+0x2e>
 3ba:	2f eb       	ldi	r18, 0xBF	; 191
 3bc:	84 ed       	ldi	r24, 0xD4	; 212
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x38>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x42>
 3ca:	00 00       	nop
		        _delay_ms(50);
	        }
        }
        
        if(!(PINA & (1 << PA1)))
 3cc:	c9 99       	sbic	0x19, 1	; 25
 3ce:	e2 cf       	rjmp	.-60     	; 0x394 <main+0xc>
 3d0:	2f eb       	ldi	r18, 0xBF	; 191
 3d2:	84 ed       	ldi	r24, 0xD4	; 212
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x4e>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x58>
 3e0:	00 00       	nop
        {
	        _delay_ms(50);
	        if(!(PINA & (1 << PA1)))
 3e2:	c9 99       	sbic	0x19, 1	; 25
 3e4:	d7 cf       	rjmp	.-82     	; 0x394 <main+0xc>
	        {
		        stopwatch_mode = 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
				//resetTimerVariables();
		        updateStopwatchDisplay();
 3ec:	0e 94 29 01 	call	0x252	; 0x252 <updateStopwatchDisplay>
		        while(!(PINA & (1 << PA1))) {}
 3f0:	c9 9b       	sbis	0x19, 1	; 25
 3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <main+0x68>
 3f4:	2f eb       	ldi	r18, 0xBF	; 191
 3f6:	84 ed       	ldi	r24, 0xD4	; 212
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x72>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	c6 cf       	rjmp	.-116    	; 0x394 <main+0xc>

00000408 <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 408:	8f 92       	push	r8
 40a:	9f 92       	push	r9
 40c:	af 92       	push	r10
 40e:	bf 92       	push	r11
 410:	cf 92       	push	r12
 412:	df 92       	push	r13
 414:	ef 92       	push	r14
 416:	ff 92       	push	r15
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	c8 2f       	mov	r28, r24
 422:	d9 2f       	mov	r29, r25
 424:	8b 01       	movw	r16, r22
 426:	6a 01       	movw	r12, r20
 428:	79 01       	movw	r14, r18
 42a:	e1 e0       	ldi	r30, 0x01	; 1
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	08 c0       	rjmp	.+16     	; 0x440 <ui2a+0x38>
 430:	cf 01       	movw	r24, r30
 432:	80 9f       	mul	r24, r16
 434:	f0 01       	movw	r30, r0
 436:	81 9f       	mul	r24, r17
 438:	f0 0d       	add	r31, r0
 43a:	90 9f       	mul	r25, r16
 43c:	f0 0d       	add	r31, r0
 43e:	11 24       	eor	r1, r1
 440:	8c 2f       	mov	r24, r28
 442:	9d 2f       	mov	r25, r29
 444:	bf 01       	movw	r22, r30
 446:	0e 94 1e 04 	call	0x83c	; 0x83c <__udivmodhi4>
 44a:	60 17       	cp	r22, r16
 44c:	71 07       	cpc	r23, r17
 44e:	80 f7       	brcc	.-32     	; 0x430 <ui2a+0x28>
 450:	a1 2c       	mov	r10, r1
 452:	b1 2c       	mov	r11, r1
 454:	2c c0       	rjmp	.+88     	; 0x4ae <__stack+0x4f>
 456:	8c 2f       	mov	r24, r28
 458:	9d 2f       	mov	r25, r29
 45a:	bf 01       	movw	r22, r30
 45c:	0e 94 1e 04 	call	0x83c	; 0x83c <__udivmodhi4>
 460:	36 2f       	mov	r19, r22
 462:	86 2e       	mov	r8, r22
 464:	97 2e       	mov	r9, r23
 466:	c8 2f       	mov	r28, r24
 468:	d9 2f       	mov	r29, r25
 46a:	cf 01       	movw	r24, r30
 46c:	b8 01       	movw	r22, r16
 46e:	0e 94 1e 04 	call	0x83c	; 0x83c <__udivmodhi4>
 472:	fb 01       	movw	r30, r22
 474:	a1 14       	cp	r10, r1
 476:	b1 04       	cpc	r11, r1
 478:	29 f4       	brne	.+10     	; 0x484 <__stack+0x25>
 47a:	18 14       	cp	r1, r8
 47c:	19 04       	cpc	r1, r9
 47e:	14 f0       	brlt	.+4      	; 0x484 <__stack+0x25>
 480:	30 97       	sbiw	r30, 0x00	; 0
 482:	a9 f4       	brne	.+42     	; 0x4ae <__stack+0x4f>
 484:	c7 01       	movw	r24, r14
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	aa e0       	ldi	r26, 0x0A	; 10
 48a:	8a 16       	cp	r8, r26
 48c:	91 04       	cpc	r9, r1
 48e:	2c f0       	brlt	.+10     	; 0x49a <__stack+0x3b>
 490:	c1 14       	cp	r12, r1
 492:	d1 04       	cpc	r13, r1
 494:	21 f0       	breq	.+8      	; 0x49e <__stack+0x3f>
 496:	27 e3       	ldi	r18, 0x37	; 55
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <__stack+0x41>
 49a:	20 e3       	ldi	r18, 0x30	; 48
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <__stack+0x41>
 49e:	27 e5       	ldi	r18, 0x57	; 87
 4a0:	32 0f       	add	r19, r18
 4a2:	d7 01       	movw	r26, r14
 4a4:	3c 93       	st	X, r19
 4a6:	bf ef       	ldi	r27, 0xFF	; 255
 4a8:	ab 1a       	sub	r10, r27
 4aa:	bb 0a       	sbc	r11, r27
 4ac:	7c 01       	movw	r14, r24
 4ae:	30 97       	sbiw	r30, 0x00	; 0
 4b0:	91 f6       	brne	.-92     	; 0x456 <ui2a+0x4e>
 4b2:	f7 01       	movw	r30, r14
 4b4:	10 82       	st	Z, r1
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	ff 90       	pop	r15
 4c0:	ef 90       	pop	r14
 4c2:	df 90       	pop	r13
 4c4:	cf 90       	pop	r12
 4c6:	bf 90       	pop	r11
 4c8:	af 90       	pop	r10
 4ca:	9f 90       	pop	r9
 4cc:	8f 90       	pop	r8
 4ce:	08 95       	ret

000004d0 <i2a>:
 4d0:	9b 01       	movw	r18, r22
 4d2:	99 23       	and	r25, r25
 4d4:	44 f4       	brge	.+16     	; 0x4e6 <i2a+0x16>
 4d6:	91 95       	neg	r25
 4d8:	81 95       	neg	r24
 4da:	91 09       	sbc	r25, r1
 4dc:	4d e2       	ldi	r20, 0x2D	; 45
 4de:	fb 01       	movw	r30, r22
 4e0:	40 83       	st	Z, r20
 4e2:	2f 5f       	subi	r18, 0xFF	; 255
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
 4e6:	40 e0       	ldi	r20, 0x00	; 0
 4e8:	50 e0       	ldi	r21, 0x00	; 0
 4ea:	6a e0       	ldi	r22, 0x0A	; 10
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	0e 94 04 02 	call	0x408	; 0x408 <ui2a>
 4f2:	08 95       	ret

000004f4 <a2d>:
 4f4:	90 ed       	ldi	r25, 0xD0	; 208
 4f6:	98 0f       	add	r25, r24
 4f8:	9a 30       	cpi	r25, 0x0A	; 10
 4fa:	18 f4       	brcc	.+6      	; 0x502 <a2d+0xe>
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	c0 97       	sbiw	r24, 0x30	; 48
 500:	08 95       	ret
 502:	9f e9       	ldi	r25, 0x9F	; 159
 504:	98 0f       	add	r25, r24
 506:	96 30       	cpi	r25, 0x06	; 6
 508:	20 f4       	brcc	.+8      	; 0x512 <a2d+0x1e>
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	87 55       	subi	r24, 0x57	; 87
 50e:	91 09       	sbc	r25, r1
 510:	08 95       	ret
 512:	9f eb       	ldi	r25, 0xBF	; 191
 514:	98 0f       	add	r25, r24
 516:	96 30       	cpi	r25, 0x06	; 6
 518:	18 f4       	brcc	.+6      	; 0x520 <a2d+0x2c>
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	c7 97       	sbiw	r24, 0x37	; 55
 51e:	08 95       	ret
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	9f ef       	ldi	r25, 0xFF	; 255
 524:	08 95       	ret

00000526 <a2i>:
 526:	9f 92       	push	r9
 528:	af 92       	push	r10
 52a:	bf 92       	push	r11
 52c:	cf 92       	push	r12
 52e:	df 92       	push	r13
 530:	ef 92       	push	r14
 532:	ff 92       	push	r15
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	98 2e       	mov	r9, r24
 53e:	5b 01       	movw	r10, r22
 540:	7a 01       	movw	r14, r20
 542:	69 01       	movw	r12, r18
 544:	fb 01       	movw	r30, r22
 546:	c0 81       	ld	r28, Z
 548:	d1 81       	ldd	r29, Z+1	; 0x01
 54a:	00 e0       	ldi	r16, 0x00	; 0
 54c:	10 e0       	ldi	r17, 0x00	; 0
 54e:	0f c0       	rjmp	.+30     	; 0x56e <a2i+0x48>
 550:	e8 16       	cp	r14, r24
 552:	f9 06       	cpc	r15, r25
 554:	8c f0       	brlt	.+34     	; 0x578 <a2i+0x52>
 556:	0e 9d       	mul	r16, r14
 558:	90 01       	movw	r18, r0
 55a:	0f 9d       	mul	r16, r15
 55c:	30 0d       	add	r19, r0
 55e:	1e 9d       	mul	r17, r14
 560:	30 0d       	add	r19, r0
 562:	11 24       	eor	r1, r1
 564:	8c 01       	movw	r16, r24
 566:	02 0f       	add	r16, r18
 568:	13 1f       	adc	r17, r19
 56a:	98 80       	ld	r9, Y
 56c:	21 96       	adiw	r28, 0x01	; 1
 56e:	89 2d       	mov	r24, r9
 570:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <a2d>
 574:	99 23       	and	r25, r25
 576:	64 f7       	brge	.-40     	; 0x550 <a2i+0x2a>
 578:	f5 01       	movw	r30, r10
 57a:	d1 83       	std	Z+1, r29	; 0x01
 57c:	c0 83       	st	Z, r28
 57e:	f6 01       	movw	r30, r12
 580:	11 83       	std	Z+1, r17	; 0x01
 582:	00 83       	st	Z, r16
 584:	89 2d       	mov	r24, r9
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	1f 91       	pop	r17
 58c:	0f 91       	pop	r16
 58e:	ff 90       	pop	r15
 590:	ef 90       	pop	r14
 592:	df 90       	pop	r13
 594:	cf 90       	pop	r12
 596:	bf 90       	pop	r11
 598:	af 90       	pop	r10
 59a:	9f 90       	pop	r9
 59c:	08 95       	ret

0000059e <putchw>:
 59e:	bf 92       	push	r11
 5a0:	cf 92       	push	r12
 5a2:	df 92       	push	r13
 5a4:	ef 92       	push	r14
 5a6:	ff 92       	push	r15
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	6c 01       	movw	r12, r24
 5b2:	7b 01       	movw	r14, r22
 5b4:	e8 01       	movw	r28, r16
 5b6:	22 23       	and	r18, r18
 5b8:	29 f0       	breq	.+10     	; 0x5c4 <putchw+0x26>
 5ba:	0f 2e       	mov	r0, r31
 5bc:	f0 e3       	ldi	r31, 0x30	; 48
 5be:	bf 2e       	mov	r11, r31
 5c0:	f0 2d       	mov	r31, r0
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <putchw+0x2c>
 5c4:	68 94       	set
 5c6:	bb 24       	eor	r11, r11
 5c8:	b5 f8       	bld	r11, 5
 5ca:	fe 01       	movw	r30, r28
 5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <putchw+0x36>
 5ce:	41 50       	subi	r20, 0x01	; 1
 5d0:	51 09       	sbc	r21, r1
 5d2:	f9 01       	movw	r30, r18
 5d4:	9f 01       	movw	r18, r30
 5d6:	2f 5f       	subi	r18, 0xFF	; 255
 5d8:	3f 4f       	sbci	r19, 0xFF	; 255
 5da:	80 81       	ld	r24, Z
 5dc:	88 23       	and	r24, r24
 5de:	49 f0       	breq	.+18     	; 0x5f2 <putchw+0x54>
 5e0:	14 16       	cp	r1, r20
 5e2:	15 06       	cpc	r1, r21
 5e4:	a4 f3       	brlt	.-24     	; 0x5ce <putchw+0x30>
 5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <putchw+0x54>
 5e8:	6b 2d       	mov	r22, r11
 5ea:	c6 01       	movw	r24, r12
 5ec:	f7 01       	movw	r30, r14
 5ee:	09 95       	icall
 5f0:	a8 01       	movw	r20, r16
 5f2:	8a 01       	movw	r16, r20
 5f4:	01 50       	subi	r16, 0x01	; 1
 5f6:	11 09       	sbc	r17, r1
 5f8:	14 16       	cp	r1, r20
 5fa:	15 06       	cpc	r1, r21
 5fc:	ac f3       	brlt	.-22     	; 0x5e8 <putchw+0x4a>
 5fe:	04 c0       	rjmp	.+8      	; 0x608 <putchw+0x6a>
 600:	c6 01       	movw	r24, r12
 602:	f7 01       	movw	r30, r14
 604:	09 95       	icall
 606:	e8 01       	movw	r28, r16
 608:	8e 01       	movw	r16, r28
 60a:	0f 5f       	subi	r16, 0xFF	; 255
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	68 81       	ld	r22, Y
 610:	61 11       	cpse	r22, r1
 612:	f6 cf       	rjmp	.-20     	; 0x600 <putchw+0x62>
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	ff 90       	pop	r15
 61e:	ef 90       	pop	r14
 620:	df 90       	pop	r13
 622:	cf 90       	pop	r12
 624:	bf 90       	pop	r11
 626:	08 95       	ret

00000628 <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
 628:	9f 92       	push	r9
 62a:	af 92       	push	r10
 62c:	bf 92       	push	r11
 62e:	cf 92       	push	r12
 630:	df 92       	push	r13
 632:	ef 92       	push	r14
 634:	ff 92       	push	r15
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
 642:	60 97       	sbiw	r28, 0x10	; 16
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	de bf       	out	0x3e, r29	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	cd bf       	out	0x3d, r28	; 61
 64e:	6c 01       	movw	r12, r24
 650:	7b 01       	movw	r14, r22
 652:	58 8b       	std	Y+16, r21	; 0x10
 654:	4f 87       	std	Y+15, r20	; 0x0f
 656:	89 01       	movw	r16, r18
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 658:	b5 c0       	rjmp	.+362    	; 0x7c4 <tfp_format+0x19c>
		if (ch!='%') 
 65a:	65 32       	cpi	r22, 0x25	; 37
 65c:	21 f0       	breq	.+8      	; 0x666 <tfp_format+0x3e>
			putf(putp,ch);
 65e:	c6 01       	movw	r24, r12
 660:	f7 01       	movw	r30, r14
 662:	09 95       	icall
 664:	af c0       	rjmp	.+350    	; 0x7c4 <tfp_format+0x19c>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
 666:	1e 86       	std	Y+14, r1	; 0x0e
 668:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 66a:	9d 01       	movw	r18, r26
 66c:	2f 5f       	subi	r18, 0xFF	; 255
 66e:	3f 4f       	sbci	r19, 0xFF	; 255
 670:	38 8b       	std	Y+16, r19	; 0x10
 672:	2f 87       	std	Y+15, r18	; 0x0f
 674:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 676:	80 33       	cpi	r24, 0x30	; 48
 678:	49 f4       	brne	.+18     	; 0x68c <tfp_format+0x64>
				ch=*(fmt++);
 67a:	2f 5f       	subi	r18, 0xFF	; 255
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	38 8b       	std	Y+16, r19	; 0x10
 680:	2f 87       	std	Y+15, r18	; 0x0f
 682:	11 96       	adiw	r26, 0x01	; 1
 684:	8c 91       	ld	r24, X
				lz=1;
 686:	99 24       	eor	r9, r9
 688:	93 94       	inc	r9
 68a:	01 c0       	rjmp	.+2      	; 0x68e <tfp_format+0x66>

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
 68c:	91 2c       	mov	r9, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 68e:	90 ed       	ldi	r25, 0xD0	; 208
 690:	98 0f       	add	r25, r24
 692:	9a 30       	cpi	r25, 0x0A	; 10
 694:	50 f4       	brcc	.+20     	; 0x6aa <tfp_format+0x82>
				ch=a2i(ch,&fmt,10,&w);
 696:	9e 01       	movw	r18, r28
 698:	23 5f       	subi	r18, 0xF3	; 243
 69a:	3f 4f       	sbci	r19, 0xFF	; 255
 69c:	4a e0       	ldi	r20, 0x0A	; 10
 69e:	50 e0       	ldi	r21, 0x00	; 0
 6a0:	be 01       	movw	r22, r28
 6a2:	61 5f       	subi	r22, 0xF1	; 241
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	0e 94 93 02 	call	0x526	; 0x526 <a2i>
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 6aa:	83 36       	cpi	r24, 0x63	; 99
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <tfp_format+0x88>
 6ae:	6b c0       	rjmp	.+214    	; 0x786 <tfp_format+0x15e>
 6b0:	50 f4       	brcc	.+20     	; 0x6c6 <tfp_format+0x9e>
 6b2:	85 32       	cpi	r24, 0x25	; 37
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <tfp_format+0x90>
 6b6:	82 c0       	rjmp	.+260    	; 0x7bc <tfp_format+0x194>
 6b8:	88 35       	cpi	r24, 0x58	; 88
 6ba:	09 f4       	brne	.+2      	; 0x6be <tfp_format+0x96>
 6bc:	44 c0       	rjmp	.+136    	; 0x746 <tfp_format+0x11e>
 6be:	88 23       	and	r24, r24
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <tfp_format+0x9c>
 6c2:	89 c0       	rjmp	.+274    	; 0x7d6 <tfp_format+0x1ae>
 6c4:	7f c0       	rjmp	.+254    	; 0x7c4 <tfp_format+0x19c>
 6c6:	83 37       	cpi	r24, 0x73	; 115
 6c8:	09 f4       	brne	.+2      	; 0x6cc <tfp_format+0xa4>
 6ca:	68 c0       	rjmp	.+208    	; 0x79c <tfp_format+0x174>
 6cc:	18 f4       	brcc	.+6      	; 0x6d4 <tfp_format+0xac>
 6ce:	84 36       	cpi	r24, 0x64	; 100
 6d0:	11 f1       	breq	.+68     	; 0x716 <tfp_format+0xee>
 6d2:	78 c0       	rjmp	.+240    	; 0x7c4 <tfp_format+0x19c>
 6d4:	85 37       	cpi	r24, 0x75	; 117
 6d6:	19 f0       	breq	.+6      	; 0x6de <tfp_format+0xb6>
 6d8:	88 37       	cpi	r24, 0x78	; 120
 6da:	a9 f1       	breq	.+106    	; 0x746 <tfp_format+0x11e>
 6dc:	73 c0       	rjmp	.+230    	; 0x7c4 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 6de:	58 01       	movw	r10, r16
 6e0:	f2 e0       	ldi	r31, 0x02	; 2
 6e2:	af 0e       	add	r10, r31
 6e4:	b1 1c       	adc	r11, r1
 6e6:	9e 01       	movw	r18, r28
 6e8:	2f 5f       	subi	r18, 0xFF	; 255
 6ea:	3f 4f       	sbci	r19, 0xFF	; 255
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	50 e0       	ldi	r21, 0x00	; 0
 6f0:	6a e0       	ldi	r22, 0x0A	; 10
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	f8 01       	movw	r30, r16
 6f6:	80 81       	ld	r24, Z
 6f8:	91 81       	ldd	r25, Z+1	; 0x01
 6fa:	0e 94 04 02 	call	0x408	; 0x408 <ui2a>
					putchw(putp,putf,w,lz,bf);
 6fe:	4d 85       	ldd	r20, Y+13	; 0x0d
 700:	5e 85       	ldd	r21, Y+14	; 0x0e
 702:	8e 01       	movw	r16, r28
 704:	0f 5f       	subi	r16, 0xFF	; 255
 706:	1f 4f       	sbci	r17, 0xFF	; 255
 708:	29 2d       	mov	r18, r9
 70a:	b7 01       	movw	r22, r14
 70c:	c6 01       	movw	r24, r12
 70e:	0e 94 cf 02 	call	0x59e	; 0x59e <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 712:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 714:	57 c0       	rjmp	.+174    	; 0x7c4 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 716:	58 01       	movw	r10, r16
 718:	f2 e0       	ldi	r31, 0x02	; 2
 71a:	af 0e       	add	r10, r31
 71c:	b1 1c       	adc	r11, r1
 71e:	be 01       	movw	r22, r28
 720:	6f 5f       	subi	r22, 0xFF	; 255
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	f8 01       	movw	r30, r16
 726:	80 81       	ld	r24, Z
 728:	91 81       	ldd	r25, Z+1	; 0x01
 72a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <i2a>
					putchw(putp,putf,w,lz,bf);
 72e:	4d 85       	ldd	r20, Y+13	; 0x0d
 730:	5e 85       	ldd	r21, Y+14	; 0x0e
 732:	8e 01       	movw	r16, r28
 734:	0f 5f       	subi	r16, 0xFF	; 255
 736:	1f 4f       	sbci	r17, 0xFF	; 255
 738:	29 2d       	mov	r18, r9
 73a:	b7 01       	movw	r22, r14
 73c:	c6 01       	movw	r24, r12
 73e:	0e 94 cf 02 	call	0x59e	; 0x59e <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 742:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 744:	3f c0       	rjmp	.+126    	; 0x7c4 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 746:	58 01       	movw	r10, r16
 748:	f2 e0       	ldi	r31, 0x02	; 2
 74a:	af 0e       	add	r10, r31
 74c:	b1 1c       	adc	r11, r1
 74e:	41 e0       	ldi	r20, 0x01	; 1
 750:	50 e0       	ldi	r21, 0x00	; 0
 752:	88 35       	cpi	r24, 0x58	; 88
 754:	11 f0       	breq	.+4      	; 0x75a <tfp_format+0x132>
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	9e 01       	movw	r18, r28
 75c:	2f 5f       	subi	r18, 0xFF	; 255
 75e:	3f 4f       	sbci	r19, 0xFF	; 255
 760:	60 e1       	ldi	r22, 0x10	; 16
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	f8 01       	movw	r30, r16
 766:	80 81       	ld	r24, Z
 768:	91 81       	ldd	r25, Z+1	; 0x01
 76a:	0e 94 04 02 	call	0x408	; 0x408 <ui2a>
					putchw(putp,putf,w,lz,bf);
 76e:	4d 85       	ldd	r20, Y+13	; 0x0d
 770:	5e 85       	ldd	r21, Y+14	; 0x0e
 772:	8e 01       	movw	r16, r28
 774:	0f 5f       	subi	r16, 0xFF	; 255
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	29 2d       	mov	r18, r9
 77a:	b7 01       	movw	r22, r14
 77c:	c6 01       	movw	r24, r12
 77e:	0e 94 cf 02 	call	0x59e	; 0x59e <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 782:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 784:	1f c0       	rjmp	.+62     	; 0x7c4 <tfp_format+0x19c>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 786:	58 01       	movw	r10, r16
 788:	f2 e0       	ldi	r31, 0x02	; 2
 78a:	af 0e       	add	r10, r31
 78c:	b1 1c       	adc	r11, r1
 78e:	f8 01       	movw	r30, r16
 790:	60 81       	ld	r22, Z
 792:	c6 01       	movw	r24, r12
 794:	f7 01       	movw	r30, r14
 796:	09 95       	icall
 798:	85 01       	movw	r16, r10
					break;
 79a:	14 c0       	rjmp	.+40     	; 0x7c4 <tfp_format+0x19c>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 79c:	58 01       	movw	r10, r16
 79e:	f2 e0       	ldi	r31, 0x02	; 2
 7a0:	af 0e       	add	r10, r31
 7a2:	b1 1c       	adc	r11, r1
 7a4:	f8 01       	movw	r30, r16
 7a6:	00 81       	ld	r16, Z
 7a8:	11 81       	ldd	r17, Z+1	; 0x01
 7aa:	4d 85       	ldd	r20, Y+13	; 0x0d
 7ac:	5e 85       	ldd	r21, Y+14	; 0x0e
 7ae:	20 e0       	ldi	r18, 0x00	; 0
 7b0:	b7 01       	movw	r22, r14
 7b2:	c6 01       	movw	r24, r12
 7b4:	0e 94 cf 02 	call	0x59e	; 0x59e <putchw>
 7b8:	85 01       	movw	r16, r10
					break;
 7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <tfp_format+0x19c>
				case '%' :
					putf(putp,ch);
 7bc:	68 2f       	mov	r22, r24
 7be:	c6 01       	movw	r24, r12
 7c0:	f7 01       	movw	r30, r14
 7c2:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 7c4:	ef 85       	ldd	r30, Y+15	; 0x0f
 7c6:	f8 89       	ldd	r31, Y+16	; 0x10
 7c8:	df 01       	movw	r26, r30
 7ca:	11 96       	adiw	r26, 0x01	; 1
 7cc:	b8 8b       	std	Y+16, r27	; 0x10
 7ce:	af 87       	std	Y+15, r26	; 0x0f
 7d0:	60 81       	ld	r22, Z
 7d2:	61 11       	cpse	r22, r1
 7d4:	42 cf       	rjmp	.-380    	; 0x65a <tfp_format+0x32>
					break;
				}
			}
		}
	abort:;
	}
 7d6:	60 96       	adiw	r28, 0x10	; 16
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	f8 94       	cli
 7dc:	de bf       	out	0x3e, r29	; 62
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	cd bf       	out	0x3d, r28	; 61
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	1f 91       	pop	r17
 7e8:	0f 91       	pop	r16
 7ea:	ff 90       	pop	r15
 7ec:	ef 90       	pop	r14
 7ee:	df 90       	pop	r13
 7f0:	cf 90       	pop	r12
 7f2:	bf 90       	pop	r11
 7f4:	af 90       	pop	r10
 7f6:	9f 90       	pop	r9
 7f8:	08 95       	ret

000007fa <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 7fa:	70 93 96 00 	sts	0x0096, r23	; 0x800096 <stdout_putf+0x1>
 7fe:	60 93 95 00 	sts	0x0095, r22	; 0x800095 <stdout_putf>
	stdout_putp=putp;
 802:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <stdout_putp+0x1>
 806:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <stdout_putp>
 80a:	08 95       	ret

0000080c <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	cd b7       	in	r28, 0x3d	; 61
 812:	de b7       	in	r29, 0x3e	; 62
 814:	9e 01       	movw	r18, r28
 816:	2b 5f       	subi	r18, 0xFB	; 251
 818:	3f 4f       	sbci	r19, 0xFF	; 255
 81a:	f9 01       	movw	r30, r18
 81c:	41 91       	ld	r20, Z+
 81e:	51 91       	ld	r21, Z+
 820:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 822:	60 91 95 00 	lds	r22, 0x0095	; 0x800095 <stdout_putf>
 826:	70 91 96 00 	lds	r23, 0x0096	; 0x800096 <stdout_putf+0x1>
 82a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <stdout_putp>
 82e:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <stdout_putp+0x1>
 832:	0e 94 14 03 	call	0x628	; 0x628 <tfp_format>
	va_end(va);
	}
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	08 95       	ret

0000083c <__udivmodhi4>:
 83c:	aa 1b       	sub	r26, r26
 83e:	bb 1b       	sub	r27, r27
 840:	51 e1       	ldi	r21, 0x11	; 17
 842:	07 c0       	rjmp	.+14     	; 0x852 <__udivmodhi4_ep>

00000844 <__udivmodhi4_loop>:
 844:	aa 1f       	adc	r26, r26
 846:	bb 1f       	adc	r27, r27
 848:	a6 17       	cp	r26, r22
 84a:	b7 07       	cpc	r27, r23
 84c:	10 f0       	brcs	.+4      	; 0x852 <__udivmodhi4_ep>
 84e:	a6 1b       	sub	r26, r22
 850:	b7 0b       	sbc	r27, r23

00000852 <__udivmodhi4_ep>:
 852:	88 1f       	adc	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	5a 95       	dec	r21
 858:	a9 f7       	brne	.-22     	; 0x844 <__udivmodhi4_loop>
 85a:	80 95       	com	r24
 85c:	90 95       	com	r25
 85e:	bc 01       	movw	r22, r24
 860:	cd 01       	movw	r24, r26
 862:	08 95       	ret

00000864 <_exit>:
 864:	f8 94       	cli

00000866 <__stop_program>:
 866:	ff cf       	rjmp	.-2      	; 0x866 <__stop_program>

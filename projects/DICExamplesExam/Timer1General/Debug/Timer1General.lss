
Timer1General.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000008da  0000096e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800064  00800064  00000972  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013be  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009aa  00000000  00000000  00001e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095d  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00003188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ea  00000000  00000000  000034b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000114f  00000000  00000000  0000399a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004ae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b4 01 	call	0x368	; 0x368 <main>
  8a:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <__vector_5>:
char displayBuffer[16];

volatile long int Timer1Counter = 0;

ISR(TIMER1_CAPT_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 92       	push	r8
 1f2:	9f 92       	push	r9
 1f4:	af 92       	push	r10
 1f6:	bf 92       	push	r11
 1f8:	cf 92       	push	r12
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	ending_edge = 256 * ICR1H + ICR1L;
 218:	c7 b4       	in	r12, 0x27	; 39
 21a:	d1 2c       	mov	r13, r1
 21c:	dc 2c       	mov	r13, r12
 21e:	cc 24       	eor	r12, r12
 220:	86 b5       	in	r24, 0x26	; 38
 222:	c8 0e       	add	r12, r24
 224:	d1 1c       	adc	r13, r1
 226:	0d 2c       	mov	r0, r13
 228:	00 0c       	add	r0, r0
 22a:	ee 08       	sbc	r14, r14
 22c:	ff 08       	sbc	r15, r15
 22e:	c0 92 74 00 	sts	0x0074, r12	; 0x800074 <ending_edge>
 232:	d0 92 75 00 	sts	0x0075, r13	; 0x800075 <ending_edge+0x1>
 236:	e0 92 76 00 	sts	0x0076, r14	; 0x800076 <ending_edge+0x2>
 23a:	f0 92 77 00 	sts	0x0077, r15	; 0x800077 <ending_edge+0x3>
	clocks = ending_edge - starting_edge + Timer1Counter * 65535; // Timer in ms (12Mhz/8) -> 1 500 000 / 1500 -> 1000Hz, das entspricht 1 ms
 23e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <starting_edge>
 242:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <starting_edge+0x1>
 246:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <starting_edge+0x2>
 24a:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <starting_edge+0x3>
 24e:	46 01       	movw	r8, r12
 250:	57 01       	movw	r10, r14
 252:	88 1a       	sub	r8, r24
 254:	99 0a       	sbc	r9, r25
 256:	aa 0a       	sbc	r10, r26
 258:	bb 0a       	sbc	r11, r27
 25a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__data_end>
 25e:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <__data_end+0x1>
 262:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <__data_end+0x2>
 266:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <__data_end+0x3>
 26a:	af ef       	ldi	r26, 0xFF	; 255
 26c:	bf ef       	ldi	r27, 0xFF	; 255
 26e:	0e 94 2f 04 	call	0x85e	; 0x85e <__muluhisi3>
 272:	68 0d       	add	r22, r8
 274:	79 1d       	adc	r23, r9
 276:	8a 1d       	adc	r24, r10
 278:	9b 1d       	adc	r25, r11
 27a:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <clocks>
 27e:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <clocks+0x1>
 282:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <clocks+0x2>
 286:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <clocks+0x3>
	Time = clocks / 1500;
 28a:	2c ed       	ldi	r18, 0xDC	; 220
 28c:	35 e0       	ldi	r19, 0x05	; 5
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	0e 94 10 04 	call	0x820	; 0x820 <__divmodsi4>
 296:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <Time>
 29a:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <Time+0x1>
 29e:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <Time+0x2>
 2a2:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <Time+0x3>
	Timer1Counter = 0;
 2a6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
 2aa:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 2ae:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end+0x2>
 2b2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x3>
	starting_edge = ending_edge;
 2b6:	c0 92 70 00 	sts	0x0070, r12	; 0x800070 <starting_edge>
 2ba:	d0 92 71 00 	sts	0x0071, r13	; 0x800071 <starting_edge+0x1>
 2be:	e0 92 72 00 	sts	0x0072, r14	; 0x800072 <starting_edge+0x2>
 2c2:	f0 92 73 00 	sts	0x0073, r15	; 0x800073 <starting_edge+0x3>
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	bf 90       	pop	r11
 2e8:	af 90       	pop	r10
 2ea:	9f 90       	pop	r9
 2ec:	8f 90       	pop	r8
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
	Timer1Counter++;
 30a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 30e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 312:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end+0x2>
 316:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x3>
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	a1 1d       	adc	r26, r1
 31e:	b1 1d       	adc	r27, r1
 320:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 324:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 328:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end+0x2>
 32c:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x3>
}
 330:	bf 91       	pop	r27
 332:	af 91       	pop	r26
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <initPorts>:

void initPorts()
{
	DDRC |= 0xFF;
 342:	84 b3       	in	r24, 0x14	; 20
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 348:	15 ba       	out	0x15, r1	; 21
	
	DDRA &= ~(1 << PA0)|(1 << PA1);
 34a:	8a b3       	in	r24, 0x1a	; 26
 34c:	8e 7f       	andi	r24, 0xFE	; 254
 34e:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0)|(1 << PA1);
 350:	8b b3       	in	r24, 0x1b	; 27
 352:	83 60       	ori	r24, 0x03	; 3
 354:	8b bb       	out	0x1b, r24	; 27
 356:	08 95       	ret

00000358 <initTimer1>:
}

void initTimer1()
{
	TCCR1A = 0x00;
 358:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << ICNC1)|(1 << CS11);
 35a:	8e b5       	in	r24, 0x2e	; 46
 35c:	82 68       	ori	r24, 0x82	; 130
 35e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TICIE1)|(1 << TOIE1);
 360:	89 b7       	in	r24, 0x39	; 57
 362:	84 62       	ori	r24, 0x24	; 36
 364:	89 bf       	out	0x39, r24	; 57
 366:	08 95       	ret

00000368 <main>:
	
}

int main(void)
{
    cli();
 368:	f8 94       	cli
	initPorts();
 36a:	0e 94 a1 01 	call	0x342	; 0x342 <initPorts>
	initTimer1();
 36e:	0e 94 ac 01 	call	0x358	; 0x358 <initTimer1>
	lcd_init();
 372:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	sei();
 376:	78 94       	sei
	
	lcd_pos(0,0);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
	
    while (1) 
    {
		printf("%s", Time);
 380:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Time+0x3>
 384:	8f 93       	push	r24
 386:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Time+0x2>
 38a:	8f 93       	push	r24
 38c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Time+0x1>
 390:	8f 93       	push	r24
 392:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Time>
 396:	8f 93       	push	r24
 398:	80 e6       	ldi	r24, 0x60	; 96
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	9f 93       	push	r25
 39e:	8f 93       	push	r24
 3a0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <tfp_printf>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	8e e9       	ldi	r24, 0x9E	; 158
 3a8:	94 e2       	ldi	r25, 0x24	; 36
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x42>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x4c>
 3b4:	00 00       	nop
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	de cf       	rjmp	.-68     	; 0x380 <main+0x18>

000003c4 <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 3c4:	8f 92       	push	r8
 3c6:	9f 92       	push	r9
 3c8:	af 92       	push	r10
 3ca:	bf 92       	push	r11
 3cc:	cf 92       	push	r12
 3ce:	df 92       	push	r13
 3d0:	ef 92       	push	r14
 3d2:	ff 92       	push	r15
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	c8 2f       	mov	r28, r24
 3de:	d9 2f       	mov	r29, r25
 3e0:	8b 01       	movw	r16, r22
 3e2:	6a 01       	movw	r12, r20
 3e4:	79 01       	movw	r14, r18
 3e6:	e1 e0       	ldi	r30, 0x01	; 1
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	08 c0       	rjmp	.+16     	; 0x3fc <ui2a+0x38>
 3ec:	cf 01       	movw	r24, r30
 3ee:	80 9f       	mul	r24, r16
 3f0:	f0 01       	movw	r30, r0
 3f2:	81 9f       	mul	r24, r17
 3f4:	f0 0d       	add	r31, r0
 3f6:	90 9f       	mul	r25, r16
 3f8:	f0 0d       	add	r31, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	8c 2f       	mov	r24, r28
 3fe:	9d 2f       	mov	r25, r29
 400:	bf 01       	movw	r22, r30
 402:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__udivmodhi4>
 406:	60 17       	cp	r22, r16
 408:	71 07       	cpc	r23, r17
 40a:	80 f7       	brcc	.-32     	; 0x3ec <ui2a+0x28>
 40c:	a1 2c       	mov	r10, r1
 40e:	b1 2c       	mov	r11, r1
 410:	2c c0       	rjmp	.+88     	; 0x46a <__stack+0xb>
 412:	8c 2f       	mov	r24, r28
 414:	9d 2f       	mov	r25, r29
 416:	bf 01       	movw	r22, r30
 418:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__udivmodhi4>
 41c:	36 2f       	mov	r19, r22
 41e:	86 2e       	mov	r8, r22
 420:	97 2e       	mov	r9, r23
 422:	c8 2f       	mov	r28, r24
 424:	d9 2f       	mov	r29, r25
 426:	cf 01       	movw	r24, r30
 428:	b8 01       	movw	r22, r16
 42a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__udivmodhi4>
 42e:	fb 01       	movw	r30, r22
 430:	a1 14       	cp	r10, r1
 432:	b1 04       	cpc	r11, r1
 434:	29 f4       	brne	.+10     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 436:	18 14       	cp	r1, r8
 438:	19 04       	cpc	r1, r9
 43a:	14 f0       	brlt	.+4      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 43c:	30 97       	sbiw	r30, 0x00	; 0
 43e:	a9 f4       	brne	.+42     	; 0x46a <__stack+0xb>
 440:	c7 01       	movw	r24, r14
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	aa e0       	ldi	r26, 0x0A	; 10
 446:	8a 16       	cp	r8, r26
 448:	91 04       	cpc	r9, r1
 44a:	2c f0       	brlt	.+10     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 44c:	c1 14       	cp	r12, r1
 44e:	d1 04       	cpc	r13, r1
 450:	21 f0       	breq	.+8      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 452:	27 e3       	ldi	r18, 0x37	; 55
 454:	03 c0       	rjmp	.+6      	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 456:	20 e3       	ldi	r18, 0x30	; 48
 458:	01 c0       	rjmp	.+2      	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 45a:	27 e5       	ldi	r18, 0x57	; 87
 45c:	32 0f       	add	r19, r18
 45e:	d7 01       	movw	r26, r14
 460:	3c 93       	st	X, r19
 462:	bf ef       	ldi	r27, 0xFF	; 255
 464:	ab 1a       	sub	r10, r27
 466:	bb 0a       	sbc	r11, r27
 468:	7c 01       	movw	r14, r24
 46a:	30 97       	sbiw	r30, 0x00	; 0
 46c:	91 f6       	brne	.-92     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 46e:	f7 01       	movw	r30, r14
 470:	10 82       	st	Z, r1
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	bf 90       	pop	r11
 484:	af 90       	pop	r10
 486:	9f 90       	pop	r9
 488:	8f 90       	pop	r8
 48a:	08 95       	ret

0000048c <i2a>:
 48c:	9b 01       	movw	r18, r22
 48e:	99 23       	and	r25, r25
 490:	44 f4       	brge	.+16     	; 0x4a2 <i2a+0x16>
 492:	91 95       	neg	r25
 494:	81 95       	neg	r24
 496:	91 09       	sbc	r25, r1
 498:	4d e2       	ldi	r20, 0x2D	; 45
 49a:	fb 01       	movw	r30, r22
 49c:	40 83       	st	Z, r20
 49e:	2f 5f       	subi	r18, 0xFF	; 255
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	6a e0       	ldi	r22, 0x0A	; 10
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <ui2a>
 4ae:	08 95       	ret

000004b0 <a2d>:
 4b0:	90 ed       	ldi	r25, 0xD0	; 208
 4b2:	98 0f       	add	r25, r24
 4b4:	9a 30       	cpi	r25, 0x0A	; 10
 4b6:	18 f4       	brcc	.+6      	; 0x4be <a2d+0xe>
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	c0 97       	sbiw	r24, 0x30	; 48
 4bc:	08 95       	ret
 4be:	9f e9       	ldi	r25, 0x9F	; 159
 4c0:	98 0f       	add	r25, r24
 4c2:	96 30       	cpi	r25, 0x06	; 6
 4c4:	20 f4       	brcc	.+8      	; 0x4ce <a2d+0x1e>
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	87 55       	subi	r24, 0x57	; 87
 4ca:	91 09       	sbc	r25, r1
 4cc:	08 95       	ret
 4ce:	9f eb       	ldi	r25, 0xBF	; 191
 4d0:	98 0f       	add	r25, r24
 4d2:	96 30       	cpi	r25, 0x06	; 6
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <a2d+0x2c>
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	c7 97       	sbiw	r24, 0x37	; 55
 4da:	08 95       	ret
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	9f ef       	ldi	r25, 0xFF	; 255
 4e0:	08 95       	ret

000004e2 <a2i>:
 4e2:	9f 92       	push	r9
 4e4:	af 92       	push	r10
 4e6:	bf 92       	push	r11
 4e8:	cf 92       	push	r12
 4ea:	df 92       	push	r13
 4ec:	ef 92       	push	r14
 4ee:	ff 92       	push	r15
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	98 2e       	mov	r9, r24
 4fa:	5b 01       	movw	r10, r22
 4fc:	7a 01       	movw	r14, r20
 4fe:	69 01       	movw	r12, r18
 500:	fb 01       	movw	r30, r22
 502:	c0 81       	ld	r28, Z
 504:	d1 81       	ldd	r29, Z+1	; 0x01
 506:	00 e0       	ldi	r16, 0x00	; 0
 508:	10 e0       	ldi	r17, 0x00	; 0
 50a:	0f c0       	rjmp	.+30     	; 0x52a <a2i+0x48>
 50c:	e8 16       	cp	r14, r24
 50e:	f9 06       	cpc	r15, r25
 510:	8c f0       	brlt	.+34     	; 0x534 <a2i+0x52>
 512:	0e 9d       	mul	r16, r14
 514:	90 01       	movw	r18, r0
 516:	0f 9d       	mul	r16, r15
 518:	30 0d       	add	r19, r0
 51a:	1e 9d       	mul	r17, r14
 51c:	30 0d       	add	r19, r0
 51e:	11 24       	eor	r1, r1
 520:	8c 01       	movw	r16, r24
 522:	02 0f       	add	r16, r18
 524:	13 1f       	adc	r17, r19
 526:	98 80       	ld	r9, Y
 528:	21 96       	adiw	r28, 0x01	; 1
 52a:	89 2d       	mov	r24, r9
 52c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <a2d>
 530:	99 23       	and	r25, r25
 532:	64 f7       	brge	.-40     	; 0x50c <a2i+0x2a>
 534:	f5 01       	movw	r30, r10
 536:	d1 83       	std	Z+1, r29	; 0x01
 538:	c0 83       	st	Z, r28
 53a:	f6 01       	movw	r30, r12
 53c:	11 83       	std	Z+1, r17	; 0x01
 53e:	00 83       	st	Z, r16
 540:	89 2d       	mov	r24, r9
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	bf 90       	pop	r11
 554:	af 90       	pop	r10
 556:	9f 90       	pop	r9
 558:	08 95       	ret

0000055a <putchw>:
 55a:	bf 92       	push	r11
 55c:	cf 92       	push	r12
 55e:	df 92       	push	r13
 560:	ef 92       	push	r14
 562:	ff 92       	push	r15
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	6c 01       	movw	r12, r24
 56e:	7b 01       	movw	r14, r22
 570:	e8 01       	movw	r28, r16
 572:	22 23       	and	r18, r18
 574:	29 f0       	breq	.+10     	; 0x580 <putchw+0x26>
 576:	0f 2e       	mov	r0, r31
 578:	f0 e3       	ldi	r31, 0x30	; 48
 57a:	bf 2e       	mov	r11, r31
 57c:	f0 2d       	mov	r31, r0
 57e:	03 c0       	rjmp	.+6      	; 0x586 <putchw+0x2c>
 580:	68 94       	set
 582:	bb 24       	eor	r11, r11
 584:	b5 f8       	bld	r11, 5
 586:	fe 01       	movw	r30, r28
 588:	03 c0       	rjmp	.+6      	; 0x590 <putchw+0x36>
 58a:	41 50       	subi	r20, 0x01	; 1
 58c:	51 09       	sbc	r21, r1
 58e:	f9 01       	movw	r30, r18
 590:	9f 01       	movw	r18, r30
 592:	2f 5f       	subi	r18, 0xFF	; 255
 594:	3f 4f       	sbci	r19, 0xFF	; 255
 596:	80 81       	ld	r24, Z
 598:	88 23       	and	r24, r24
 59a:	49 f0       	breq	.+18     	; 0x5ae <putchw+0x54>
 59c:	14 16       	cp	r1, r20
 59e:	15 06       	cpc	r1, r21
 5a0:	a4 f3       	brlt	.-24     	; 0x58a <putchw+0x30>
 5a2:	05 c0       	rjmp	.+10     	; 0x5ae <putchw+0x54>
 5a4:	6b 2d       	mov	r22, r11
 5a6:	c6 01       	movw	r24, r12
 5a8:	f7 01       	movw	r30, r14
 5aa:	09 95       	icall
 5ac:	a8 01       	movw	r20, r16
 5ae:	8a 01       	movw	r16, r20
 5b0:	01 50       	subi	r16, 0x01	; 1
 5b2:	11 09       	sbc	r17, r1
 5b4:	14 16       	cp	r1, r20
 5b6:	15 06       	cpc	r1, r21
 5b8:	ac f3       	brlt	.-22     	; 0x5a4 <putchw+0x4a>
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <putchw+0x6a>
 5bc:	c6 01       	movw	r24, r12
 5be:	f7 01       	movw	r30, r14
 5c0:	09 95       	icall
 5c2:	e8 01       	movw	r28, r16
 5c4:	8e 01       	movw	r16, r28
 5c6:	0f 5f       	subi	r16, 0xFF	; 255
 5c8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ca:	68 81       	ld	r22, Y
 5cc:	61 11       	cpse	r22, r1
 5ce:	f6 cf       	rjmp	.-20     	; 0x5bc <putchw+0x62>
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	ff 90       	pop	r15
 5da:	ef 90       	pop	r14
 5dc:	df 90       	pop	r13
 5de:	cf 90       	pop	r12
 5e0:	bf 90       	pop	r11
 5e2:	08 95       	ret

000005e4 <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
 5e4:	9f 92       	push	r9
 5e6:	af 92       	push	r10
 5e8:	bf 92       	push	r11
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	60 97       	sbiw	r28, 0x10	; 16
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	6c 01       	movw	r12, r24
 60c:	7b 01       	movw	r14, r22
 60e:	58 8b       	std	Y+16, r21	; 0x10
 610:	4f 87       	std	Y+15, r20	; 0x0f
 612:	89 01       	movw	r16, r18
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 614:	b5 c0       	rjmp	.+362    	; 0x780 <tfp_format+0x19c>
		if (ch!='%') 
 616:	65 32       	cpi	r22, 0x25	; 37
 618:	21 f0       	breq	.+8      	; 0x622 <tfp_format+0x3e>
			putf(putp,ch);
 61a:	c6 01       	movw	r24, r12
 61c:	f7 01       	movw	r30, r14
 61e:	09 95       	icall
 620:	af c0       	rjmp	.+350    	; 0x780 <tfp_format+0x19c>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
 622:	1e 86       	std	Y+14, r1	; 0x0e
 624:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 626:	9d 01       	movw	r18, r26
 628:	2f 5f       	subi	r18, 0xFF	; 255
 62a:	3f 4f       	sbci	r19, 0xFF	; 255
 62c:	38 8b       	std	Y+16, r19	; 0x10
 62e:	2f 87       	std	Y+15, r18	; 0x0f
 630:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 632:	80 33       	cpi	r24, 0x30	; 48
 634:	49 f4       	brne	.+18     	; 0x648 <tfp_format+0x64>
				ch=*(fmt++);
 636:	2f 5f       	subi	r18, 0xFF	; 255
 638:	3f 4f       	sbci	r19, 0xFF	; 255
 63a:	38 8b       	std	Y+16, r19	; 0x10
 63c:	2f 87       	std	Y+15, r18	; 0x0f
 63e:	11 96       	adiw	r26, 0x01	; 1
 640:	8c 91       	ld	r24, X
				lz=1;
 642:	99 24       	eor	r9, r9
 644:	93 94       	inc	r9
 646:	01 c0       	rjmp	.+2      	; 0x64a <tfp_format+0x66>

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
 648:	91 2c       	mov	r9, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 64a:	90 ed       	ldi	r25, 0xD0	; 208
 64c:	98 0f       	add	r25, r24
 64e:	9a 30       	cpi	r25, 0x0A	; 10
 650:	50 f4       	brcc	.+20     	; 0x666 <tfp_format+0x82>
				ch=a2i(ch,&fmt,10,&w);
 652:	9e 01       	movw	r18, r28
 654:	23 5f       	subi	r18, 0xF3	; 243
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	4a e0       	ldi	r20, 0x0A	; 10
 65a:	50 e0       	ldi	r21, 0x00	; 0
 65c:	be 01       	movw	r22, r28
 65e:	61 5f       	subi	r22, 0xF1	; 241
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	0e 94 71 02 	call	0x4e2	; 0x4e2 <a2i>
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 666:	83 36       	cpi	r24, 0x63	; 99
 668:	09 f4       	brne	.+2      	; 0x66c <tfp_format+0x88>
 66a:	6b c0       	rjmp	.+214    	; 0x742 <tfp_format+0x15e>
 66c:	50 f4       	brcc	.+20     	; 0x682 <tfp_format+0x9e>
 66e:	85 32       	cpi	r24, 0x25	; 37
 670:	09 f4       	brne	.+2      	; 0x674 <tfp_format+0x90>
 672:	82 c0       	rjmp	.+260    	; 0x778 <tfp_format+0x194>
 674:	88 35       	cpi	r24, 0x58	; 88
 676:	09 f4       	brne	.+2      	; 0x67a <tfp_format+0x96>
 678:	44 c0       	rjmp	.+136    	; 0x702 <tfp_format+0x11e>
 67a:	88 23       	and	r24, r24
 67c:	09 f4       	brne	.+2      	; 0x680 <tfp_format+0x9c>
 67e:	89 c0       	rjmp	.+274    	; 0x792 <tfp_format+0x1ae>
 680:	7f c0       	rjmp	.+254    	; 0x780 <tfp_format+0x19c>
 682:	83 37       	cpi	r24, 0x73	; 115
 684:	09 f4       	brne	.+2      	; 0x688 <tfp_format+0xa4>
 686:	68 c0       	rjmp	.+208    	; 0x758 <tfp_format+0x174>
 688:	18 f4       	brcc	.+6      	; 0x690 <tfp_format+0xac>
 68a:	84 36       	cpi	r24, 0x64	; 100
 68c:	11 f1       	breq	.+68     	; 0x6d2 <tfp_format+0xee>
 68e:	78 c0       	rjmp	.+240    	; 0x780 <tfp_format+0x19c>
 690:	85 37       	cpi	r24, 0x75	; 117
 692:	19 f0       	breq	.+6      	; 0x69a <tfp_format+0xb6>
 694:	88 37       	cpi	r24, 0x78	; 120
 696:	a9 f1       	breq	.+106    	; 0x702 <tfp_format+0x11e>
 698:	73 c0       	rjmp	.+230    	; 0x780 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 69a:	58 01       	movw	r10, r16
 69c:	f2 e0       	ldi	r31, 0x02	; 2
 69e:	af 0e       	add	r10, r31
 6a0:	b1 1c       	adc	r11, r1
 6a2:	9e 01       	movw	r18, r28
 6a4:	2f 5f       	subi	r18, 0xFF	; 255
 6a6:	3f 4f       	sbci	r19, 0xFF	; 255
 6a8:	40 e0       	ldi	r20, 0x00	; 0
 6aa:	50 e0       	ldi	r21, 0x00	; 0
 6ac:	6a e0       	ldi	r22, 0x0A	; 10
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	f8 01       	movw	r30, r16
 6b2:	80 81       	ld	r24, Z
 6b4:	91 81       	ldd	r25, Z+1	; 0x01
 6b6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <ui2a>
					putchw(putp,putf,w,lz,bf);
 6ba:	4d 85       	ldd	r20, Y+13	; 0x0d
 6bc:	5e 85       	ldd	r21, Y+14	; 0x0e
 6be:	8e 01       	movw	r16, r28
 6c0:	0f 5f       	subi	r16, 0xFF	; 255
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	29 2d       	mov	r18, r9
 6c6:	b7 01       	movw	r22, r14
 6c8:	c6 01       	movw	r24, r12
 6ca:	0e 94 ad 02 	call	0x55a	; 0x55a <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 6ce:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 6d0:	57 c0       	rjmp	.+174    	; 0x780 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 6d2:	58 01       	movw	r10, r16
 6d4:	f2 e0       	ldi	r31, 0x02	; 2
 6d6:	af 0e       	add	r10, r31
 6d8:	b1 1c       	adc	r11, r1
 6da:	be 01       	movw	r22, r28
 6dc:	6f 5f       	subi	r22, 0xFF	; 255
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	f8 01       	movw	r30, r16
 6e2:	80 81       	ld	r24, Z
 6e4:	91 81       	ldd	r25, Z+1	; 0x01
 6e6:	0e 94 46 02 	call	0x48c	; 0x48c <i2a>
					putchw(putp,putf,w,lz,bf);
 6ea:	4d 85       	ldd	r20, Y+13	; 0x0d
 6ec:	5e 85       	ldd	r21, Y+14	; 0x0e
 6ee:	8e 01       	movw	r16, r28
 6f0:	0f 5f       	subi	r16, 0xFF	; 255
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	29 2d       	mov	r18, r9
 6f6:	b7 01       	movw	r22, r14
 6f8:	c6 01       	movw	r24, r12
 6fa:	0e 94 ad 02 	call	0x55a	; 0x55a <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 6fe:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 700:	3f c0       	rjmp	.+126    	; 0x780 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 702:	58 01       	movw	r10, r16
 704:	f2 e0       	ldi	r31, 0x02	; 2
 706:	af 0e       	add	r10, r31
 708:	b1 1c       	adc	r11, r1
 70a:	41 e0       	ldi	r20, 0x01	; 1
 70c:	50 e0       	ldi	r21, 0x00	; 0
 70e:	88 35       	cpi	r24, 0x58	; 88
 710:	11 f0       	breq	.+4      	; 0x716 <tfp_format+0x132>
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	50 e0       	ldi	r21, 0x00	; 0
 716:	9e 01       	movw	r18, r28
 718:	2f 5f       	subi	r18, 0xFF	; 255
 71a:	3f 4f       	sbci	r19, 0xFF	; 255
 71c:	60 e1       	ldi	r22, 0x10	; 16
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	f8 01       	movw	r30, r16
 722:	80 81       	ld	r24, Z
 724:	91 81       	ldd	r25, Z+1	; 0x01
 726:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <ui2a>
					putchw(putp,putf,w,lz,bf);
 72a:	4d 85       	ldd	r20, Y+13	; 0x0d
 72c:	5e 85       	ldd	r21, Y+14	; 0x0e
 72e:	8e 01       	movw	r16, r28
 730:	0f 5f       	subi	r16, 0xFF	; 255
 732:	1f 4f       	sbci	r17, 0xFF	; 255
 734:	29 2d       	mov	r18, r9
 736:	b7 01       	movw	r22, r14
 738:	c6 01       	movw	r24, r12
 73a:	0e 94 ad 02 	call	0x55a	; 0x55a <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 73e:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 740:	1f c0       	rjmp	.+62     	; 0x780 <tfp_format+0x19c>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 742:	58 01       	movw	r10, r16
 744:	f2 e0       	ldi	r31, 0x02	; 2
 746:	af 0e       	add	r10, r31
 748:	b1 1c       	adc	r11, r1
 74a:	f8 01       	movw	r30, r16
 74c:	60 81       	ld	r22, Z
 74e:	c6 01       	movw	r24, r12
 750:	f7 01       	movw	r30, r14
 752:	09 95       	icall
 754:	85 01       	movw	r16, r10
					break;
 756:	14 c0       	rjmp	.+40     	; 0x780 <tfp_format+0x19c>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 758:	58 01       	movw	r10, r16
 75a:	f2 e0       	ldi	r31, 0x02	; 2
 75c:	af 0e       	add	r10, r31
 75e:	b1 1c       	adc	r11, r1
 760:	f8 01       	movw	r30, r16
 762:	00 81       	ld	r16, Z
 764:	11 81       	ldd	r17, Z+1	; 0x01
 766:	4d 85       	ldd	r20, Y+13	; 0x0d
 768:	5e 85       	ldd	r21, Y+14	; 0x0e
 76a:	20 e0       	ldi	r18, 0x00	; 0
 76c:	b7 01       	movw	r22, r14
 76e:	c6 01       	movw	r24, r12
 770:	0e 94 ad 02 	call	0x55a	; 0x55a <putchw>
 774:	85 01       	movw	r16, r10
					break;
 776:	04 c0       	rjmp	.+8      	; 0x780 <tfp_format+0x19c>
				case '%' :
					putf(putp,ch);
 778:	68 2f       	mov	r22, r24
 77a:	c6 01       	movw	r24, r12
 77c:	f7 01       	movw	r30, r14
 77e:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 780:	ef 85       	ldd	r30, Y+15	; 0x0f
 782:	f8 89       	ldd	r31, Y+16	; 0x10
 784:	df 01       	movw	r26, r30
 786:	11 96       	adiw	r26, 0x01	; 1
 788:	b8 8b       	std	Y+16, r27	; 0x10
 78a:	af 87       	std	Y+15, r26	; 0x0f
 78c:	60 81       	ld	r22, Z
 78e:	61 11       	cpse	r22, r1
 790:	42 cf       	rjmp	.-380    	; 0x616 <tfp_format+0x32>
					break;
				}
			}
		}
	abort:;
	}
 792:	60 96       	adiw	r28, 0x10	; 16
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	f8 94       	cli
 798:	de bf       	out	0x3e, r29	; 62
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	cd bf       	out	0x3d, r28	; 61
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	ff 90       	pop	r15
 7a8:	ef 90       	pop	r14
 7aa:	df 90       	pop	r13
 7ac:	cf 90       	pop	r12
 7ae:	bf 90       	pop	r11
 7b0:	af 90       	pop	r10
 7b2:	9f 90       	pop	r9
 7b4:	08 95       	ret

000007b6 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 7b6:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <stdout_putf+0x1>
 7ba:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <stdout_putf>
	stdout_putp=putp;
 7be:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <stdout_putp+0x1>
 7c2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <stdout_putp>
 7c6:	08 95       	ret

000007c8 <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	9e 01       	movw	r18, r28
 7d2:	2b 5f       	subi	r18, 0xFB	; 251
 7d4:	3f 4f       	sbci	r19, 0xFF	; 255
 7d6:	f9 01       	movw	r30, r18
 7d8:	41 91       	ld	r20, Z+
 7da:	51 91       	ld	r21, Z+
 7dc:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 7de:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <stdout_putf>
 7e2:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <stdout_putf+0x1>
 7e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <stdout_putp>
 7ea:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <stdout_putp+0x1>
 7ee:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <tfp_format>
	va_end(va);
	}
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	08 95       	ret

000007f8 <__udivmodhi4>:
 7f8:	aa 1b       	sub	r26, r26
 7fa:	bb 1b       	sub	r27, r27
 7fc:	51 e1       	ldi	r21, 0x11	; 17
 7fe:	07 c0       	rjmp	.+14     	; 0x80e <__udivmodhi4_ep>

00000800 <__udivmodhi4_loop>:
 800:	aa 1f       	adc	r26, r26
 802:	bb 1f       	adc	r27, r27
 804:	a6 17       	cp	r26, r22
 806:	b7 07       	cpc	r27, r23
 808:	10 f0       	brcs	.+4      	; 0x80e <__udivmodhi4_ep>
 80a:	a6 1b       	sub	r26, r22
 80c:	b7 0b       	sbc	r27, r23

0000080e <__udivmodhi4_ep>:
 80e:	88 1f       	adc	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	5a 95       	dec	r21
 814:	a9 f7       	brne	.-22     	; 0x800 <__udivmodhi4_loop>
 816:	80 95       	com	r24
 818:	90 95       	com	r25
 81a:	bc 01       	movw	r22, r24
 81c:	cd 01       	movw	r24, r26
 81e:	08 95       	ret

00000820 <__divmodsi4>:
 820:	05 2e       	mov	r0, r21
 822:	97 fb       	bst	r25, 7
 824:	1e f4       	brtc	.+6      	; 0x82c <__divmodsi4+0xc>
 826:	00 94       	com	r0
 828:	0e 94 27 04 	call	0x84e	; 0x84e <__negsi2>
 82c:	57 fd       	sbrc	r21, 7
 82e:	07 d0       	rcall	.+14     	; 0x83e <__divmodsi4_neg2>
 830:	0e 94 3a 04 	call	0x874	; 0x874 <__udivmodsi4>
 834:	07 fc       	sbrc	r0, 7
 836:	03 d0       	rcall	.+6      	; 0x83e <__divmodsi4_neg2>
 838:	4e f4       	brtc	.+18     	; 0x84c <__divmodsi4_exit>
 83a:	0c 94 27 04 	jmp	0x84e	; 0x84e <__negsi2>

0000083e <__divmodsi4_neg2>:
 83e:	50 95       	com	r21
 840:	40 95       	com	r20
 842:	30 95       	com	r19
 844:	21 95       	neg	r18
 846:	3f 4f       	sbci	r19, 0xFF	; 255
 848:	4f 4f       	sbci	r20, 0xFF	; 255
 84a:	5f 4f       	sbci	r21, 0xFF	; 255

0000084c <__divmodsi4_exit>:
 84c:	08 95       	ret

0000084e <__negsi2>:
 84e:	90 95       	com	r25
 850:	80 95       	com	r24
 852:	70 95       	com	r23
 854:	61 95       	neg	r22
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	8f 4f       	sbci	r24, 0xFF	; 255
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	08 95       	ret

0000085e <__muluhisi3>:
 85e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__umulhisi3>
 862:	a5 9f       	mul	r26, r21
 864:	90 0d       	add	r25, r0
 866:	b4 9f       	mul	r27, r20
 868:	90 0d       	add	r25, r0
 86a:	a4 9f       	mul	r26, r20
 86c:	80 0d       	add	r24, r0
 86e:	91 1d       	adc	r25, r1
 870:	11 24       	eor	r1, r1
 872:	08 95       	ret

00000874 <__udivmodsi4>:
 874:	a1 e2       	ldi	r26, 0x21	; 33
 876:	1a 2e       	mov	r1, r26
 878:	aa 1b       	sub	r26, r26
 87a:	bb 1b       	sub	r27, r27
 87c:	fd 01       	movw	r30, r26
 87e:	0d c0       	rjmp	.+26     	; 0x89a <__udivmodsi4_ep>

00000880 <__udivmodsi4_loop>:
 880:	aa 1f       	adc	r26, r26
 882:	bb 1f       	adc	r27, r27
 884:	ee 1f       	adc	r30, r30
 886:	ff 1f       	adc	r31, r31
 888:	a2 17       	cp	r26, r18
 88a:	b3 07       	cpc	r27, r19
 88c:	e4 07       	cpc	r30, r20
 88e:	f5 07       	cpc	r31, r21
 890:	20 f0       	brcs	.+8      	; 0x89a <__udivmodsi4_ep>
 892:	a2 1b       	sub	r26, r18
 894:	b3 0b       	sbc	r27, r19
 896:	e4 0b       	sbc	r30, r20
 898:	f5 0b       	sbc	r31, r21

0000089a <__udivmodsi4_ep>:
 89a:	66 1f       	adc	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	1a 94       	dec	r1
 8a4:	69 f7       	brne	.-38     	; 0x880 <__udivmodsi4_loop>
 8a6:	60 95       	com	r22
 8a8:	70 95       	com	r23
 8aa:	80 95       	com	r24
 8ac:	90 95       	com	r25
 8ae:	9b 01       	movw	r18, r22
 8b0:	ac 01       	movw	r20, r24
 8b2:	bd 01       	movw	r22, r26
 8b4:	cf 01       	movw	r24, r30
 8b6:	08 95       	ret

000008b8 <__umulhisi3>:
 8b8:	a2 9f       	mul	r26, r18
 8ba:	b0 01       	movw	r22, r0
 8bc:	b3 9f       	mul	r27, r19
 8be:	c0 01       	movw	r24, r0
 8c0:	a3 9f       	mul	r26, r19
 8c2:	70 0d       	add	r23, r0
 8c4:	81 1d       	adc	r24, r1
 8c6:	11 24       	eor	r1, r1
 8c8:	91 1d       	adc	r25, r1
 8ca:	b2 9f       	mul	r27, r18
 8cc:	70 0d       	add	r23, r0
 8ce:	81 1d       	adc	r24, r1
 8d0:	11 24       	eor	r1, r1
 8d2:	91 1d       	adc	r25, r1
 8d4:	08 95       	ret

000008d6 <_exit>:
 8d6:	f8 94       	cli

000008d8 <__stop_program>:
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <__stop_program>

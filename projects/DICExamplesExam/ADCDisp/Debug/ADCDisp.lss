
ADCDisp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000734  000007c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  000007d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ac  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a4  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000982  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ab  00000000  00000000  0000328c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010b2  00000000  00000000  00003737  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000047e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 18 01 	call	0x230	; 0x230 <main>
  8a:	0c 94 98 03 	jmp	0x730	; 0x730 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_zToLCD>:
Mit Void lcd_home(char dataD) wird EN auf 1 gesetzt, dann erfolgt
die Datenausgabe. Mit 0 werden die Daten in das DD-Ram uebernommen.
Zuerst wird das High Byte, dann das Low Byte übertragen.
******************************************************************/
{
	if (dataD & 0x10) PORTA|= (1<<RS); 	
  92:	84 ff       	sbrs	r24, 4
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcd_zToLCD+0xc>
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_zToLCD+0x12>
	else              PORTA&=~(1<<RS);	
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e7 e5       	ldi	r30, 0x57	; 87
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_zToLCD+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_zToLCD+0x1c>
  ae:	00 00       	nop
	_delay_us(200);		
	PORTA|=1<< EN;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 61       	ori	r25, 0x10	; 16
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	f8 e2       	ldi	r31, 0x28	; 40
  b8:	fa 95       	dec	r31
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_zToLCD+0x26>
	_delay_us(10);		
	
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9b 71       	andi	r25, 0x1B	; 27
  c0:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x01) PORTB|=1<<DB4;;
  c2:	80 ff       	sbrs	r24, 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_zToLCD+0x3a>
  c6:	98 b3       	in	r25, 0x18	; 24
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
  cc:	81 ff       	sbrs	r24, 1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_zToLCD+0x44>
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
  d6:	82 ff       	sbrs	r24, 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_zToLCD+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	90 64       	ori	r25, 0x40	; 64
  de:	98 bb       	out	0x18, r25	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
  e0:	83 ff       	sbrs	r24, 3
  e2:	03 c0       	rjmp	.+6      	; 0xea <lcd_zToLCD+0x58>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	88 ec       	ldi	r24, 0xC8	; 200
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_zToLCD+0x5a>
	_delay_us(50);		

	PORTA &= ~(1<< EN);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	98 e2       	ldi	r25, 0x28	; 40
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_zToLCD+0x66>
  fc:	08 95       	ret

000000fe <lcd_init>:
 0   0   0   0   0   1    Display Clear Low Byte
 0   0   0   0   0   0	  Entry Mode Set High Byte I/D: 1 = Adresspointer inkrement / 0 = Adressp. dekrement
 0   0   0   1  I/D  S		Entry Mode Set Low Byte	   S: 1 = Displayinhalt Schieben  / 0 = nicht schieben		   
******************************************************************/
{
	DDRA|= 1<<RS  | 1<<EN ;
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 65       	ori	r24, 0x50	; 80
 102:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
 104:	87 b3       	in	r24, 0x17	; 23
 106:	84 6e       	ori	r24, 0xE4	; 228
 108:	87 bb       	out	0x17, r24	; 23
	PORTA&=~(1<< EN);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<< RS);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	9f ea       	ldi	r25, 0xAF	; 175
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x22>
 120:	00 00       	nop

	_delay_ms(15); lcd_zToLCD(0x03);        // Function Set A
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 128:	8f e2       	ldi	r24, 0x2F	; 47
 12a:	95 e7       	ldi	r25, 0x75	; 117
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x34>
 132:	00 00       	nop
	_delay_ms(10); lcd_zToLCD(0x03);        // Function Set B
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x46>
 144:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x03);         // Function Set C
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x58>
 156:	00 00       	nop
	_delay_ms(1); lcd_zToLCD(0x02);         // Function Set D
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x08);       
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On 1 High Byte
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On 2 Low Byte	
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
 18e:	87 eb       	ldi	r24, 0xB7	; 183
 190:	9b e0       	ldi	r25, 0x0B	; 11
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x94>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x9a>
 198:	00 00       	nop
	_delay_ms(1);

	//_delay_ms(2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
	//_delay_ms(2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
	init_printf(NULL,putc);
 19a:	64 ed       	ldi	r22, 0xD4	; 212
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <init_printf>
 1a6:	08 95       	ret

000001a8 <putc>:
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void putc ( void* p, char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

  Zeichen = c;
	Zeichen>>=4;
 1ac:	86 2f       	mov	r24, r22
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
 1b8:	8c 2f       	mov	r24, r28
 1ba:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x10;
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
**********************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
 1ca:	81 11       	cpse	r24, r1
 1cc:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			    //Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
 1ce:	8c 2f       	mov	r24, r28
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
	Zeichen|=0x08;		
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
	Zeichen=Pos;
	Zeichen&=0x0F;	
	//_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_zToLCD>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <initPorts>:
#include <avr/portpins.h>
#include "LCD_4.h"

void initPorts() 
{
	DDRC = 0xFF;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	84 bb       	out	0x14, r24	; 20
	DDRB |= (1 << PB3);
 1ea:	87 b3       	in	r24, 0x17	; 23
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	87 bb       	out	0x17, r24	; 23
	DDRA &= ~((1 << PA0) | (1 << PA1));
 1f0:	8a b3       	in	r24, 0x1a	; 26
 1f2:	8c 7f       	andi	r24, 0xFC	; 252
 1f4:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0) | (1 << PA1);
 1f6:	8b b3       	in	r24, 0x1b	; 27
 1f8:	83 60       	ori	r24, 0x03	; 3
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	08 95       	ret

000001fe <initADC>:
}

void initADC() 
{
	ADMUX |= (1 << REFS1) | (1 << REFS0);
 1fe:	87 b1       	in	r24, 0x07	; 7
 200:	80 6c       	ori	r24, 0xC0	; 192
 202:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 204:	86 b1       	in	r24, 0x06	; 6
 206:	87 60       	ori	r24, 0x07	; 7
 208:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN);
 20a:	86 b1       	in	r24, 0x06	; 6
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	86 b9       	out	0x06, r24	; 6
 210:	08 95       	ret

00000212 <readADC>:
}

uint16_t readADC(uint8_t channel) 
{
	ADMUX &= 0xF8;
 212:	97 b1       	in	r25, 0x07	; 7
 214:	98 7f       	andi	r25, 0xF8	; 248
 216:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (channel & 0x07);
 218:	97 b1       	in	r25, 0x07	; 7
 21a:	87 70       	andi	r24, 0x07	; 7
 21c:	98 2b       	or	r25, r24
 21e:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1 << ADSC);
 220:	86 b1       	in	r24, 0x06	; 6
 222:	80 64       	ori	r24, 0x40	; 64
 224:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC));
 226:	36 99       	sbic	0x06, 6	; 6
 228:	fe cf       	rjmp	.-4      	; 0x226 <readADC+0x14>
	return ADC;
 22a:	84 b1       	in	r24, 0x04	; 4
 22c:	95 b1       	in	r25, 0x05	; 5
}
 22e:	08 95       	ret

00000230 <main>:


int main(void) 
{
	initPorts();
 230:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <initPorts>
	initADC();
 234:	0e 94 ff 00 	call	0x1fe	; 0x1fe <initADC>
	lcd_init();
 238:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>

	while (1) 
	{
		uint16_t adcValue = readADC(0);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 09 01 	call	0x212	; 0x212 <readADC>
 242:	ec 01       	movw	r28, r24
		
		if (!(PINA & (1 << PA0)) && adcValue > 0) 
 244:	c8 99       	sbic	0x19, 0	; 25
 246:	15 c0       	rjmp	.+42     	; 0x272 <main+0x42>
 248:	89 2b       	or	r24, r25
 24a:	99 f0       	breq	.+38     	; 0x272 <main+0x42>
		{
			adcValue--;
 24c:	21 97       	sbiw	r28, 0x01	; 1
			lcd_pos(0,0);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
			printf("ADC: %d  ", (uint8_t)adcValue);
 256:	ce 01       	movw	r24, r28
 258:	99 27       	eor	r25, r25
 25a:	9f 93       	push	r25
 25c:	8f 93       	push	r24
 25e:	80 e6       	ldi	r24, 0x60	; 96
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	9f 93       	push	r25
 264:	8f 93       	push	r24
 266:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <tfp_printf>
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
		}

		if (!(PINA & (1 << PA1))) 
 272:	c9 99       	sbic	0x19, 1	; 25
 274:	13 c0       	rjmp	.+38     	; 0x29c <main+0x6c>
		{
			adcValue++;
 276:	21 96       	adiw	r28, 0x01	; 1
			lcd_pos(0,0);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
			printf("ADC: %d  ", (uint8_t)adcValue);
 280:	ce 01       	movw	r24, r28
 282:	99 27       	eor	r25, r25
 284:	9f 93       	push	r25
 286:	8f 93       	push	r24
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9f 93       	push	r25
 28e:	8f 93       	push	r24
 290:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <tfp_printf>
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
		}

		PORTC = (uint8_t)adcValue;
 29c:	c5 bb       	out	0x15, r28	; 21
 29e:	8f e7       	ldi	r24, 0x7F	; 127
 2a0:	99 ea       	ldi	r25, 0xA9	; 169
 2a2:	23 e0       	ldi	r18, 0x03	; 3
 2a4:	81 50       	subi	r24, 0x01	; 1
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	20 40       	sbci	r18, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x74>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x7e>
 2ae:	00 00       	nop
		_delay_ms(100);
		lcd_pos(0,0);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_pos>
		printf("ADC: %d  ", (uint8_t)adcValue);
 2b8:	dd 27       	eor	r29, r29
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	80 e6       	ldi	r24, 0x60	; 96
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	9f 93       	push	r25
 2c4:	8f 93       	push	r24
 2c6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <tfp_printf>
	}
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	b4 cf       	rjmp	.-152    	; 0x23c <main+0xc>

000002d4 <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
 2d4:	8f 92       	push	r8
 2d6:	9f 92       	push	r9
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	c8 2f       	mov	r28, r24
 2ee:	d9 2f       	mov	r29, r25
 2f0:	8b 01       	movw	r16, r22
 2f2:	6a 01       	movw	r12, r20
 2f4:	79 01       	movw	r14, r18
 2f6:	e1 e0       	ldi	r30, 0x01	; 1
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	08 c0       	rjmp	.+16     	; 0x30c <ui2a+0x38>
 2fc:	cf 01       	movw	r24, r30
 2fe:	80 9f       	mul	r24, r16
 300:	f0 01       	movw	r30, r0
 302:	81 9f       	mul	r24, r17
 304:	f0 0d       	add	r31, r0
 306:	90 9f       	mul	r25, r16
 308:	f0 0d       	add	r31, r0
 30a:	11 24       	eor	r1, r1
 30c:	8c 2f       	mov	r24, r28
 30e:	9d 2f       	mov	r25, r29
 310:	bf 01       	movw	r22, r30
 312:	0e 94 84 03 	call	0x708	; 0x708 <__udivmodhi4>
 316:	60 17       	cp	r22, r16
 318:	71 07       	cpc	r23, r17
 31a:	80 f7       	brcc	.-32     	; 0x2fc <ui2a+0x28>
 31c:	a1 2c       	mov	r10, r1
 31e:	b1 2c       	mov	r11, r1
 320:	2c c0       	rjmp	.+88     	; 0x37a <ui2a+0xa6>
 322:	8c 2f       	mov	r24, r28
 324:	9d 2f       	mov	r25, r29
 326:	bf 01       	movw	r22, r30
 328:	0e 94 84 03 	call	0x708	; 0x708 <__udivmodhi4>
 32c:	36 2f       	mov	r19, r22
 32e:	86 2e       	mov	r8, r22
 330:	97 2e       	mov	r9, r23
 332:	c8 2f       	mov	r28, r24
 334:	d9 2f       	mov	r29, r25
 336:	cf 01       	movw	r24, r30
 338:	b8 01       	movw	r22, r16
 33a:	0e 94 84 03 	call	0x708	; 0x708 <__udivmodhi4>
 33e:	fb 01       	movw	r30, r22
 340:	a1 14       	cp	r10, r1
 342:	b1 04       	cpc	r11, r1
 344:	29 f4       	brne	.+10     	; 0x350 <ui2a+0x7c>
 346:	18 14       	cp	r1, r8
 348:	19 04       	cpc	r1, r9
 34a:	14 f0       	brlt	.+4      	; 0x350 <ui2a+0x7c>
 34c:	30 97       	sbiw	r30, 0x00	; 0
 34e:	a9 f4       	brne	.+42     	; 0x37a <ui2a+0xa6>
 350:	c7 01       	movw	r24, r14
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	aa e0       	ldi	r26, 0x0A	; 10
 356:	8a 16       	cp	r8, r26
 358:	91 04       	cpc	r9, r1
 35a:	2c f0       	brlt	.+10     	; 0x366 <ui2a+0x92>
 35c:	c1 14       	cp	r12, r1
 35e:	d1 04       	cpc	r13, r1
 360:	21 f0       	breq	.+8      	; 0x36a <ui2a+0x96>
 362:	27 e3       	ldi	r18, 0x37	; 55
 364:	03 c0       	rjmp	.+6      	; 0x36c <ui2a+0x98>
 366:	20 e3       	ldi	r18, 0x30	; 48
 368:	01 c0       	rjmp	.+2      	; 0x36c <ui2a+0x98>
 36a:	27 e5       	ldi	r18, 0x57	; 87
 36c:	32 0f       	add	r19, r18
 36e:	d7 01       	movw	r26, r14
 370:	3c 93       	st	X, r19
 372:	bf ef       	ldi	r27, 0xFF	; 255
 374:	ab 1a       	sub	r10, r27
 376:	bb 0a       	sbc	r11, r27
 378:	7c 01       	movw	r14, r24
 37a:	30 97       	sbiw	r30, 0x00	; 0
 37c:	91 f6       	brne	.-92     	; 0x322 <ui2a+0x4e>
 37e:	f7 01       	movw	r30, r14
 380:	10 82       	st	Z, r1
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	df 90       	pop	r13
 390:	cf 90       	pop	r12
 392:	bf 90       	pop	r11
 394:	af 90       	pop	r10
 396:	9f 90       	pop	r9
 398:	8f 90       	pop	r8
 39a:	08 95       	ret

0000039c <i2a>:
 39c:	9b 01       	movw	r18, r22
 39e:	99 23       	and	r25, r25
 3a0:	44 f4       	brge	.+16     	; 0x3b2 <i2a+0x16>
 3a2:	91 95       	neg	r25
 3a4:	81 95       	neg	r24
 3a6:	91 09       	sbc	r25, r1
 3a8:	4d e2       	ldi	r20, 0x2D	; 45
 3aa:	fb 01       	movw	r30, r22
 3ac:	40 83       	st	Z, r20
 3ae:	2f 5f       	subi	r18, 0xFF	; 255
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	6a e0       	ldi	r22, 0x0A	; 10
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ui2a>
 3be:	08 95       	ret

000003c0 <a2d>:
 3c0:	90 ed       	ldi	r25, 0xD0	; 208
 3c2:	98 0f       	add	r25, r24
 3c4:	9a 30       	cpi	r25, 0x0A	; 10
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <a2d+0xe>
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	c0 97       	sbiw	r24, 0x30	; 48
 3cc:	08 95       	ret
 3ce:	9f e9       	ldi	r25, 0x9F	; 159
 3d0:	98 0f       	add	r25, r24
 3d2:	96 30       	cpi	r25, 0x06	; 6
 3d4:	20 f4       	brcc	.+8      	; 0x3de <a2d+0x1e>
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	87 55       	subi	r24, 0x57	; 87
 3da:	91 09       	sbc	r25, r1
 3dc:	08 95       	ret
 3de:	9f eb       	ldi	r25, 0xBF	; 191
 3e0:	98 0f       	add	r25, r24
 3e2:	96 30       	cpi	r25, 0x06	; 6
 3e4:	18 f4       	brcc	.+6      	; 0x3ec <a2d+0x2c>
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	c7 97       	sbiw	r24, 0x37	; 55
 3ea:	08 95       	ret
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	9f ef       	ldi	r25, 0xFF	; 255
 3f0:	08 95       	ret

000003f2 <a2i>:
 3f2:	9f 92       	push	r9
 3f4:	af 92       	push	r10
 3f6:	bf 92       	push	r11
 3f8:	cf 92       	push	r12
 3fa:	df 92       	push	r13
 3fc:	ef 92       	push	r14
 3fe:	ff 92       	push	r15
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	98 2e       	mov	r9, r24
 40a:	5b 01       	movw	r10, r22
 40c:	7a 01       	movw	r14, r20
 40e:	69 01       	movw	r12, r18
 410:	fb 01       	movw	r30, r22
 412:	c0 81       	ld	r28, Z
 414:	d1 81       	ldd	r29, Z+1	; 0x01
 416:	00 e0       	ldi	r16, 0x00	; 0
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	0f c0       	rjmp	.+30     	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
 41c:	e8 16       	cp	r14, r24
 41e:	f9 06       	cpc	r15, r25
 420:	8c f0       	brlt	.+34     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
 422:	0e 9d       	mul	r16, r14
 424:	90 01       	movw	r18, r0
 426:	0f 9d       	mul	r16, r15
 428:	30 0d       	add	r19, r0
 42a:	1e 9d       	mul	r17, r14
 42c:	30 0d       	add	r19, r0
 42e:	11 24       	eor	r1, r1
 430:	8c 01       	movw	r16, r24
 432:	02 0f       	add	r16, r18
 434:	13 1f       	adc	r17, r19
 436:	98 80       	ld	r9, Y
 438:	21 96       	adiw	r28, 0x01	; 1
 43a:	89 2d       	mov	r24, r9
 43c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <a2d>
 440:	99 23       	and	r25, r25
 442:	64 f7       	brge	.-40     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
 444:	f5 01       	movw	r30, r10
 446:	d1 83       	std	Z+1, r29	; 0x01
 448:	c0 83       	st	Z, r28
 44a:	f6 01       	movw	r30, r12
 44c:	11 83       	std	Z+1, r17	; 0x01
 44e:	00 83       	st	Z, r16
 450:	89 2d       	mov	r24, r9
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	ff 90       	pop	r15
 45c:	ef 90       	pop	r14
 45e:	df 90       	pop	r13
 460:	cf 90       	pop	r12
 462:	bf 90       	pop	r11
 464:	af 90       	pop	r10
 466:	9f 90       	pop	r9
 468:	08 95       	ret

0000046a <putchw>:
 46a:	bf 92       	push	r11
 46c:	cf 92       	push	r12
 46e:	df 92       	push	r13
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	6c 01       	movw	r12, r24
 47e:	7b 01       	movw	r14, r22
 480:	e8 01       	movw	r28, r16
 482:	22 23       	and	r18, r18
 484:	29 f0       	breq	.+10     	; 0x490 <putchw+0x26>
 486:	0f 2e       	mov	r0, r31
 488:	f0 e3       	ldi	r31, 0x30	; 48
 48a:	bf 2e       	mov	r11, r31
 48c:	f0 2d       	mov	r31, r0
 48e:	03 c0       	rjmp	.+6      	; 0x496 <putchw+0x2c>
 490:	68 94       	set
 492:	bb 24       	eor	r11, r11
 494:	b5 f8       	bld	r11, 5
 496:	fe 01       	movw	r30, r28
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <putchw+0x36>
 49a:	41 50       	subi	r20, 0x01	; 1
 49c:	51 09       	sbc	r21, r1
 49e:	f9 01       	movw	r30, r18
 4a0:	9f 01       	movw	r18, r30
 4a2:	2f 5f       	subi	r18, 0xFF	; 255
 4a4:	3f 4f       	sbci	r19, 0xFF	; 255
 4a6:	80 81       	ld	r24, Z
 4a8:	88 23       	and	r24, r24
 4aa:	49 f0       	breq	.+18     	; 0x4be <putchw+0x54>
 4ac:	14 16       	cp	r1, r20
 4ae:	15 06       	cpc	r1, r21
 4b0:	a4 f3       	brlt	.-24     	; 0x49a <putchw+0x30>
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <putchw+0x54>
 4b4:	6b 2d       	mov	r22, r11
 4b6:	c6 01       	movw	r24, r12
 4b8:	f7 01       	movw	r30, r14
 4ba:	09 95       	icall
 4bc:	a8 01       	movw	r20, r16
 4be:	8a 01       	movw	r16, r20
 4c0:	01 50       	subi	r16, 0x01	; 1
 4c2:	11 09       	sbc	r17, r1
 4c4:	14 16       	cp	r1, r20
 4c6:	15 06       	cpc	r1, r21
 4c8:	ac f3       	brlt	.-22     	; 0x4b4 <putchw+0x4a>
 4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <putchw+0x6a>
 4cc:	c6 01       	movw	r24, r12
 4ce:	f7 01       	movw	r30, r14
 4d0:	09 95       	icall
 4d2:	e8 01       	movw	r28, r16
 4d4:	8e 01       	movw	r16, r28
 4d6:	0f 5f       	subi	r16, 0xFF	; 255
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
 4da:	68 81       	ld	r22, Y
 4dc:	61 11       	cpse	r22, r1
 4de:	f6 cf       	rjmp	.-20     	; 0x4cc <putchw+0x62>
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	ff 90       	pop	r15
 4ea:	ef 90       	pop	r14
 4ec:	df 90       	pop	r13
 4ee:	cf 90       	pop	r12
 4f0:	bf 90       	pop	r11
 4f2:	08 95       	ret

000004f4 <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
 4f4:	9f 92       	push	r9
 4f6:	af 92       	push	r10
 4f8:	bf 92       	push	r11
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	60 97       	sbiw	r28, 0x10	; 16
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	6c 01       	movw	r12, r24
 51c:	7b 01       	movw	r14, r22
 51e:	58 8b       	std	Y+16, r21	; 0x10
 520:	4f 87       	std	Y+15, r20	; 0x0f
 522:	89 01       	movw	r16, r18
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 524:	b5 c0       	rjmp	.+362    	; 0x690 <tfp_format+0x19c>
		if (ch!='%') 
 526:	65 32       	cpi	r22, 0x25	; 37
 528:	21 f0       	breq	.+8      	; 0x532 <tfp_format+0x3e>
			putf(putp,ch);
 52a:	c6 01       	movw	r24, r12
 52c:	f7 01       	movw	r30, r14
 52e:	09 95       	icall
 530:	af c0       	rjmp	.+350    	; 0x690 <tfp_format+0x19c>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
 532:	1e 86       	std	Y+14, r1	; 0x0e
 534:	1d 86       	std	Y+13, r1	; 0x0d
			ch=*(fmt++);
 536:	9d 01       	movw	r18, r26
 538:	2f 5f       	subi	r18, 0xFF	; 255
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
 53c:	38 8b       	std	Y+16, r19	; 0x10
 53e:	2f 87       	std	Y+15, r18	; 0x0f
 540:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
 542:	80 33       	cpi	r24, 0x30	; 48
 544:	49 f4       	brne	.+18     	; 0x558 <tfp_format+0x64>
				ch=*(fmt++);
 546:	2f 5f       	subi	r18, 0xFF	; 255
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	38 8b       	std	Y+16, r19	; 0x10
 54c:	2f 87       	std	Y+15, r18	; 0x0f
 54e:	11 96       	adiw	r26, 0x01	; 1
 550:	8c 91       	ld	r24, X
				lz=1;
 552:	99 24       	eor	r9, r9
 554:	93 94       	inc	r9
 556:	01 c0       	rjmp	.+2      	; 0x55a <tfp_format+0x66>

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
 558:	91 2c       	mov	r9, r1
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 55a:	90 ed       	ldi	r25, 0xD0	; 208
 55c:	98 0f       	add	r25, r24
 55e:	9a 30       	cpi	r25, 0x0A	; 10
 560:	50 f4       	brcc	.+20     	; 0x576 <tfp_format+0x82>
				ch=a2i(ch,&fmt,10,&w);
 562:	9e 01       	movw	r18, r28
 564:	23 5f       	subi	r18, 0xF3	; 243
 566:	3f 4f       	sbci	r19, 0xFF	; 255
 568:	4a e0       	ldi	r20, 0x0A	; 10
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	be 01       	movw	r22, r28
 56e:	61 5f       	subi	r22, 0xF1	; 241
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <a2i>
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
 576:	83 36       	cpi	r24, 0x63	; 99
 578:	09 f4       	brne	.+2      	; 0x57c <tfp_format+0x88>
 57a:	6b c0       	rjmp	.+214    	; 0x652 <tfp_format+0x15e>
 57c:	50 f4       	brcc	.+20     	; 0x592 <tfp_format+0x9e>
 57e:	85 32       	cpi	r24, 0x25	; 37
 580:	09 f4       	brne	.+2      	; 0x584 <tfp_format+0x90>
 582:	82 c0       	rjmp	.+260    	; 0x688 <tfp_format+0x194>
 584:	88 35       	cpi	r24, 0x58	; 88
 586:	09 f4       	brne	.+2      	; 0x58a <tfp_format+0x96>
 588:	44 c0       	rjmp	.+136    	; 0x612 <tfp_format+0x11e>
 58a:	88 23       	and	r24, r24
 58c:	09 f4       	brne	.+2      	; 0x590 <tfp_format+0x9c>
 58e:	89 c0       	rjmp	.+274    	; 0x6a2 <tfp_format+0x1ae>
 590:	7f c0       	rjmp	.+254    	; 0x690 <tfp_format+0x19c>
 592:	83 37       	cpi	r24, 0x73	; 115
 594:	09 f4       	brne	.+2      	; 0x598 <tfp_format+0xa4>
 596:	68 c0       	rjmp	.+208    	; 0x668 <tfp_format+0x174>
 598:	18 f4       	brcc	.+6      	; 0x5a0 <tfp_format+0xac>
 59a:	84 36       	cpi	r24, 0x64	; 100
 59c:	11 f1       	breq	.+68     	; 0x5e2 <tfp_format+0xee>
 59e:	78 c0       	rjmp	.+240    	; 0x690 <tfp_format+0x19c>
 5a0:	85 37       	cpi	r24, 0x75	; 117
 5a2:	19 f0       	breq	.+6      	; 0x5aa <tfp_format+0xb6>
 5a4:	88 37       	cpi	r24, 0x78	; 120
 5a6:	a9 f1       	breq	.+106    	; 0x612 <tfp_format+0x11e>
 5a8:	73 c0       	rjmp	.+230    	; 0x690 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 5aa:	58 01       	movw	r10, r16
 5ac:	f2 e0       	ldi	r31, 0x02	; 2
 5ae:	af 0e       	add	r10, r31
 5b0:	b1 1c       	adc	r11, r1
 5b2:	9e 01       	movw	r18, r28
 5b4:	2f 5f       	subi	r18, 0xFF	; 255
 5b6:	3f 4f       	sbci	r19, 0xFF	; 255
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	6a e0       	ldi	r22, 0x0A	; 10
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	f8 01       	movw	r30, r16
 5c2:	80 81       	ld	r24, Z
 5c4:	91 81       	ldd	r25, Z+1	; 0x01
 5c6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ui2a>
					putchw(putp,putf,w,lz,bf);
 5ca:	4d 85       	ldd	r20, Y+13	; 0x0d
 5cc:	5e 85       	ldd	r21, Y+14	; 0x0e
 5ce:	8e 01       	movw	r16, r28
 5d0:	0f 5f       	subi	r16, 0xFF	; 255
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
 5d4:	29 2d       	mov	r18, r9
 5d6:	b7 01       	movw	r22, r14
 5d8:	c6 01       	movw	r24, r12
 5da:	0e 94 35 02 	call	0x46a	; 0x46a <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
 5de:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 5e0:	57 c0       	rjmp	.+174    	; 0x690 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 5e2:	58 01       	movw	r10, r16
 5e4:	f2 e0       	ldi	r31, 0x02	; 2
 5e6:	af 0e       	add	r10, r31
 5e8:	b1 1c       	adc	r11, r1
 5ea:	be 01       	movw	r22, r28
 5ec:	6f 5f       	subi	r22, 0xFF	; 255
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	f8 01       	movw	r30, r16
 5f2:	80 81       	ld	r24, Z
 5f4:	91 81       	ldd	r25, Z+1	; 0x01
 5f6:	0e 94 ce 01 	call	0x39c	; 0x39c <i2a>
					putchw(putp,putf,w,lz,bf);
 5fa:	4d 85       	ldd	r20, Y+13	; 0x0d
 5fc:	5e 85       	ldd	r21, Y+14	; 0x0e
 5fe:	8e 01       	movw	r16, r28
 600:	0f 5f       	subi	r16, 0xFF	; 255
 602:	1f 4f       	sbci	r17, 0xFF	; 255
 604:	29 2d       	mov	r18, r9
 606:	b7 01       	movw	r22, r14
 608:	c6 01       	movw	r24, r12
 60a:	0e 94 35 02 	call	0x46a	; 0x46a <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
 60e:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 610:	3f c0       	rjmp	.+126    	; 0x690 <tfp_format+0x19c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 612:	58 01       	movw	r10, r16
 614:	f2 e0       	ldi	r31, 0x02	; 2
 616:	af 0e       	add	r10, r31
 618:	b1 1c       	adc	r11, r1
 61a:	41 e0       	ldi	r20, 0x01	; 1
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	88 35       	cpi	r24, 0x58	; 88
 620:	11 f0       	breq	.+4      	; 0x626 <tfp_format+0x132>
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	9e 01       	movw	r18, r28
 628:	2f 5f       	subi	r18, 0xFF	; 255
 62a:	3f 4f       	sbci	r19, 0xFF	; 255
 62c:	60 e1       	ldi	r22, 0x10	; 16
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	f8 01       	movw	r30, r16
 632:	80 81       	ld	r24, Z
 634:	91 81       	ldd	r25, Z+1	; 0x01
 636:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ui2a>
					putchw(putp,putf,w,lz,bf);
 63a:	4d 85       	ldd	r20, Y+13	; 0x0d
 63c:	5e 85       	ldd	r21, Y+14	; 0x0e
 63e:	8e 01       	movw	r16, r28
 640:	0f 5f       	subi	r16, 0xFF	; 255
 642:	1f 4f       	sbci	r17, 0xFF	; 255
 644:	29 2d       	mov	r18, r9
 646:	b7 01       	movw	r22, r14
 648:	c6 01       	movw	r24, r12
 64a:	0e 94 35 02 	call	0x46a	; 0x46a <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 64e:	85 01       	movw	r16, r10
					putchw(putp,putf,w,lz,bf);
					break;
 650:	1f c0       	rjmp	.+62     	; 0x690 <tfp_format+0x19c>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
 652:	58 01       	movw	r10, r16
 654:	f2 e0       	ldi	r31, 0x02	; 2
 656:	af 0e       	add	r10, r31
 658:	b1 1c       	adc	r11, r1
 65a:	f8 01       	movw	r30, r16
 65c:	60 81       	ld	r22, Z
 65e:	c6 01       	movw	r24, r12
 660:	f7 01       	movw	r30, r14
 662:	09 95       	icall
 664:	85 01       	movw	r16, r10
					break;
 666:	14 c0       	rjmp	.+40     	; 0x690 <tfp_format+0x19c>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
 668:	58 01       	movw	r10, r16
 66a:	f2 e0       	ldi	r31, 0x02	; 2
 66c:	af 0e       	add	r10, r31
 66e:	b1 1c       	adc	r11, r1
 670:	f8 01       	movw	r30, r16
 672:	00 81       	ld	r16, Z
 674:	11 81       	ldd	r17, Z+1	; 0x01
 676:	4d 85       	ldd	r20, Y+13	; 0x0d
 678:	5e 85       	ldd	r21, Y+14	; 0x0e
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	b7 01       	movw	r22, r14
 67e:	c6 01       	movw	r24, r12
 680:	0e 94 35 02 	call	0x46a	; 0x46a <putchw>
 684:	85 01       	movw	r16, r10
					break;
 686:	04 c0       	rjmp	.+8      	; 0x690 <tfp_format+0x19c>
				case '%' :
					putf(putp,ch);
 688:	68 2f       	mov	r22, r24
 68a:	c6 01       	movw	r24, r12
 68c:	f7 01       	movw	r30, r14
 68e:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
 690:	ef 85       	ldd	r30, Y+15	; 0x0f
 692:	f8 89       	ldd	r31, Y+16	; 0x10
 694:	df 01       	movw	r26, r30
 696:	11 96       	adiw	r26, 0x01	; 1
 698:	b8 8b       	std	Y+16, r27	; 0x10
 69a:	af 87       	std	Y+15, r26	; 0x0f
 69c:	60 81       	ld	r22, Z
 69e:	61 11       	cpse	r22, r1
 6a0:	42 cf       	rjmp	.-380    	; 0x526 <tfp_format+0x32>
					break;
				}
			}
		}
	abort:;
	}
 6a2:	60 96       	adiw	r28, 0x10	; 16
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	f8 94       	cli
 6a8:	de bf       	out	0x3e, r29	; 62
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	cd bf       	out	0x3d, r28	; 61
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	ff 90       	pop	r15
 6b8:	ef 90       	pop	r14
 6ba:	df 90       	pop	r13
 6bc:	cf 90       	pop	r12
 6be:	bf 90       	pop	r11
 6c0:	af 90       	pop	r10
 6c2:	9f 90       	pop	r9
 6c4:	08 95       	ret

000006c6 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
 6c6:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <stdout_putf+0x1>
 6ca:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <stdout_putf>
	stdout_putp=putp;
 6ce:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 6d2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 6d6:	08 95       	ret

000006d8 <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
 6e0:	9e 01       	movw	r18, r28
 6e2:	2b 5f       	subi	r18, 0xFB	; 251
 6e4:	3f 4f       	sbci	r19, 0xFF	; 255
 6e6:	f9 01       	movw	r30, r18
 6e8:	41 91       	ld	r20, Z+
 6ea:	51 91       	ld	r21, Z+
 6ec:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
 6ee:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <stdout_putf>
 6f2:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <stdout_putf+0x1>
 6f6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 6fa:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 6fe:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <tfp_format>
	va_end(va);
	}
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	08 95       	ret

00000708 <__udivmodhi4>:
 708:	aa 1b       	sub	r26, r26
 70a:	bb 1b       	sub	r27, r27
 70c:	51 e1       	ldi	r21, 0x11	; 17
 70e:	07 c0       	rjmp	.+14     	; 0x71e <__udivmodhi4_ep>

00000710 <__udivmodhi4_loop>:
 710:	aa 1f       	adc	r26, r26
 712:	bb 1f       	adc	r27, r27
 714:	a6 17       	cp	r26, r22
 716:	b7 07       	cpc	r27, r23
 718:	10 f0       	brcs	.+4      	; 0x71e <__udivmodhi4_ep>
 71a:	a6 1b       	sub	r26, r22
 71c:	b7 0b       	sbc	r27, r23

0000071e <__udivmodhi4_ep>:
 71e:	88 1f       	adc	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	5a 95       	dec	r21
 724:	a9 f7       	brne	.-22     	; 0x710 <__udivmodhi4_loop>
 726:	80 95       	com	r24
 728:	90 95       	com	r25
 72a:	bc 01       	movw	r22, r24
 72c:	cd 01       	movw	r24, r26
 72e:	08 95       	ret

00000730 <_exit>:
 730:	f8 94       	cli

00000732 <__stop_program>:
 732:	ff cf       	rjmp	.-2      	; 0x732 <__stop_program>

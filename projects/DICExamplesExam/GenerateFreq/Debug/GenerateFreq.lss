
GenerateFreq.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000184  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c3  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000619  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c1  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b1  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000073  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
#include <util/delay.h>

volatile uint8_t toggle = 0;

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	// Hier wird der Zustand des Pins umgeschaltet
	toggle = !toggle;
  8a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	91 11       	cpse	r25, r1
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (toggle)
  98:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9c:	88 23       	and	r24, r24
  9e:	21 f0       	breq	.+8      	; 0xa8 <__vector_19+0x2c>
	{
		PORTB |= (1 << PB3); // Setze Pin PB0
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	03 c0       	rjmp	.+6      	; 0xae <__vector_19+0x32>
	} 
	else 
	{
		PORTB &= ~(1 << PB3); // Lösche Pin PB0
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	87 7f       	andi	r24, 0xF7	; 247
  ac:	88 bb       	out	0x18, r24	; 24
	}
}
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <initPorts>:

void initPorts()
{
	DDRB |= (1 << PB3); // Setze PB0 als Ausgang
  bc:	87 b3       	in	r24, 0x17	; 23
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret

000000c8 <initTimer0CTC>:
}

void initTimer0CTC()
{
	TCCR0 |= (1 << WGM01); // CTC-Modus aktivieren
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	83 bf       	out	0x33, r24	; 51
	OCR0 = 116; // Vergleichswert für 200 Hz bei F_CPU = 12 MHz und Prescaler 256
  ce:	84 e7       	ldi	r24, 0x74	; 116
  d0:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0); // Aktiviere den Compare Match Interrupt
  d2:	89 b7       	in	r24, 0x39	; 57
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1 << CS02); // Setze den Timer-Prescaler auf 256
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	83 bf       	out	0x33, r24	; 51
  de:	08 95       	ret

000000e0 <main>:
}

int main(void)
{
	cli();
  e0:	f8 94       	cli
	initPorts();
  e2:	0e 94 5e 00 	call	0xbc	; 0xbc <initPorts>
	initTimer0CTC();
  e6:	0e 94 64 00 	call	0xc8	; 0xc8 <initTimer0CTC>
	sei();
  ea:	78 94       	sei

	while (1)
	{
		auto output = DDRB |= (1 << PB3);
  ec:	87 b3       	in	r24, 0x17	; 23
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	87 bb       	out	0x17, r24	; 23
		PORTC ^= output;
  f2:	95 b3       	in	r25, 0x15	; 21
  f4:	89 27       	eor	r24, r25
  f6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	82 e5       	ldi	r24, 0x52	; 82
  fc:	97 e0       	ldi	r25, 0x07	; 7
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x1e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x28>
 108:	00 00       	nop
 10a:	f0 cf       	rjmp	.-32     	; 0xec <main+0xc>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>

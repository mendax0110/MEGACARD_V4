
TimerCounter3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f3  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055e  00000000  00000000  0000078b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000212  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000128a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_timer0>:
#include <avr/interrupt.h>


void init_timer0()
{
	TCCR0 &= ~(1 << WGM00);							// Normal Mode
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	8f 7b       	andi	r24, 0xBF	; 191
  70:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << WGM01);	
  72:	83 b7       	in	r24, 0x33	; 51
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM00) | (1 << CS02) | (CS00);	// Toggle - OC0, F_CPU: 1024
  78:	83 b7       	in	r24, 0x33	; 51
  7a:	84 61       	ori	r24, 0x14	; 20
  7c:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 245;									// Preload - 245 => Out = F_CPU:1024:10
  7e:	85 ef       	ldi	r24, 0xF5	; 245
  80:	82 bf       	out	0x32, r24	; 50
  82:	08 95       	ret

00000084 <init_ports>:
}

void init_ports()
{
	DDRC = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7);	// Set LED Indicator
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);		// OC0 - Ausgang Toggle
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	88 60       	ori	r24, 0x08	; 8
  92:	87 bb       	out	0x17, r24	; 23
  94:	08 95       	ret

00000096 <main>:
}

int main(void)
{	
    cli();			// lock	
  96:	f8 94       	cli
	init_ports();	// init the ports
  98:	0e 94 42 00 	call	0x84	; 0x84 <init_ports>
	init_timer0();	// init the timer
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <init_timer0>
	sei();			// enable global interrupts
  a0:	78 94       	sei
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0xc>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>


TimerCounter1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000746  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017f  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define T_PRELL 20

int main(void)
{
	// configure ports
	DDRA &= ~(1<<TASTER1); // input
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	8a bb       	out	0x1a, r24	; 26
	DDRA &= ~(1<<TASTER2); // input
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<TASTER1)|(1<<TASTER2); // pull-up
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	83 60       	ori	r24, 0x03	; 3
  7c:	8b bb       	out	0x1b, r24	; 27
	DDRC |= 0xFF; // output
  7e:	84 b3       	in	r24, 0x14	; 20
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0x01; // LED on
  84:	85 b3       	in	r24, 0x15	; 21
  86:	81 60       	ori	r24, 0x01	; 1
  88:	85 bb       	out	0x15, r24	; 21

	// init timer and counter
	uint8_t counter = 0;
	uint16_t timer = 0;
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
	PORTA |= (1<<TASTER1)|(1<<TASTER2); // pull-up
	DDRC |= 0xFF; // output
	PORTC |= 0x01; // LED on

	// init timer and counter
	uint8_t counter = 0;
  8e:	80 e0       	ldi	r24, 0x00	; 0
	uint16_t timer = 0;

	while(1)
	{
		if(!(PINA & (1 << TASTER1)))
  90:	c8 99       	sbic	0x19, 0	; 25
  92:	1c c0       	rjmp	.+56     	; 0xcc <main+0x60>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	ef e5       	ldi	r30, 0x5F	; 95
  96:	fa ee       	ldi	r31, 0xEA	; 234
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
  a0:	06 c0       	rjmp	.+12     	; 0xae <main+0x42>
  a2:	ef e5       	ldi	r30, 0x5F	; 95
  a4:	fa ee       	ldi	r31, 0xEA	; 234
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
		{
			_delay_ms(T_PRELL);

			while(!(PINA & (1 << TASTER1)))
  ae:	c8 9b       	sbis	0x19, 0	; 25
  b0:	f8 cf       	rjmp	.-16     	; 0xa2 <main+0x36>
			_delay_ms(T_PRELL);

			counter++;
  b2:	8f 5f       	subi	r24, 0xFF	; 255

			if(counter > 7) counter = 7;
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	08 f0       	brcs	.+2      	; 0xba <main+0x4e>
  b8:	87 e0       	ldi	r24, 0x07	; 7

			PORTC = (1 << counter);
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	08 2e       	mov	r0, r24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x5a>
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <main+0x56>
  ca:	45 bb       	out	0x15, r20	; 21
		}

		if(!(PINA & (1 << TASTER2)))
  cc:	c9 99       	sbic	0x19, 1	; 25
  ce:	11 c0       	rjmp	.+34     	; 0xf2 <main+0x86>
  d0:	ef e5       	ldi	r30, 0x5F	; 95
  d2:	fa ee       	ldi	r31, 0xEA	; 234
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x68>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
  dc:	06 c0       	rjmp	.+12     	; 0xea <main+0x7e>
  de:	ef e5       	ldi	r30, 0x5F	; 95
  e0:	fa ee       	ldi	r31, 0xEA	; 234
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x76>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x7c>
  e8:	00 00       	nop
		{
			_delay_ms(T_PRELL);

			while(!(PINA & (1 << TASTER2)))
  ea:	c9 9b       	sbis	0x19, 1	; 25
  ec:	f8 cf       	rjmp	.-16     	; 0xde <main+0x72>
			_delay_ms(T_PRELL);

			timer += 100;
  ee:	2c 59       	subi	r18, 0x9C	; 156
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		// check timer and blink LED
		if(timer > 100)
  f2:	25 36       	cpi	r18, 0x65	; 101
  f4:	31 05       	cpc	r19, r1
  f6:	28 f0       	brcs	.+10     	; 0x102 <main+0x96>
		{
			timer = 0;
			PORTC ^= 0xFF;
  f8:	95 b3       	in	r25, 0x15	; 21
  fa:	90 95       	com	r25
  fc:	95 bb       	out	0x15, r25	; 21
		}

		// check timer and blink LED
		if(timer > 100)
		{
			timer = 0;
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	ef e2       	ldi	r30, 0x2F	; 47
 104:	f5 e7       	ldi	r31, 0x75	; 117
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x9a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0xa0>
 10c:	00 00       	nop
 10e:	c0 cf       	rjmp	.-128    	; 0x90 <main+0x24>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>


TestUebungenFastPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000736  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000629  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038e  00000000  00000000  0000105b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c5  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  74:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_ports>:

volatile uint8_t OCR0Var = 0;

void init_ports()
{
	DDRC = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC7);
  80:	85 b3       	in	r24, 0x15	; 21
  82:	80 68       	ori	r24, 0x80	; 128
  84:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	88 60       	ori	r24, 0x08	; 8
  8a:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB3);
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	87 7f       	andi	r24, 0xF7	; 247
  90:	88 bb       	out	0x18, r24	; 24
  92:	08 95       	ret

00000094 <increaseOCR0>:
	decreaseOCR0();	
}

void increaseOCR0()
{
	for(OCR0Var = 0; OCR0Var <= 7; OCR0Var++)
  94:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	3d c0       	rjmp	.+122    	; 0x114 <increaseOCR0+0x80>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f e7       	ldi	r18, 0x7F	; 127
  9c:	8f e4       	ldi	r24, 0x4F	; 79
  9e:	92 e1       	ldi	r25, 0x12	; 18
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <increaseOCR0+0xc>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <increaseOCR0+0x16>
  aa:	00 00       	nop
	{
		_delay_ms(500);
		if(OCR0Var == 1)
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	21 f4       	brne	.+8      	; 0xbc <increaseOCR0+0x28>
		{
			PORTC |= (1 << PC0);
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	27 c0       	rjmp	.+78     	; 0x10a <increaseOCR0+0x76>
		}
		else if(OCR0Var == 2)
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	21 f4       	brne	.+8      	; 0xcc <increaseOCR0+0x38>
		{
			PORTC |= (1 << PC1);
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	1f c0       	rjmp	.+62     	; 0x10a <increaseOCR0+0x76>
		}
		else if(OCR0Var == 3)
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	21 f4       	brne	.+8      	; 0xdc <increaseOCR0+0x48>
		{
			PORTC |= (1 << PC2);
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	85 bb       	out	0x15, r24	; 21
  da:	17 c0       	rjmp	.+46     	; 0x10a <increaseOCR0+0x76>
		}
		else if(OCR0Var == 4)
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	21 f4       	brne	.+8      	; 0xec <increaseOCR0+0x58>
		{
			PORTC |= (1 << PC3);
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	0f c0       	rjmp	.+30     	; 0x10a <increaseOCR0+0x76>
		}
		else if(OCR0Var == 5)
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	85 30       	cpi	r24, 0x05	; 5
  f2:	21 f4       	brne	.+8      	; 0xfc <increaseOCR0+0x68>
		{
			PORTC |= (1 << PC4);
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	07 c0       	rjmp	.+14     	; 0x10a <increaseOCR0+0x76>
		}
		else if(OCR0Var == 6)
  fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 100:	86 30       	cpi	r24, 0x06	; 6
 102:	19 f4       	brne	.+6      	; 0x10a <increaseOCR0+0x76>
		{
			PORTC |= (1 << PC5);
 104:	85 b3       	in	r24, 0x15	; 21
 106:	80 62       	ori	r24, 0x20	; 32
 108:	85 bb       	out	0x15, r24	; 21
	decreaseOCR0();	
}

void increaseOCR0()
{
	for(OCR0Var = 0; OCR0Var <= 7; OCR0Var++)
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	88 30       	cpi	r24, 0x08	; 8
 11a:	08 f4       	brcc	.+2      	; 0x11e <increaseOCR0+0x8a>
 11c:	be cf       	rjmp	.-132    	; 0x9a <increaseOCR0+0x6>
		{
			PORTC |= (1 << PC5);
		}
	}
	
	OCR0 = OCR0Var;
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 122:	8c bf       	out	0x3c, r24	; 60
 124:	08 95       	ret

00000126 <decreaseOCR0>:
}

void decreaseOCR0()
{
	for(OCR0Var = 7; OCR0Var >= 0; OCR0Var--)
 126:	87 e0       	ldi	r24, 0x07	; 7
 128:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 12c:	38 c0       	rjmp	.+112    	; 0x19e <decreaseOCR0+0x78>
	{
		_delay_ms(500);
		if(OCR0Var == 0)
		{
			PORTC &= ~(1 << PC6);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	8f 7b       	andi	r24, 0xBF	; 191
 132:	85 bb       	out	0x15, r24	; 21
 134:	2f c0       	rjmp	.+94     	; 0x194 <decreaseOCR0+0x6e>
		}
		else if(OCR0Var == 1)
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	21 f4       	brne	.+8      	; 0x146 <decreaseOCR0+0x20>
		{
			PORTC &= ~(1 << PC5);
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	8f 7d       	andi	r24, 0xDF	; 223
 142:	85 bb       	out	0x15, r24	; 21
 144:	27 c0       	rjmp	.+78     	; 0x194 <decreaseOCR0+0x6e>
		}
		else if(OCR0Var == 2)
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	21 f4       	brne	.+8      	; 0x156 <decreaseOCR0+0x30>
		{
			PORTC &= ~(1 << PC4);
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	8f 7e       	andi	r24, 0xEF	; 239
 152:	85 bb       	out	0x15, r24	; 21
 154:	1f c0       	rjmp	.+62     	; 0x194 <decreaseOCR0+0x6e>
		}
		else if(OCR0Var == 3)
 156:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	21 f4       	brne	.+8      	; 0x166 <decreaseOCR0+0x40>
		{
			PORTC &= ~(1 << PC3);
 15e:	85 b3       	in	r24, 0x15	; 21
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	85 bb       	out	0x15, r24	; 21
 164:	17 c0       	rjmp	.+46     	; 0x194 <decreaseOCR0+0x6e>
		}
		else if(OCR0Var == 4)
 166:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	21 f4       	brne	.+8      	; 0x176 <decreaseOCR0+0x50>
		{
			PORTC &= ~(1 << PC2);
 16e:	85 b3       	in	r24, 0x15	; 21
 170:	8b 7f       	andi	r24, 0xFB	; 251
 172:	85 bb       	out	0x15, r24	; 21
 174:	0f c0       	rjmp	.+30     	; 0x194 <decreaseOCR0+0x6e>
		}
		else if(OCR0Var == 5)
 176:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17a:	85 30       	cpi	r24, 0x05	; 5
 17c:	21 f4       	brne	.+8      	; 0x186 <decreaseOCR0+0x60>
		{
			PORTC &= ~(1 << PC1);
 17e:	85 b3       	in	r24, 0x15	; 21
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	85 bb       	out	0x15, r24	; 21
 184:	07 c0       	rjmp	.+14     	; 0x194 <decreaseOCR0+0x6e>
		}
		else if(OCR0Var == 6)
 186:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18a:	86 30       	cpi	r24, 0x06	; 6
 18c:	19 f4       	brne	.+6      	; 0x194 <decreaseOCR0+0x6e>
		{
			PORTC &= ~(1 << PC0);
 18e:	85 b3       	in	r24, 0x15	; 21
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	85 bb       	out	0x15, r24	; 21
	OCR0 = OCR0Var;
}

void decreaseOCR0()
{
	for(OCR0Var = 7; OCR0Var >= 0; OCR0Var--)
 194:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 198:	81 50       	subi	r24, 0x01	; 1
 19a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 19e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a2:	2f e7       	ldi	r18, 0x7F	; 127
 1a4:	8f e4       	ldi	r24, 0x4F	; 79
 1a6:	92 e1       	ldi	r25, 0x12	; 18
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <decreaseOCR0+0x82>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <decreaseOCR0+0x8c>
 1b2:	00 00       	nop
	{
		_delay_ms(500);
		if(OCR0Var == 0)
 1b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	88 23       	and	r24, r24
 1ba:	09 f4       	brne	.+2      	; 0x1be <decreaseOCR0+0x98>
 1bc:	b8 cf       	rjmp	.-144    	; 0x12e <decreaseOCR0+0x8>
 1be:	bb cf       	rjmp	.-138    	; 0x136 <decreaseOCR0+0x10>

000001c0 <init_fast_PMW>:
	PORTB &= ~(1 << PB3);
}

void init_fast_PMW()
{
	TCCR0 |= (1 << WGM00)|(1 << COM01)|(1 << WGM01)|(1 << CS01)|(1 << CS00);
 1c0:	83 b7       	in	r24, 0x33	; 51
 1c2:	8b 66       	ori	r24, 0x6B	; 107
 1c4:	83 bf       	out	0x33, r24	; 51
	
	increaseOCR0();
 1c6:	0e 94 4a 00 	call	0x94	; 0x94 <increaseOCR0>
	decreaseOCR0();	
 1ca:	0e 94 93 00 	call	0x126	; 0x126 <decreaseOCR0>

000001ce <main>:
	OCR0 = OCR0Var;
}

int main(void)
{
	cli();
 1ce:	f8 94       	cli
	init_ports();
 1d0:	0e 94 3e 00 	call	0x7c	; 0x7c <init_ports>
	init_fast_PMW();
 1d4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <init_fast_PMW>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>

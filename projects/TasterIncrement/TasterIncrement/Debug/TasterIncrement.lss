
TasterIncrement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  0000086f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000382  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define TASTER_FAST PA0        // fast button
#define TASTER_SLOW PA1        // slow button

int main(void)
{
	DDRC = 0xFF;            // Port C as output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRA &= ~(1<<PINA0) & ~(1<<PINA1);   // PA0 and PA1 as inputs
  70:	8a b3       	in	r24, 0x1a	; 26
  72:	8c 7f       	andi	r24, 0xFC	; 252
  74:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;           // Set Port C to 0
  76:	15 ba       	out	0x15, r1	; 21

	while(1)
	{
		if (PINA & (1<<TASTER_FAST))  // If PA0 is pressed
  78:	c8 9b       	sbis	0x19, 0	; 25
  7a:	0e c0       	rjmp	.+28     	; 0x98 <main+0x2c>
		{
			// LED blinks faster
			PORTC += 1;         // Increment PORTC LEDs
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	8f 5f       	subi	r24, 0xFF	; 255
  80:	85 bb       	out	0x15, r24	; 21
			if (PORTC == 0xFF)
  82:	85 b3       	in	r24, 0x15	; 21
  84:	8f 3f       	cpi	r24, 0xFF	; 255
  86:	09 f4       	brne	.+2      	; 0x8a <main+0x1e>
			{
				PORTC = 0x00;
  88:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e2       	ldi	r24, 0x2F	; 47
  8c:	95 e7       	ldi	r25, 0x75	; 117
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
  96:	f0 cf       	rjmp	.-32     	; 0x78 <main+0xc>
			}
			_delay_ms(10);      // Wait 10ms
		}
		else if (PINA & (1<<TASTER_SLOW)) // If PA1 is pressed
  98:	c9 9b       	sbis	0x19, 1	; 25
  9a:	11 c0       	rjmp	.+34     	; 0xbe <main+0x52>
		{
			// LED blinks slower
			PORTC += 1;         // Increment PORTC LEDs
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	85 bb       	out	0x15, r24	; 21
			if (PORTC == 0xFF)
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	8f 3f       	cpi	r24, 0xFF	; 255
  a6:	09 f4       	brne	.+2      	; 0xaa <main+0x3e>
			{
				PORTC = 0x00;
  a8:	15 ba       	out	0x15, r1	; 21
  aa:	9f e7       	ldi	r25, 0x7F	; 127
  ac:	29 ea       	ldi	r18, 0xA9	; 169
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	91 50       	subi	r25, 0x01	; 1
  b2:	20 40       	sbci	r18, 0x00	; 0
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
  bc:	dd cf       	rjmp	.-70     	; 0x78 <main+0xc>
			_delay_ms(100);     // Wait 100ms
		}
		else
		{
			// LED blinks at normal speed
			PORTC += 1;         // Increment PORTC LEDs
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	85 bb       	out	0x15, r24	; 21
			if (PORTC == 0xFF)
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	8f 3f       	cpi	r24, 0xFF	; 255
  c8:	09 f4       	brne	.+2      	; 0xcc <main+0x60>
			{
				PORTC = 0x00;
  ca:	15 ba       	out	0x15, r1	; 21
  cc:	9f eb       	ldi	r25, 0xBF	; 191
  ce:	24 ed       	ldi	r18, 0xD4	; 212
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	91 50       	subi	r25, 0x01	; 1
  d4:	20 40       	sbci	r18, 0x00	; 0
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x66>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x70>
  dc:	00 00       	nop
  de:	cc cf       	rjmp	.-104    	; 0x78 <main+0xc>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>

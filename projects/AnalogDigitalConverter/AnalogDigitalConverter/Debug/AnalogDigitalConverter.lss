
AnalogDigitalConverter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000673  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e3  00000000  00000000  0000081f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023e  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000039  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initADC>:

// Initializes ADC
void initADC()
{
	// Set ADC reference voltage to AVCC
	ADMUX |= (1 << REFS0);
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7

	// Set ADC prescaler to 128
	// This sets the ADC clock to 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  72:	86 b1       	in	r24, 0x06	; 6
  74:	87 60       	ori	r24, 0x07	; 7
  76:	86 b9       	out	0x06, r24	; 6

	// Enable ADC
	ADCSRA |= (1 << ADEN);
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	86 b9       	out	0x06, r24	; 6
  7e:	08 95       	ret

00000080 <readADC>:

// Reads a value from the specified ADC channel
uint16_t readADC(uint8_t channel)
{
	// Set the ADC channel
	ADMUX |= (channel & 0x0F);
  80:	97 b1       	in	r25, 0x07	; 7
  82:	8f 70       	andi	r24, 0x0F	; 15
  84:	98 2b       	or	r25, r24
  86:	97 b9       	out	0x07, r25	; 7

	// Start a conversion
	ADCSRA |= (1 << ADSC);
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	86 b9       	out	0x06, r24	; 6

	// Wait for the conversion to complete
	while (ADCSRA & (1 << ADSC));
  8e:	36 99       	sbic	0x06, 6	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <readADC+0xe>

	// Return the ADC value
	return ADC;
  92:	84 b1       	in	r24, 0x04	; 4
  94:	95 b1       	in	r25, 0x05	; 5
}
  96:	08 95       	ret

00000098 <serial_output>:
void serial_output(uint16_t value)
{
	// First, you need to wait until the UDR (data register) is empty
	// This is indicated by the UDRE (data register empty) flag in the
	// UCSRA (USART control and status register A)
	while(!(UCSRA & (1 << UDRE)));
  98:	5d 9b       	sbis	0x0b, 5	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <serial_output>

	// Once the data register is empty, you can load the value into the UDR
	// and it will be sent over the serial connection
	UDR = value;
  9c:	8c b9       	out	0x0c, r24	; 12
  9e:	08 95       	ret

000000a0 <main>:
void serial_output(uint16_t value);

int main()
{
	// Initialize ADC
	initADC();
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <initADC>

	// Loop indefinitely
	while (1)
	{
		// Read ADC value on channel 0
		uint16_t adc_value = readADC(0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 40 00 	call	0x80	; 0x80 <readADC>

		// Output ADC value over serial
		serial_output(adc_value);
  aa:	0e 94 4c 00 	call	0x98	; 0x98 <serial_output>
  ae:	fa cf       	rjmp	.-12     	; 0xa4 <main+0x4>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

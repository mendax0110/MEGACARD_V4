
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f9  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000613  00000000  00000000  00000965  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ef  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c0  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
#include <util/delay.h>

volatile uint8_t OCR0Var = 0;

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	OCR0 = OCR0Var;			// for PWM via S0 and S1
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	8c bf       	out	0x3c, r24	; 60
	PORTC |= (1 << PC4);	// set LED
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	80 61       	ori	r24, 0x10	; 16
  92:	85 bb       	out	0x15, r24	; 21
}
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
	PORTC &= ~(1 << PC4);	// reset LED
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	85 bb       	out	0x15, r24	; 21
}
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <init_Ports>:

void init_Ports()
{
	DDRC = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 bb       	out	0x14, r24	; 20
	
	PORTC ^= (1 << PC7);	// indicator LED
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	80 58       	subi	r24, 0x80	; 128
  c6:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);		// signal output
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	87 bb       	out	0x17, r24	; 23
	
	// for S0 and S1
	DDRA &= ~((1 << PA0)|(1 << PA1));
  ce:	8a b3       	in	r24, 0x1a	; 26
  d0:	8c 7f       	andi	r24, 0xFC	; 252
  d2:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0)|(1 << PA1));
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	08 95       	ret

000000dc <init_fast_PWM>:
}

void init_fast_PWM()
{
	PORTC ^= (1 << PC6);	// indicator LED
  dc:	95 b3       	in	r25, 0x15	; 21
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	89 27       	eor	r24, r25
  e2:	85 bb       	out	0x15, r24	; 21
	
	TCCR0 |= (1 << WGM00)|(1 << WGM01)|(1 << CS00)|(1 << COM01); // PWM Mode
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	89 66       	ori	r24, 0x69	; 105
  e8:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = OCR0Var;
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	8c bf       	out	0x3c, r24	; 60
	
	TIMSK |= (1 << OCIE0)|(1 << TOIE0); // software casting PWM Signal to the desired LED
  f0:	89 b7       	in	r24, 0x39	; 57
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	89 bf       	out	0x39, r24	; 57
  f6:	08 95       	ret

000000f8 <main>:
}

int main(void)
{
	cli();
  f8:	f8 94       	cli
	init_Ports();
  fa:	0e 94 5f 00 	call	0xbe	; 0xbe <init_Ports>
	init_fast_PWM();
  fe:	0e 94 6e 00 	call	0xdc	; 0xdc <init_fast_PWM>
	sei();
 102:	78 94       	sei
	
	while(1)
	{
		if((PINA & (1 << PA0)) == 0)
 104:	c8 99       	sbic	0x19, 0	; 25
 106:	0f c0       	rjmp	.+30     	; 0x126 <main+0x2e>
		{
			OCR0Var += 25;
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	87 5e       	subi	r24, 0xE7	; 231
 10e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	82 e5       	ldi	r24, 0x52	; 82
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x20>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x2a>
 122:	00 00       	nop
 124:	ef cf       	rjmp	.-34     	; 0x104 <main+0xc>
			_delay_ms(200);
		}
		else if((PINA & (1 << PA1)) == 0)
 126:	c9 99       	sbic	0x19, 1	; 25
 128:	ed cf       	rjmp	.-38     	; 0x104 <main+0xc>
		{
			OCR0Var -= 25;
 12a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12e:	89 51       	subi	r24, 0x19	; 25
 130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	82 e5       	ldi	r24, 0x52	; 82
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x42>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x4c>
 144:	00 00       	nop
 146:	de cf       	rjmp	.-68     	; 0x104 <main+0xc>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>

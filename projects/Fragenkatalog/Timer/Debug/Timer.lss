
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000114  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000001aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000636  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024c  00000000  00000000  00000e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 81 00 	call	0x102	; 0x102 <main>
  8a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:

volatile uint8_t TCNT0Var = 106;
volatile uint8_t softwareprescaler = 0;

ISR(TIMER0_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	/*
	* berechnung TCNTO: F_CPU/(2*F_OUT) = primzahlzerlungszahl solange bis dividenen geben -> vorteiler , 256 - restzahl = TCNT0
	*/
	TCNT0 = TCNT0Var;
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	82 bf       	out	0x32, r24	; 50
	
	softwareprescaler++;
  a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	
	if(softwareprescaler >= 25)	// 25 Hz on LED
  b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  b4:	89 31       	cpi	r24, 0x19	; 25
  b6:	30 f0       	brcs	.+12     	; 0xc4 <__vector_9+0x32>
	{
		PORTC ^= (PC1);
  b8:	95 b3       	in	r25, 0x15	; 21
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	89 27       	eor	r24, r25
  be:	85 bb       	out	0x15, r24	; 21
		softwareprescaler = 0;
  c0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	}
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <init_Ports>:

void init_Ports()
{
	DDRC = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 bb       	out	0x14, r24	; 20
	
	DDRB |= (1 << PB3);	// output for signal
  d6:	87 b3       	in	r24, 0x17	; 23
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	87 bb       	out	0x17, r24	; 23
  dc:	08 95       	ret

000000de <init_timer0>:
}

void init_timer0()
{
	TCCR0 &= ~(1 << WGM00);		// normal mode
  de:	83 b7       	in	r24, 0x33	; 51
  e0:	8f 7b       	andi	r24, 0xBF	; 191
  e2:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << WGM01);		// normal mode
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	87 7f       	andi	r24, 0xF7	; 247
  e8:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM00)|(1 << CS00)|(1 << CS01);	// set 64 prescaler
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	83 61       	ori	r24, 0x13	; 19
  ee:	83 bf       	out	0x33, r24	; 51
	
	TCNT0 = TCNT0Var;
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	82 bf       	out	0x32, r24	; 50
	OCR0 = 255;			//cross reference to get 625Hz on PB3
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8c bf       	out	0x3c, r24	; 60
	
	TIMSK |= (1 << TOIE0);	// register
  fa:	89 b7       	in	r24, 0x39	; 57
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	89 bf       	out	0x39, r24	; 57
 100:	08 95       	ret

00000102 <main>:
}

int main(void)
{
	cli();
 102:	f8 94       	cli
	init_Ports();
 104:	0e 94 69 00 	call	0xd2	; 0xd2 <init_Ports>
	init_timer0();
 108:	0e 94 6f 00 	call	0xde	; 0xde <init_timer0>
	sei();
 10c:	78 94       	sei
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0xc>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>

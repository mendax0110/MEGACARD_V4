
CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000140  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e3  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e5  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_19>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  7a:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_19>:
#include <util/delay.h>

volatile uint8_t OCR0Var = 149;

ISR(TIMER0_COMP_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
	PORTC ^= (1 << PC7);	// indicator LED
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	80 58       	subi	r24, 0x80	; 128
  92:	85 bb       	out	0x15, r24	; 21
	OCR0 = OCR0Var;
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <OCR0Var>
  98:	8c bf       	out	0x3c, r24	; 60
	// OCR = (F_CPU/(2*64*F_OUT)-1 =
	// F_OUT = (F_CPU/(2*64*OCR) -1 =
}
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <init_Ports>:

void init_Ports()
{
	DDRC = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 bb       	out	0x14, r24	; 20
	PORTC ^= (1 << PC6);	// indicator LED
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	80 e4       	ldi	r24, 0x40	; 64
  ae:	89 27       	eor	r24, r25
  b0:	85 bb       	out	0x15, r24	; 21
	
	DDRB |= (1 << PB3);		// output signal
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	87 bb       	out	0x17, r24	; 23
	
	// for LED 
	DDRA &= ~((1 << PA0)|(1 << PA1));
  b8:	8a b3       	in	r24, 0x1a	; 26
  ba:	8c 7f       	andi	r24, 0xFC	; 252
  bc:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0)|(1 << PA1));
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret

000000c6 <init_Timer0_CTC>:
}

void init_Timer0_CTC()
{
	PORTC ^= (1 << PC5);	// indicator LED
  c6:	95 b3       	in	r25, 0x15	; 21
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	89 27       	eor	r24, r25
  cc:	85 bb       	out	0x15, r24	; 21
	
	TCCR0 |= (1 << WGM01)|(1 << COM00)|(1 << CS00)|(1 << CS01); // vorteiler 64
  ce:	83 b7       	in	r24, 0x33	; 51
  d0:	8b 61       	ori	r24, 0x1B	; 27
  d2:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = OCR0Var;
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <OCR0Var>
  d8:	8c bf       	out	0x3c, r24	; 60
	TCNT0 = 0;
  da:	12 be       	out	0x32, r1	; 50
	
	TIMSK |= (1 << OCIE0);	// register
  dc:	89 b7       	in	r24, 0x39	; 57
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	89 bf       	out	0x39, r24	; 57
  e2:	08 95       	ret

000000e4 <main>:
}

int main(void)
{
	cli();
  e4:	f8 94       	cli
	init_Ports();
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <init_Ports>
	init_Timer0_CTC();
  ea:	0e 94 63 00 	call	0xc6	; 0xc6 <init_Timer0_CTC>
	sei();
  ee:	78 94       	sei
	
	while(1)
	{
		if((PINA & (1 << PA0)) == 0)
  f0:	c8 99       	sbic	0x19, 0	; 25
  f2:	11 c0       	rjmp	.+34     	; 0x116 <main+0x32>
		{
			PORTC ^= (1 << PC0);
  f4:	95 b3       	in	r25, 0x15	; 21
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	89 27       	eor	r24, r25
  fa:	85 bb       	out	0x15, r24	; 21
			OCR0Var = 78;
  fc:	8e e4       	ldi	r24, 0x4E	; 78
  fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <OCR0Var>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f e7       	ldi	r18, 0x7F	; 127
 104:	89 ea       	ldi	r24, 0xA9	; 169
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x24>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x2e>
 112:	00 00       	nop
 114:	ed cf       	rjmp	.-38     	; 0xf0 <main+0xc>
			_delay_ms(100);
		}
		else if((PINA & (1 << PA1)) == 0)
 116:	c9 99       	sbic	0x19, 1	; 25
 118:	eb cf       	rjmp	.-42     	; 0xf0 <main+0xc>
		{
			PORTC ^= (1 << PC1);
 11a:	95 b3       	in	r25, 0x15	; 21
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	89 27       	eor	r24, r25
 120:	85 bb       	out	0x15, r24	; 21
			OCR0Var = 50;
 122:	82 e3       	ldi	r24, 0x32	; 50
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <OCR0Var>
 128:	2f e7       	ldi	r18, 0x7F	; 127
 12a:	89 ea       	ldi	r24, 0xA9	; 169
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x4a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x54>
 138:	00 00       	nop
 13a:	da cf       	rjmp	.-76     	; 0xf0 <main+0xc>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>


INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061f  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000576  00000000  00000000  0000081f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000262  00000000  00000000  00000d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/portpins.h>
#include <util/delay.h>

// hardware interrupt 0
ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	PORTC |= (1 << PC7);
  78:	85 b3       	in	r24, 0x15	; 21
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	85 bb       	out	0x15, r24	; 21
}
  7e:	8f 91       	pop	r24
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <__vector_2>:

// hardware interrupt 1
ISR(INT1_vect)
{
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	8f 93       	push	r24
	PORTC &= ~(1 << PC7);
  96:	85 b3       	in	r24, 0x15	; 21
  98:	8f 77       	andi	r24, 0x7F	; 127
  9a:	85 bb       	out	0x15, r24	; 21
}
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <init_Ports>:

void init_Ports()
{
	DDRC = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	
	// set for S0 and S1
	DDRA &= ~((1 << PA0)|(1 << PA1));
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	8c 7f       	andi	r24, 0xFC	; 252
  b0:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ((1 << PA0)|(1 << PA1));
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	08 95       	ret

000000ba <init_interrupt0_1>:
}

void init_interrupt0_1()
{
	GICR |= (1 << INT0)|(1 << INT1);	// Set int0 and int1
  ba:	8b b7       	in	r24, 0x3b	; 59
  bc:	80 6c       	ori	r24, 0xC0	; 192
  be:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11)|(1 << ISC01);	// set int0 and int1
  c0:	85 b7       	in	r24, 0x35	; 53
  c2:	8a 60       	ori	r24, 0x0A	; 10
  c4:	85 bf       	out	0x35, r24	; 53
  c6:	08 95       	ret

000000c8 <main>:
}

int main(void)
{
	cli();
  c8:	f8 94       	cli
	init_Ports();
  ca:	0e 94 54 00 	call	0xa8	; 0xa8 <init_Ports>
	init_interrupt0_1();
  ce:	0e 94 5d 00 	call	0xba	; 0xba <init_interrupt0_1>
	sei();
  d2:	78 94       	sei
	
	while(1)
	{
		// set and unset
		if((PINA & (1 << PA0)) == 0)
  d4:	c8 99       	sbic	0x19, 0	; 25
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <main+0x18>
		{
			PORTC |= (1 << PC0);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	85 bb       	out	0x15, r24	; 21
  de:	03 c0       	rjmp	.+6      	; 0xe6 <main+0x1e>
		}
		else
		{
			PORTC &= ~(1 << PC0);
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	85 bb       	out	0x15, r24	; 21
		}
		
		// set and unset
		if((PINA & (1 << PA1)) == 0)
  e6:	c9 99       	sbic	0x19, 1	; 25
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <main+0x2a>
		{
			PORTC |= (1 << PC1);
  ea:	85 b3       	in	r24, 0x15	; 21
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	85 bb       	out	0x15, r24	; 21
  f0:	f1 cf       	rjmp	.-30     	; 0xd4 <main+0xc>
		}
		else
		{
			PORTC &= ~(1 << PC1);
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	8d 7f       	andi	r24, 0xFD	; 253
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	ed cf       	rjmp	.-38     	; 0xd4 <main+0xc>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>

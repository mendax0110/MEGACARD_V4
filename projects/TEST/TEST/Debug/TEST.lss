
TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071b  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  000008e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>            // Verzoegerungen

int main(void)
{
	
	DDRC = 0b11111111;			//Data Direction Register C - 1-> Ausgang
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00001111;        //LED 0 bis 3 - leuchten/ LED 4 bis 7 sind dunkel
  70:	8f e0       	ldi	r24, 0x0F	; 15
  72:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	2f ef       	ldi	r18, 0xFF	; 255
  76:	3d e3       	ldi	r19, 0x3D	; 61
  78:	99 e4       	ldi	r25, 0x49	; 73
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	30 40       	sbci	r19, 0x00	; 0
  7e:	90 40       	sbci	r25, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <main+0xe>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
	
	_delay_ms(2000);
	
	DDRC = 0b11111110;
  86:	9e ef       	ldi	r25, 0xFE	; 254
  88:	94 bb       	out	0x14, r25	; 20
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	3d e3       	ldi	r19, 0x3D	; 61
  8e:	99 e4       	ldi	r25, 0x49	; 73
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
	
	_delay_ms(2000);
	
	DDRC = 0b00001111;        //oberen 4 Bit des Ports -> Eingang
  9c:	84 bb       	out	0x14, r24	; 20
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	3d e3       	ldi	r19, 0x3D	; 61
  a2:	89 e4       	ldi	r24, 0x49	; 73
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
							 //unteren 4 Bit des Ports -> Ausgang
	_delay_ms(2000);
	PORTC = PORTC & 0b00000100;     //Bit 0 wird gelöscht
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	84 70       	andi	r24, 0x04	; 4
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	9f ef       	ldi	r25, 0xFF	; 255
  b8:	2d e3       	ldi	r18, 0x3D	; 61
  ba:	39 e4       	ldi	r19, 0x49	; 73
  bc:	91 50       	subi	r25, 0x01	; 1
  be:	20 40       	sbci	r18, 0x00	; 0
  c0:	30 40       	sbci	r19, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x50>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x5a>
  c6:	00 00       	nop
									//LED 0 wird abgeschalten
	_delay_ms(2000);
	PORTC = PORTC | 0b100000000;	//Bit 7 wird gesetzt
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	9d e3       	ldi	r25, 0x3D	; 61
  d0:	29 e4       	ldi	r18, 0x49	; 73
  d2:	81 50       	subi	r24, 0x01	; 1
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	20 40       	sbci	r18, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x66>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x70>
  dc:	00 00       	nop
									//LED wird zusätzlich eingeschaltet
	_delay_ms(2000);
	DDRC |= 0b10000000;
  de:	84 b3       	in	r24, 0x14	; 20
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	84 bb       	out	0x14, r24	; 20
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <main+0x78>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

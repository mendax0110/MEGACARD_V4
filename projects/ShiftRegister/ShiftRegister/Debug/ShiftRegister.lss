
ShiftRegister.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000022a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007df  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000615  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031c  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000215  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000019a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define DATA_PIN PB0
#define CLOCK_PIN PB1
#define LATCH_PIN PB2

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
	// Set DATA_PIN, CLOCK_PIN and LATCH_PIN as outputs
	DDRB |= (1 << DATA_PIN) | (1 << CLOCK_PIN) | (1 << LATCH_PIN);
  80:	87 b3       	in	r24, 0x17	; 23
  82:	87 60       	ori	r24, 0x07	; 7
  84:	87 bb       	out	0x17, r24	; 23
	
	// Set the data to be shifted out
	uint8_t data = 0b10101010;
	
	// Shift out the data, one bit at a time
	for(int i = 0; i < 8; i++)
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	1e c0       	rjmp	.+60     	; 0xc8 <main+0x4c>
	{
		// Set the value of the DATA_PIN to the value of the current bit
		if(data & (1 << i))
  8c:	2a ea       	ldi	r18, 0xAA	; 170
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	08 2e       	mov	r0, r24
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x1c>
  94:	35 95       	asr	r19
  96:	27 95       	ror	r18
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <main+0x18>
  9c:	20 ff       	sbrs	r18, 0
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <main+0x2c>
		{
			PORTB |= (1 << DATA_PIN);
  a0:	28 b3       	in	r18, 0x18	; 24
  a2:	21 60       	ori	r18, 0x01	; 1
  a4:	28 bb       	out	0x18, r18	; 24
  a6:	03 c0       	rjmp	.+6      	; 0xae <main+0x32>
		}
		else
		{
			PORTB &= ~(1 << DATA_PIN);
  a8:	28 b3       	in	r18, 0x18	; 24
  aa:	2e 7f       	andi	r18, 0xFE	; 254
  ac:	28 bb       	out	0x18, r18	; 24
		}
		
		// Toggle the CLOCK_PIN to shift the data
		PORTB |= (1 << CLOCK_PIN);
  ae:	28 b3       	in	r18, 0x18	; 24
  b0:	22 60       	ori	r18, 0x02	; 2
  b2:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	28 e2       	ldi	r18, 0x28	; 40
  b6:	2a 95       	dec	r18
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x3a>
		_delay_us(1);
		PORTB &= (1 << CLOCK_PIN);
  ba:	28 b3       	in	r18, 0x18	; 24
  bc:	22 70       	andi	r18, 0x02	; 2
  be:	28 bb       	out	0x18, r18	; 24
  c0:	28 e2       	ldi	r18, 0x28	; 40
  c2:	2a 95       	dec	r18
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x46>
	
	// Set the data to be shifted out
	uint8_t data = 0b10101010;
	
	// Shift out the data, one bit at a time
	for(int i = 0; i < 8; i++)
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	88 30       	cpi	r24, 0x08	; 8
  ca:	91 05       	cpc	r25, r1
  cc:	fc f2       	brlt	.-66     	; 0x8c <main+0x10>
		PORTB &= (1 << CLOCK_PIN);
		_delay_us(1);
	}
	
	// Toggle the LATCH_PIN to output the data to the shift register
	PORTB |= (1 << LATCH_PIN);
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x5a>
	_delay_us(1);
	PORTB &= (1 << LATCH_PIN);
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	84 70       	andi	r24, 0x04	; 4
  de:	88 bb       	out	0x18, r24	; 24
	
	// Print the output to the serial port
	for(int i = 0; i < 8; i++)
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	1b c0       	rjmp	.+54     	; 0x11c <main+0xa0>
	{
		if(PINB & (1 << PINB3))
  e6:	b3 9b       	sbis	0x16, 3	; 22
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <main+0x78>
		{
			printf("1");
  ea:	81 e3       	ldi	r24, 0x31	; 49
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 96 00 	call	0x12c	; 0x12c <putchar>
  f2:	04 c0       	rjmp	.+8      	; 0xfc <main+0x80>
		}
		else
		{
			printf("0");
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 96 00 	call	0x12c	; 0x12c <putchar>
  fc:	28 e2       	ldi	r18, 0x28	; 40
  fe:	2a 95       	dec	r18
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x82>
		}
		_delay_us(1);
		PORTB |= (1 << CLOCK_PIN);
 102:	88 b3       	in	r24, 0x18	; 24
 104:	82 60       	ori	r24, 0x02	; 2
 106:	88 bb       	out	0x18, r24	; 24
 108:	88 e2       	ldi	r24, 0x28	; 40
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x8e>
		_delay_us(1);
		PORTB &= (1 << CLOCK_PIN);
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	82 70       	andi	r24, 0x02	; 2
 112:	88 bb       	out	0x18, r24	; 24
 114:	28 e2       	ldi	r18, 0x28	; 40
 116:	2a 95       	dec	r18
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x9a>
	PORTB |= (1 << LATCH_PIN);
	_delay_us(1);
	PORTB &= (1 << LATCH_PIN);
	
	// Print the output to the serial port
	for(int i = 0; i < 8; i++)
 11a:	21 96       	adiw	r28, 0x01	; 1
 11c:	c8 30       	cpi	r28, 0x08	; 8
 11e:	d1 05       	cpc	r29, r1
 120:	14 f3       	brlt	.-60     	; 0xe6 <main+0x6a>
		PORTB &= (1 << CLOCK_PIN);
		_delay_us(1);
	}
	
	return 0;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <putchar>:
 12c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 130:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 134:	0e 94 9d 00 	call	0x13a	; 0x13a <fputc>
 138:	08 95       	ret

0000013a <fputc>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	fb 01       	movw	r30, r22
 144:	23 81       	ldd	r18, Z+3	; 0x03
 146:	21 fd       	sbrc	r18, 1
 148:	03 c0       	rjmp	.+6      	; 0x150 <fputc+0x16>
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	9f ef       	ldi	r25, 0xFF	; 255
 14e:	2c c0       	rjmp	.+88     	; 0x1a8 <fputc+0x6e>
 150:	22 ff       	sbrs	r18, 2
 152:	16 c0       	rjmp	.+44     	; 0x180 <fputc+0x46>
 154:	46 81       	ldd	r20, Z+6	; 0x06
 156:	57 81       	ldd	r21, Z+7	; 0x07
 158:	24 81       	ldd	r18, Z+4	; 0x04
 15a:	35 81       	ldd	r19, Z+5	; 0x05
 15c:	42 17       	cp	r20, r18
 15e:	53 07       	cpc	r21, r19
 160:	44 f4       	brge	.+16     	; 0x172 <fputc+0x38>
 162:	a0 81       	ld	r26, Z
 164:	b1 81       	ldd	r27, Z+1	; 0x01
 166:	9d 01       	movw	r18, r26
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	31 83       	std	Z+1, r19	; 0x01
 16e:	20 83       	st	Z, r18
 170:	8c 93       	st	X, r24
 172:	26 81       	ldd	r18, Z+6	; 0x06
 174:	37 81       	ldd	r19, Z+7	; 0x07
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	37 83       	std	Z+7, r19	; 0x07
 17c:	26 83       	std	Z+6, r18	; 0x06
 17e:	14 c0       	rjmp	.+40     	; 0x1a8 <fputc+0x6e>
 180:	8b 01       	movw	r16, r22
 182:	ec 01       	movw	r28, r24
 184:	fb 01       	movw	r30, r22
 186:	00 84       	ldd	r0, Z+8	; 0x08
 188:	f1 85       	ldd	r31, Z+9	; 0x09
 18a:	e0 2d       	mov	r30, r0
 18c:	09 95       	icall
 18e:	89 2b       	or	r24, r25
 190:	e1 f6       	brne	.-72     	; 0x14a <fputc+0x10>
 192:	d8 01       	movw	r26, r16
 194:	16 96       	adiw	r26, 0x06	; 6
 196:	8d 91       	ld	r24, X+
 198:	9c 91       	ld	r25, X
 19a:	17 97       	sbiw	r26, 0x07	; 7
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	17 96       	adiw	r26, 0x07	; 7
 1a0:	9c 93       	st	X, r25
 1a2:	8e 93       	st	-X, r24
 1a4:	16 97       	sbiw	r26, 0x06	; 6
 1a6:	ce 01       	movw	r24, r28
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
